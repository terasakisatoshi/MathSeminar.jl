precompile(Tuple{typeof(Base.similar), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Filesystem.abspath), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Sys.which), String})
precompile(Tuple{typeof(OhMyREPL.Prompt.insert_keybindings), Any})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(MbedTLS_jll.__init__)})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.URIs.RegexAndMatchData, 1}, HTTP.URIs.RegexAndMatchData})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Regex, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{HTTP.Parsers.RegexAndMatchData, 1}, HTTP.Parsers.RegexAndMatchData})
precompile(Tuple{typeof(HTTP.CookieRequest.__init__)})
precompile(Tuple{Type{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.Set{HTTP.Cookies.Cookie}, String})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}, 1}, Base.Dict{String, Base.Set{HTTP.Cookies.Cookie}}})
precompile(Tuple{typeof(HTTP.ConnectionRequest.__init__)})
precompile(Tuple{typeof(HTTP.Servers.__init__)})
precompile(Tuple{Type{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}, 1}, Base.Dict{Sockets.IPAddr, HTTP.Servers.RateLimit}})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#25#30")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#26#31")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#27#32")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#28#33")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#29#34")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(Base.allocatedinline), Type{Franklin.Token}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Franklin.OCBlock}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Franklin.OCProto}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Franklin.LxDef}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, Base.SubString{String}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Franklin.AbstractBlock}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.SubString{String}, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.RegexMatch}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{Symbol, Any, Array{Symbol, 1}, Array{Any, 1}}, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{Any, Tuple{Type, Vararg{DataType, N} where N}}, String})
precompile(Tuple{typeof(Franklin.def_GLOBAL_VARS!)})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.ValueIterator{OrderedCollections.LittleDict{String, Franklin.LxDef, Array{String, 1}, Array{Franklin.LxDef, 1}}}, Base.HasEltype, Base.HasLength})
precompile(Tuple{getfield(Franklin, Symbol("##process_config#168")), Bool, typeof(Franklin.process_config)})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{Symbol, String, Array{Symbol, 1}, Array{String, 1}}, String, Symbol})
precompile(Tuple{typeof(Franklin.set_paths!)})
precompile(Tuple{typeof(Base.stat), Symbol})
precompile(Tuple{typeof(Base.Filesystem.isdir), Symbol})
precompile(Tuple{typeof(Franklin.prepare_output_dir), Bool})
precompile(Tuple{Type{Base.Dict{Base.Pair{String, String}, Float64}}})
precompile(Tuple{getfield(Franklin, Symbol("##fd_setup#194")), Bool, typeof(Franklin.fd_setup)})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Int64})
precompile(Tuple{typeof(Franklin.time_it_took), Float64})
precompile(Tuple{typeof(Franklin.rprint), String})
precompile(Tuple{typeof(LiveServer.is_running), LiveServer.SimpleWatcher})
precompile(Tuple{typeof(LiveServer.start), LiveServer.SimpleWatcher})
precompile(Tuple{getfield(Sockets, Symbol("##TCPServer#5")), Bool, Type{Sockets.TCPServer}})
precompile(Tuple{getfield(Sockets, Symbol("##bind#8")), Bool, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.bind), Sockets.TCPServer, Sockets.IPv4, UInt16})
precompile(Tuple{getfield(Sockets, Symbol("##listen#13")), Int64, typeof(Sockets.listen), Sockets.TCPServer})
precompile(Tuple{getfield(Franklin, Symbol("#188#191")){Bool, getfield(Franklin, Symbol("#189#192")), NamedTuple{(:other, :infra, :md, :html, :literate), Tuple{Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}}}}, Int64, LiveServer.SimpleWatcher})
precompile(Tuple{typeof(LiveServer.stop), LiveServer.SimpleWatcher})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, Array{HTTP.WebSockets.WebSocket{T} where T<:IO, 1}}})
precompile(Tuple{typeof(Base.preserve_handle), Sockets.TCPServer})
precompile(Tuple{typeof(Base.unpreserve_handle), Sockets.TCPServer})
precompile(Tuple{typeof(Base.wait_close), Sockets.TCPServer})
precompile(Tuple{typeof(Base.close), Sockets.TCPServer})
precompile(Tuple{getfield(LiveServer, Symbol("##serve#8")), Int64, String, Bool, getfield(Franklin, Symbol("#188#191")){Bool, getfield(Franklin, Symbol("#189#192")), NamedTuple{(:other, :infra, :md, :html, :literate), Tuple{Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}}}}, typeof(LiveServer.serve), LiveServer.SimpleWatcher})
precompile(Tuple{typeof(Franklin.recursive_empty!), OrderedCollections.LittleDict{String, Franklin.LxDef, Array{String, 1}, Array{Franklin.LxDef, 1}}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Int64})
precompile(Tuple{typeof(Franklin.recursive_empty!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}, String})
precompile(Tuple{typeof(Base.empty!), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}})
precompile(Tuple{typeof(Franklin.recursive_empty!), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}})
precompile(Tuple{getfield(Franklin, Symbol("##serve#187")), Bool, Bool, Int64, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192")), Bool, typeof(Franklin.serve)})
precompile(Tuple{typeof(Franklin.serve)})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{typeof(Base.nextind), Base.SubString{String}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##chop#325")), Int64, Bool, typeof(Base.chop), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.find_tokens), String, OrderedCollections.LittleDict{Char, Array{Base.Pair{Tuple{Int64, Bool, Function, Union{Nothing, Bool, Function}}, Symbol}, 1}, Array{Char, 1}, Array{Array{Base.Pair{Tuple{Int64, Bool, Function, Union{Nothing, Bool, Function}}, Symbol}, 1}, 1}}, OrderedCollections.LittleDict{Char, Symbol, Array{Char, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base._deleteat!), Array{Franklin.Token, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Franklin.validate_footnotes!), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Franklin.from), Franklin.Token})
precompile(Tuple{typeof(Franklin.validate_headers!), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Franklin.Token, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Franklin.Token, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.Token, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Franklin.str), Franklin.Token})
precompile(Tuple{typeof(Franklin.find_hrules!), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#32#33")){Array{Franklin.Token, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#32#33")){Array{Franklin.Token, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Franklin.find_indented_blocks!), Array{Franklin.Token, 1}, String})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.Token, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.findnext), getfield(Franklin, Symbol("#90#94")){Base.SubString{String}}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Base.UnitRange{Int64}, Int64, Int64})
precompile(Tuple{typeof(Franklin.preprocess_candidate_mddefs!), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#34#35")){Array{Franklin.Token, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#34#35")){Array{Franklin.Token, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Franklin.subs), Base.SubString{String}, Int64, Int64})
precompile(Tuple{typeof(Franklin.filter_lr_indent!), Array{Franklin.Token, 1}, String})
precompile(Tuple{typeof(Base.fill!), Array{Int64, 2}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, Int64, Int64, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Int64, 1, Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Int64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 2}, Array{Int64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Franklin.context), String, Int64})
precompile(Tuple{Type{Franklin.OCBlock}, Symbol, Base.Pair{Franklin.Token, Franklin.Token}, Bool})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Franklin.Token, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.Token, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Bool, 1, Array{Bool, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Bool, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Bool, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.findnext), getfield(Franklin, Symbol("#13#14")){Franklin.OCProto}, Array{Franklin.Token, 1}, Int64})
precompile(Tuple{getfield(Franklin, Symbol("##find_ocblocks#12")), Bool, typeof(Franklin.find_ocblocks), Array{Franklin.Token, 1}, Franklin.OCProto})
precompile(Tuple{typeof(Base.copyto!), Array{Franklin.OCBlock, 1}, Int64, Array{Franklin.OCBlock, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Franklin.OCProto, 1}, Array{Franklin.OCProto, 1}})
precompile(Tuple{typeof(Franklin.from), Franklin.OCBlock})
precompile(Tuple{typeof(Base.sort!), Array{Franklin.OCBlock, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Franklin, Symbol("#16#18"))}})
precompile(Tuple{typeof(Base.sort!), Array{Franklin.OCBlock, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Franklin, Symbol("#16#18"))}, Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Franklin.from), Tuple{Base.Broadcast.Extruded{Array{Franklin.OCBlock, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.in), Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.UnitRange{Int64}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#17#19")){Array{Bool, 1}, Array{Int64, 1}, Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.deleteat!), Array{Franklin.OCBlock, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Bool, 1}, typeof(Base.:(!))}, Int64})
precompile(Tuple{typeof(Franklin.deactivate_inner_blocks!), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#36#38")){Array{Franklin.OCBlock, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#36#38")){Array{Franklin.OCBlock, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}})
precompile(Tuple{getfield(Franklin, Symbol("#37#39")){Array{Franklin.OCBlock, 1}, String, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Base.UnitRange{Int64}, getfield(Franklin, Symbol("#37#39")){Array{Franklin.OCBlock, 1}, String, Array{Int64, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Franklin, Symbol("#37#39")){Array{Franklin.OCBlock, 1}, String, Array{Int64, 1}}}})
precompile(Tuple{typeof(Franklin.form_super_block!), Array{Franklin.OCBlock, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{Franklin.OCBlock, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Franklin.merge_indented_blocks!), Array{Franklin.OCBlock, 1}, String})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#40#41")){Array{Franklin.OCBlock, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#40#41")){Array{Franklin.OCBlock, 1}}, Base.OneTo{Int64}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Franklin.OCBlock, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Franklin.OCBlock, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(|>)), Tuple{Base.Broadcast.Extruded{Array{Franklin.OCBlock, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{typeof(Franklin.from)}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(|>)), Tuple{Base.Broadcast.Extruded{Array{Franklin.OCBlock, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{typeof(Franklin.to)}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.error_if_canonical_getindex), Base.IndexCartesian, Base.LogicalIndex{Int64, Base.BitArray{1}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copymutable), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.copy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base._unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, typeof(Base.identity)}, Int64, Tuple{Int64, UInt64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}, Array{Int64, 1}, Tuple{Array{Int64, 1}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.OCBlock, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Franklin.filter_indented_blocks!), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Franklin, Symbol("#107#112")), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Franklin.str), Franklin.OCBlock})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Franklin.LxDef, Array{String, 1}, Array{Franklin.LxDef, 1}}, Franklin.LxDef, String})
precompile(Tuple{typeof(Franklin.def_GLOBAL_LXDEFS!)})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{Symbol, Any, Array{Symbol, 1}, Array{Any, 1}}, String, Symbol})
precompile(Tuple{typeof(Franklin.globvar), String})
precompile(Tuple{typeof(Base._any), getfield(Franklin, Symbol("#108#113")), Array{Franklin.OCBlock, 1}, Base.Colon})
precompile(Tuple{typeof(Franklin.set_var!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, String, Bool})
precompile(Tuple{typeof(Base._any), getfield(Franklin, Symbol("#109#114")), Array{Franklin.OCBlock, 1}, Base.Colon})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#48#51")), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Franklin.content), Franklin.OCBlock})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Franklin.OCBlock, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(~)), Tuple{Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Franklin.OCBlock, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.OCBlock, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.OCBlock, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Franklin.OCBlock, 1}, getfield(Franklin, Symbol("#50#53"))}, Int64})
precompile(Tuple{typeof(Base.to_index), Array{Franklin.OCBlock, 1}, Nothing})
precompile(Tuple{typeof(Base.:(<)), Nothing, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, Nothing})
precompile(Tuple{typeof(Franklin.find_lxdefs), Array{Franklin.Token, 1}, Array{Franklin.OCBlock, 1}})
precompile(Tuple{Type{Franklin.LxDef}, String, Int64, Base.SubString{String}})
precompile(Tuple{Type{Franklin.LxDef}, String, Int64, String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Franklin.pastdef), Tuple{Base.Broadcast.Extruded{Array{Franklin.LxDef, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.RefValue{Franklin.LxDef}}, Base.RefValue{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Ref{Franklin.LxDef}}, Base.RefValue{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Ref{Franklin.LxDef}}}, Base.RefValue{Nothing}})
precompile(Tuple{Type{Franklin.LxCom}, Base.SubString{String}, Base.RefValue{Nothing}, Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.OCBlock, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Franklin, Symbol("##find_lxcoms#58")), Bool, typeof(Franklin.find_lxcoms), Array{Franklin.Token, 1}, Array{Franklin.LxDef, 1}, Array{Franklin.OCBlock, 1}, Int64})
precompile(Tuple{typeof(Franklin.find_double_brace_blocks), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Crayons._parse_color), Symbol})
precompile(Tuple{getfield(Crayons, Symbol("##Crayon#1")), Symbol, Symbol, Symbol, Bool, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Type{Crayons.Crayon}})
precompile(Tuple{typeof(Base.print), Crayons.Crayon, String})
precompile(Tuple{getfield(Crayons, Symbol("##Crayon#1")), Symbol, Symbol, Bool, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Type{Crayons.Crayon}})
precompile(Tuple{typeof(Base.println), Crayons.Crayon, String})
precompile(Tuple{typeof(Franklin.logger), Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#96#99")), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Franklin.locvar), String})
precompile(Tuple{typeof(Franklin.set_vars!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Franklin.locvar), Symbol})
precompile(Tuple{getfield(Franklin, Symbol("#97#100")), Franklin.OCBlock})
precompile(Tuple{typeof(Base._any), getfield(Franklin, Symbol("#98#101")), Array{Franklin.OCBlock, 1}, Base.Colon})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, String})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Nothing, Base.SubString{String}}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Franklin.process_mddefs), Array{Franklin.OCBlock, 1}, Bool, Bool})
precompile(Tuple{typeof(Franklin.find_special_chars), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#110#115")), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Franklin, Symbol("#111#116")), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(Franklin, Symbol("#86#87")){Int64, Int64}}, Base.Iterators.Pairs{Int64, Franklin.OCBlock, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Franklin.OCBlock, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(Franklin, Symbol("#86#87")){Int64, Int64}}, Base.Iterators.Pairs{Int64, Franklin.OCBlock, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Franklin.OCBlock, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Franklin.deactivate_divs), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base._typed_vcat), Type{Franklin.AbstractBlock}, Tuple{Array{Franklin.LxCom, 1}, Array{Franklin.OCBlock, 1}, Array{Franklin.HTML_SPCH, 1}, Array{Franklin.Token, 1}, Array{Franklin.OCBlock, 1}, Array{Franklin.Token, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Franklin.AbstractBlock, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Franklin, Symbol("#20#21"))}})
precompile(Tuple{typeof(Base.sort!), Array{Franklin.AbstractBlock, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Array{Franklin.AbstractBlock, 1}})
precompile(Tuple{typeof(Franklin.from), Franklin.LxCom})
precompile(Tuple{typeof(Franklin.from_ifsmaller), Array{Franklin.AbstractBlock, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.to_index), Array{Franklin.LxDef, 1}, Nothing})
precompile(Tuple{typeof(Franklin.form_inter_md), String, Array{Franklin.AbstractBlock, 1}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Base, Symbol("##chop#325")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{getfield(Base, Symbol("##chop#325")), Int64, Int64, typeof(Base.chop), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##md2html#85")), Bool, typeof(Franklin.md2html), String})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, Array{Union{Base.SubString{String}, String}, 1}, Array{Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{Any, Tuple{DataType, Vararg{DataType, N} where N}}, String})
precompile(Tuple{typeof(Base.merge!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}})
precompile(Tuple{typeof(Franklin._url_curpage)})
precompile(Tuple{typeof(Franklin._url_curpage2)})
precompile(Tuple{typeof(Franklin.url_curpage)})
precompile(Tuple{typeof(Franklin.set_var!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, String, String})
precompile(Tuple{typeof(Franklin.def_LOCAL_VARS!)})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Int64, Array{String, 1}, Array{Int64, 1}}, Int64, String})
precompile(Tuple{typeof(Franklin.set_page_env)})
precompile(Tuple{getfield(Franklin, Symbol("##convert_md#106")), Bool, Bool, Bool, Bool, Bool, typeof(Franklin.convert_md), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isinternal,), Tuple{Bool}}, typeof(Franklin.convert_md), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isinternal,), Tuple{Bool}}, typeof(Franklin.convert_md), Base.SubString{String}})
precompile(Tuple{typeof(Base.filter!), getfield(Franklin, Symbol("#137#138")), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Franklin.check_for_pat), Nothing})
precompile(Tuple{typeof(Franklin.check_for_pat), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.qualify_html_hblocks), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.AbstractBlock, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(Franklin, Symbol("#143#149")){Array{Franklin.AbstractBlock, 1}}}})
precompile(Tuple{typeof(Franklin.process_html_cond), String, Array{Franklin.AbstractBlock, 1}, Int64})
precompile(Tuple{typeof(Franklin.get_for_body), Int64, Array{Franklin.AbstractBlock, 1}})
precompile(Tuple{typeof(Franklin.process_html_for), String, Array{Franklin.AbstractBlock, 1}, Int64})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:pagevar,), Tuple{Bool}}, typeof(Franklin.convert_md), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:pagevar,), Tuple{Bool}}, typeof(Franklin.convert_md), String})
precompile(Tuple{typeof(Franklin.get_rpath), String})
precompile(Tuple{typeof(Franklin.pagevar), String, String})
precompile(Tuple{typeof(Franklin.hfun_fill), Array{String, 1}})
precompile(Tuple{typeof(Franklin.convert_html_fblock), Franklin.HFun})
precompile(Tuple{typeof(Franklin.process_html_qblocks), String, Array{Franklin.AbstractBlock, 1}, Int64, Int64})
precompile(Tuple{typeof(Franklin.process_html_qblocks), String, Array{Franklin.AbstractBlock, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.RegexMatchIterator, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Nothing, Base.Generator{Array{Base.RegexMatch, 1}, getfield(Franklin, Symbol("#153#155"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Base.SubString{String}, Base.Generator{Array{Base.RegexMatch, 1}, getfield(Franklin, Symbol("#153#155"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.RegexMatch, 1}, getfield(Franklin, Symbol("#153#155"))}})
precompile(Tuple{typeof(Franklin.find_and_fix_md_links), String})
precompile(Tuple{typeof(Franklin.fix_links), String})
precompile(Tuple{getfield(Franklin, Symbol("##convert_html#136")), Bool, typeof(Franklin.convert_html), String})
precompile(Tuple{typeof(Franklin.convert_html), String})
precompile(Tuple{Type{Base.Dict{String, Base.Pair{A, B} where B where A}}})
precompile(Tuple{Type{Base.Dict{String, Base.Pair{A, B} where B where A}}, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}})
precompile(Tuple{getfield(Franklin, Symbol("##fd2html_v#139")), Bool, String, typeof(Franklin.fd2html_v), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#fd2html_v##kw")), NamedTuple{(:internal,), Tuple{Bool}}, typeof(Franklin.fd2html_v), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##fd2html#140")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:internal,), Tuple{Bool}}}, typeof(Franklin.fd2html), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#fd2html##kw")), NamedTuple{(:internal,), Tuple{Bool}}, typeof(Franklin.fd2html), Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, String, Array{String, 1}, Array{String, 1}}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#43#45")), Array{Franklin.OCBlock, 1}}, getfield(Franklin, Symbol("#42#44"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Tuple{Int64, Int64}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#43#45")), Array{Franklin.OCBlock, 1}}, getfield(Franklin, Symbol("#42#44"))}})
precompile(Tuple{typeof(Franklin.validate_and_store_link_defs!), Array{Franklin.OCBlock, 1}})
precompile(Tuple{getfield(Franklin, Symbol("##convert_md#106")), Bool, Bool, Bool, Bool, Bool, typeof(Franklin.convert_md), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{Any, Tuple{Type, Vararg{DataType, N} where N}}})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{Any, Tuple{DataType, Vararg{DataType, N} where N}}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{DataType}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{String, Tuple{DataType}}, String})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{String, Tuple{DataType}}, Symbol})
precompile(Tuple{getfield(Franklin, Symbol("#9#10")){String}, Base.SubString{String}, Bool})
precompile(Tuple{typeof(Franklin.is_hr1), Int64, Char})
precompile(Tuple{typeof(Franklin.is_hr2), Int64, Char})
precompile(Tuple{typeof(Franklin.is_hr3), Int64, Char})
precompile(Tuple{getfield(Franklin, Symbol("#λ#11")){String, Tuple{Char}, Bool}, Base.SubString{String}, Bool})
precompile(Tuple{typeof(Franklin.α), Char, Tuple{Char, Char, Char, Char, Char, Char, Char, Char, Char, Char}})
precompile(Tuple{typeof(Franklin.α), Char, Tuple{Char, Char, Char, Char, Char, Char, Char, Char, Char, Char, Char, Char}})
precompile(Tuple{typeof(Franklin.is_footnote), Int64, Char})
precompile(Tuple{getfield(Franklin, Symbol("#22#23")), Int64, Char})
precompile(Tuple{getfield(Franklin, Symbol("#λ#11")){String, Tuple{Char, Char, Char, Char, Char, Char, Char, Char, Char}, Bool}, Base.SubString{String}, Bool})
precompile(Tuple{typeof(Franklin.is_div_open), Int64, Char})
precompile(Tuple{typeof(Franklin.α), Char, Tuple{Char}})
precompile(Tuple{typeof(Franklin._is_language), Int64, Char})
precompile(Tuple{typeof(Franklin._validate_language), Base.SubString{String}})
precompile(Tuple{typeof(Franklin._is_language2), Int64, Char})
precompile(Tuple{typeof(Base.match), Base.Regex, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.str), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.from), Base.SubString{String}})
precompile(Tuple{typeof(Base.unique), Base.SubString{String}})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Franklin, Symbol("#88#92")), Array{Franklin.Token, 1}, Int64})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Franklin, Symbol("#91#95")){Array{Franklin.Token, 1}, Int64, Int64}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.length), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{Any, Tuple{Type, Vararg{DataType, N} where N}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#64#65")){typeof(Base.strip), typeof(Franklin.content)}, Franklin.OCBlock})
precompile(Tuple{Type{Franklin.LxDef}, Base.SubString{String}, Int64, Base.SubString{String}, Int64, Int64})
precompile(Tuple{typeof(Franklin.check_type), DataType, Tuple{DataType}})
precompile(Tuple{getfield(Franklin, Symbol("#1#2")){DataType}, Type{T} where T})
precompile(Tuple{typeof(Franklin.valid_subtype), Type{String}, Type{String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Bool, Tuple{DataType}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{Bool, Tuple{DataType}}, String})
precompile(Tuple{typeof(Franklin.check_type), DataType, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{String, Tuple{DataType, DataType}}, String})
precompile(Tuple{typeof(Franklin.valid_subtype), Type{Array{String, 1}}, Type{Array{String, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Array{String, 1}, Tuple{DataType}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{Array{String, 1}, Tuple{DataType}}, String})
precompile(Tuple{typeof(Base.getindex), Array{Franklin.LxDef, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{Symbol, Any, Array{Symbol, 1}, Array{Any, 1}}, Int64, Symbol})
precompile(Tuple{typeof(Base.getproperty), Franklin.LxDef, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{Symbol, Any, Array{Symbol, 1}, Array{Any, 1}}, Base.VersionNumber, Symbol})
precompile(Tuple{typeof(Pkg.Types.semver_interval), Base.RegexMatch})
precompile(Tuple{Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.SHA1})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SHA1}}, Base.SHA1})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt8, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{Pkg.Types.EnvCache}, Nothing, String, String, String, Nothing, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{String, Array{Base.UUID, 1}}, Base.Dict{Base.UUID, Array{String, 1}}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.filter!), Base.Fix2{typeof(Base.:(!=)), Symbol}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}, Array{Symbol, 1}})
precompile(Tuple{getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}}})
precompile(Tuple{typeof(Base._array_for), Type{Bool}, Array{Symbol, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{Symbol, 1}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{Symbol, 1}, getfield(Pkg.Types, Symbol("#23#24")){Pkg.Types.PackageEntry, Pkg.Types.PackageEntry}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Pkg.Types.GitRepo, Pkg.Types.GitRepo})
precompile(Tuple{typeof(Base.:(==)), Base.SHA1, Base.SHA1})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{getfield(Franklin, Symbol("##scan_input_dir!#157")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Franklin.scan_input_dir!), Base.Dict{Base.Pair{String, String}, Float64}, Vararg{Base.Dict{Base.Pair{String, String}, Float64}, N} where N})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{Array{String, 1}, Tuple{DataType}}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Franklin, Symbol("#158#160")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{String, 1}, getfield(Franklin, Symbol("#158#160"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(Franklin, Symbol("#158#160"))}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Bool, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Franklin, Symbol("#159#161")), Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.Iterators.Filter{getfield(Franklin, Symbol("#159#161")), Array{String, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#159#161")), Array{String, 1}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#159#161")), Array{String, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(Franklin, Symbol("#159#161")), Array{String, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Bool, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Array{Bool, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Array{Bool, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Array{Bool, 1}}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#64#65")){typeof(Base.:(!)), typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:files2ignore, :dirs2ignore), T} where T<:Tuple}, Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:files2ignore, :dirs2ignore), Tuple{Array{String, 1}, Array{String, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:files2ignore, :dirs2ignore), Tuple{Array{String, 1}, Array{String, 1}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Franklin, Symbol("#165#167")), String})
precompile(Tuple{getfield(Franklin, Symbol("#164#166")), String})
precompile(Tuple{typeof(Franklin.should_ignore), String, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.hash), Base.Pair{String, String}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.Pair{String, String}, Float64}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.Pair{String, String}, Float64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.Pair{String, String}, Float64}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.Pair{String, String}, Float64}, Float64, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Base.Pair{String, String}, Float64}, Int64, Base.Pair{String, String}})
precompile(Tuple{typeof(Franklin.add_if_new_file!), Base.Dict{Base.Pair{String, String}, Float64}, Base.Pair{String, String}, Bool, Bool})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##walkdir#23")), Bool, Bool, typeof(throw), typeof(Base.Filesystem.walkdir), Symbol})
precompile(Tuple{typeof(Base.Filesystem.walkdir), Symbol})
precompile(Tuple{getfield(Franklin, Symbol("##_scan_input_dir2!#163")), Bool, Array{String, 1}, Array{String, 1}, typeof(Franklin._scan_input_dir2!), Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Bool})
precompile(Tuple{getfield(Franklin, Symbol("#_scan_input_dir2!##kw")), NamedTuple{(:files2ignore, :dirs2ignore), Tuple{Array{String, 1}, Array{String, 1}}}, typeof(Franklin._scan_input_dir2!), Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}})
precompile(Tuple{typeof(Base.iterate), Base.Pair{String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{String, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{Type{NamedTuple{(:clear, :verb, :prerender, :isoptim, :no_fail_prerender, :on_write), T} where T<:Tuple}, Tuple{Bool, Bool, Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}})
precompile(Tuple{typeof(Franklin.newmodule), String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(Franklin, Symbol("#169#170")), String})
precompile(Tuple{typeof(Base.filter!), getfield(Franklin, Symbol("#169#170")), Array{String, 1}})
precompile(Tuple{typeof(Franklin.process_utils)})
precompile(Tuple{getfield(Dates, Symbol("##format#31")), Dates.DateLocale, typeof(Dates.format), Dates.Date, String})
precompile(Tuple{typeof(Base.isempty), Dates.Date})
precompile(Tuple{typeof(Franklin.rss_generator)})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, String, String})
precompile(Tuple{getfield(Franklin, Symbol("##fd_fullpass#195")), Bool, Bool, Bool, Bool, Bool, Function, typeof(Franklin.fd_fullpass), NamedTuple{(:other, :infra, :md, :html, :literate), Tuple{Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}}}})
precompile(Tuple{getfield(Franklin, Symbol("#fd_fullpass##kw")), NamedTuple{(:clear, :verb, :prerender, :isoptim, :no_fail_prerender, :on_write), Tuple{Bool, Bool, Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}, typeof(Franklin.fd_fullpass), NamedTuple{(:other, :infra, :md, :html, :literate), Tuple{Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}}}})
precompile(Tuple{typeof(Base.isempty), Base.Pair{String, Tuple{DataType}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{String, Tuple{DataType}}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat_t), Type{Franklin.LxDef}, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#109")), Int64, typeof(Base.cat_t), Type{Franklin.LxDef}, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{typeof(Base._cat_t), Int64, Type{T} where T, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Array{Franklin.LxDef, 1}, Array{Franklin.LxDef, 1}}})
precompile(Tuple{typeof(Base.similar), Array{Franklin.LxDef, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.cat_similar), Array{Franklin.LxDef, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Franklin.LxDef, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Franklin.LxDef, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Franklin.LxDef, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Franklin.LxDef, 1}, Tuple{Int64}, Tuple{Bool}, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{getfield(Franklin, Symbol("#64#66")){String}})
precompile(Tuple{typeof(Base.redirect_stderr), getfield(Franklin, Symbol("#64#66")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Franklin, Symbol("#63#65")){String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.redirect_stderr), Base.TTY})
precompile(Tuple{Type{Utils.Theorem}})
precompile(Tuple{Type{Utils.State}, Symbol, Utils.Theorem, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{Type{NamedTuple{(:clear, :prerender, :isoptim, :on_write), T} where T<:Tuple}, Tuple{Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}})
precompile(Tuple{getfield(Franklin, Symbol("#process_file##kw")), NamedTuple{(:clear, :prerender, :isoptim, :on_write), Tuple{Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}, typeof(Franklin.process_file), Symbol, Base.Pair{String, String}, String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Franklin, Symbol("##process_file#180")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:clear, :prerender, :isoptim, :on_write), Tuple{Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}}, typeof(Franklin.process_file), Symbol, Base.Pair{String, String}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Franklin._out_path), String})
precompile(Tuple{typeof(Franklin._out_path2), String})
precompile(Tuple{typeof(Franklin.form_output_path), String, String, Symbol})
precompile(Tuple{getfield(Franklin, Symbol("##process_file_err#181")), Bool, Bool, Bool, Function, typeof(Franklin.process_file_err), Symbol, Base.Pair{String, String}, String, String, String, Float64})
precompile(Tuple{getfield(Franklin, Symbol("#process_file_err##kw")), NamedTuple{(:clear, :prerender, :isoptim, :on_write), Tuple{Bool, Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}, typeof(Franklin.process_file_err), Symbol, Base.Pair{String, String}, String, String, String, Float64})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{Type{NamedTuple{(:prerender, :isoptim, :on_write), T} where T<:Tuple}, Tuple{Bool, Bool, getfield(Franklin, Symbol("#189#192"))}})
precompile(Tuple{getfield(Franklin, Symbol("#172#176")), String})
precompile(Tuple{typeof(Base._all), getfield(Franklin, Symbol("#172#176")), Tuple{String, String}, Base.Colon})
precompile(Tuple{typeof(Franklin.jor), String, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Franklin.RSSItem, Array{String, 1}, Array{Franklin.RSSItem, 1}}, Franklin.RSSItem, String})
precompile(Tuple{typeof(Franklin.add_rss_item)})
precompile(Tuple{typeof(Franklin.fd_date), Dates.DateTime})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, getfield(Franklin, Symbol("#173#177")), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Franklin.build_page), String, String, String, String})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{String}}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#549")), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.RegexMatch, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Franklin.js2html), String, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.RegexMatch, 1}, String})
precompile(Tuple{typeof(Franklin.js_prerender_katex), String})
precompile(Tuple{getfield(Franklin, Symbol("##write_page#171")), Bool, Bool, getfield(Franklin, Symbol("#189#192")), typeof(Franklin.write_page), String, String, String, String, String, String})
precompile(Tuple{getfield(Franklin, Symbol("#write_page##kw")), NamedTuple{(:prerender, :isoptim, :on_write), Tuple{Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}, typeof(Franklin.write_page), String, String, String, String, String, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{String, Tuple{DataType, DataType}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{Array{String, 1}, Tuple{DataType}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{Bool, Tuple{DataType}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(Franklin, Symbol("#54#56")){Base.SubString{String}}}, Base.Iterators.Pairs{Int64, Franklin.LxDef, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Franklin.LxDef, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(Franklin, Symbol("#54#56")){Base.SubString{String}}}, Base.Iterators.Pairs{Int64, Franklin.LxDef, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Franklin.LxDef, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.filter!), getfield(Franklin, Symbol("#55#57")){Array{Franklin.LxDef, 1}, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Franklin.get_lxdef_ref), Base.SubString{String}, Array{Franklin.LxDef, 1}, Bool, Int64})
precompile(Tuple{typeof(Franklin.valid_subtype), Type{Bool}, Type{Bool}})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{Bool, Tuple{DataType}}, Symbol})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Base.Pair{A, B} where B where A, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Pair{A, B} where B where A, 1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataType, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{DataType, DataType}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{DataType}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{DataType, DataType, DataType}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.allocatedinline), Type{DataType}})
precompile(Tuple{typeof(Base.allocatedinline), Type{UnionAll}})
precompile(Tuple{getfield(Base, Symbol("#645#646")){Tuple{UnionAll, DataType}, Base.IdDict{Any, Any}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(Base, Symbol("#645#646")){Tuple{UnionAll, DataType}, Base.IdDict{Any, Any}}, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UnionAll, DataType}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), UnionAll, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), DataType, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Franklin.LxCom, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Franklin.AbstractBlock, 1}, Array{Franklin.LxCom, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Franklin.OCBlock, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Franklin.AbstractBlock, 1}, Array{Franklin.OCBlock, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Franklin.HTML_SPCH, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Franklin.AbstractBlock, 1}, Array{Franklin.HTML_SPCH, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Franklin.Token, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Franklin.AbstractBlock, 1}, Array{Franklin.Token, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.LxCom, Franklin.LxCom})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.OCBlock, Franklin.LxCom})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.OCBlock, Franklin.OCBlock})
precompile(Tuple{typeof(Franklin.to), Franklin.OCBlock})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, Markdown.MD})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#107#108")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#107#108")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Paragraph})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, String}, Char})
precompile(Tuple{typeof(Markdown.htmlesc), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Franklin.getdef), Franklin.LxCom})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.:(==)), Char}, String, Int64})
precompile(Tuple{typeof(Franklin.getname), Franklin.LxCom})
precompile(Tuple{typeof(Franklin.reprocess), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.reprocess), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("##resolve_lxcom#121")), Bool, typeof(Franklin.resolve_lxcom), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.resolve_lxcom), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_block), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_inter_html), String, Array{Franklin.AbstractBlock, 1}, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.isnothing), Base.RefArray{Franklin.LxDef, Array{Franklin.LxDef, 1}, Nothing}})
precompile(Tuple{typeof(Base.getindex), Base.RefArray{Franklin.LxDef, Array{Franklin.LxDef, 1}, Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SubString{String}, String}}, Base.SubString{String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("##replace#336")), Int64, typeof(Base.replace), String, Base.Pair{String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.replace), Base.SubString{String}, Base.Pair{String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.:(*)), String, Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isrecursive, :isconfig, :has_mddefs), Tuple{Bool, Bool, Bool}}, typeof(Franklin.convert_md), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.subs), Base.SubString{String}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Franklin.convert_inter_html), Base.SubString{String}, Array{Franklin.AbstractBlock, 1}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isrecursive, :has_mddefs), Tuple{Bool, Bool}}, typeof(Franklin.convert_md), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.refstring), String})
precompile(Tuple{typeof(Base.get), OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, Array{Union{Base.SubString{String}, String}, 1}, Array{Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, 1}}, String, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Symbol, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Symbol, Int64, Int64})
precompile(Tuple{getfield(Franklin, Symbol("##html_ahref#6")), String, String, typeof(Franklin.html_ahref), String, Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##html_ahref#6")), String, String, typeof(Franklin.html_ahref), String, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, Array{Union{Base.SubString{String}, String}, 1}, Array{Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, 1}}, Tuple{String, Int64, Int64}, String})
precompile(Tuple{typeof(Franklin.convert_header), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_footnote_def), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#83#84"))})
precompile(Tuple{typeof(Franklin.refstring), Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Char, Array{Base.Pair{Tuple{Int64, Bool, Function, Union{Nothing, Bool, Function}}, Symbol}, 1}}, Char})
precompile(Tuple{typeof(Franklin.find_tokens), String, Base.Dict{Char, Array{Base.Pair{Tuple{Int64, Bool, Function, Union{Nothing, Bool, Function}}, Symbol}, 1}}, OrderedCollections.LittleDict{Char, Symbol, Array{Char, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#117#118")), Array{Franklin.OCBlock, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#resolve_lxcom##kw")), NamedTuple{(:inmath,), Tuple{Bool}}, typeof(Franklin.resolve_lxcom), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_md_math), String, Array{Franklin.LxDef, 1}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Int64, Array{String, 1}, Array{Int64, 1}}, Symbol, String})
precompile(Tuple{typeof(Franklin.convert_math_block), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_block), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{String, Tuple{DataType, DataType}}, Symbol})
precompile(Tuple{typeof(Base.isnothing), String})
precompile(Tuple{typeof(Base.string), String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.convert), Type{String}, Base.SubString{String}})
precompile(Tuple{typeof(Utils.setlevel), Symbol})
precompile(Tuple{typeof(Utils.setlevel), Base.SubString{String}})
precompile(Tuple{typeof(Utils.lx_setlevel), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.setproperty!), Utils.State, Symbol, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Utils.increment)})
precompile(Tuple{typeof(Utils.lx_increment), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.getproperty), Utils.State, Symbol})
precompile(Tuple{typeof(Base.getproperty), Utils.Theorem, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Utils.Theorem, Symbol, Int64})
precompile(Tuple{typeof(Base.setproperty!), Utils.State, Symbol, Utils.Theorem})
precompile(Tuple{typeof(Base.convert), Type{Utils.Theorem}, Utils.Theorem})
precompile(Tuple{typeof(Utils.resetcount)})
precompile(Tuple{typeof(Utils.lx_resetcount), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, Char})
precompile(Tuple{typeof(Franklin.html_skip_hidden), Base.SubString{String}, String})
precompile(Tuple{typeof(Franklin.html_skip_hidden), String, String})
precompile(Tuple{typeof(Franklin.html_code), Base.SubString{String}, String})
precompile(Tuple{typeof(Franklin.parse_fenced_block), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.html_skip_hidden), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.html_skip_hidden), String, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.html_code), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#parse_rpath##kw")), NamedTuple{(:canonical,), Tuple{Bool}}, typeof(Franklin.parse_rpath), String})
precompile(Tuple{getfield(Franklin, Symbol("##parse_rpath#76")), Bool, Bool, typeof(Franklin.parse_rpath), String})
precompile(Tuple{getfield(Franklin, Symbol("##parse_rpath#76")), Bool, Bool, typeof(Franklin.parse_rpath), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.form_codepaths), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.should_eval), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.resolve_code_block), Base.SubString{String}})
precompile(Tuple{typeof(Markdown.htmlesc), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.string), String, Base.SubString{String}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#chop##kw")), NamedTuple{(:head, :tail), Tuple{Int64, Int64}}, typeof(Base.chop), Base.SubString{String}})
precompile(Tuple{typeof(Base.Filesystem.joinpath), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{NamedTuple{(:script_path, :script_dir, :script_name, :out_dir, :out_path, :res_path), T} where T<:Tuple}, Tuple{String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Base.all), Function, Tuple{String, String}})
precompile(Tuple{typeof(Base._all), typeof(Base.Filesystem.isfile), Tuple{String, String}, Base.Colon})
precompile(Tuple{getfield(Franklin, Symbol("##lx_output#126")), Bool, Bool, typeof(Franklin.lx_output), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.lx_textoutput), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isempty), Tuple{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.isempty), Tuple{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.isempty), Tuple{Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.all), Tuple{Bool, Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.first), Tuple{Array{String, 1}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.first), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.first), Tuple{Array{String, 1}, Int64}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Dates.DateLocale}, String})
precompile(Tuple{getfield(Dates, Symbol("##format#31")), String, typeof(Dates.format), Dates.DateTime, String})
precompile(Tuple{getfield(Dates, Symbol("#format##kw")), NamedTuple{(:locale,), Tuple{String}}, typeof(Dates.format), Dates.DateTime, String})
precompile(Tuple{Type{Dates.DatePart{Char(0x45000000)}}, Int64, Bool})
precompile(Tuple{Type{Dates.DateFormat{Symbol("Y年ud日 E"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x45000000)}}}}, Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x45000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DatePart{Char(0x75000000)}, Dates.DateTime, Dates.DateLocale})
precompile(Tuple{typeof(Dates.dayofweek), Dates.DateTime})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("Y年ud日 E"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x45000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("Y年ud日 E"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x45000000)}}}, Int64})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("Y年ud日 E"), Tuple{Dates.DatePart{Char(0x59000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x45000000)}}}})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Bool, Bool}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.findnext), typeof(Base.Unicode.isspace), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Array{Base.SubString{String}, 1}})
precompile(Tuple{Type{Franklin.HFun}, Base.SubString{String}, Base.SubString{String}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Franklin.from), Franklin.HFun})
precompile(Tuple{typeof(Base.getproperty), Franklin.HFun, Symbol})
precompile(Tuple{typeof(Franklin.to), Franklin.HFun})
precompile(Tuple{typeof(Base._array_for), Type{Base.SubString{String}}, Array{Base.RegexMatch, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, Base.SubString{String}}, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.SubString{String}, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.RegexMatch, 1}, getfield(Franklin, Symbol("#153#155"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Base.RegexMatch, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Base.RegexMatch, 1}, Array{Base.SubString{String}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Base.RegexMatch, 1}, Array{Base.SubString{String}, 1}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Base.RegexMatch, 1}, Array{Base.SubString{String}, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.RegexMatch, Base.SubString{String}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.RegexMatch, Base.SubString{String}}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.RegexMatch, Symbol})
precompile(Tuple{typeof(Base.get), getfield(Franklin, Symbol("#154#156")), OrderedCollections.LittleDict{String, String, Array{String, 1}, Array{String, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Base.RegexMatch, 1}, Array{Base.SubString{String}, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Franklin.HIf}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{Type{Franklin.HIsDef}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.from), Franklin.HIf})
precompile(Tuple{typeof(Franklin.hbalance), Franklin.HFun})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Int64, 1}, getfield(Franklin, Symbol("#142#148")){Array{Franklin.AbstractBlock, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Franklin, Symbol("#144#150")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{String, 1}, getfield(Franklin, Symbol("#144#150"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(Franklin, Symbol("#144#150"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Franklin, Symbol("#145#151")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Bool, 1}, Bool, Base.Generator{Array{String, 1}, getfield(Franklin, Symbol("#145#151"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(Franklin, Symbol("#145#151"))}})
precompile(Tuple{typeof(Base.findfirst), Function, Array{String, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Franklin, Symbol("#146#152")), Array{String, 1}, Int64})
precompile(Tuple{typeof(Franklin.to), Franklin.HIf})
precompile(Tuple{typeof(Franklin.from), Franklin.HEnd})
precompile(Tuple{typeof(Franklin.hfun_insert), Array{String, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Base.RegexMatch, 1}, Array{Union{Nothing, Base.SubString{String}}, 1}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Base.RegexMatch, 1}, Array{Union{Nothing, Base.SubString{String}}, 1}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Base.RegexMatch, 1}, Array{Union{Nothing, Base.SubString{String}}, 1}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Franklin.to), Franklin.HEnd})
precompile(Tuple{typeof(Franklin.from), Franklin.HIsDef})
precompile(Tuple{typeof(Franklin.to), Franklin.HIsDef})
precompile(Tuple{typeof(Franklin.html_div), String, String})
precompile(Tuple{typeof(Markdown.linebreak), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.html), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List})
precompile(Tuple{getfield(Markdown, Symbol("#119#121")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#119#121")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.List}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#120#122")){Array{Any, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{getfield(Markdown, Symbol("#131#132")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#131#132")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Link})
precompile(Tuple{typeof(Markdown.withtag), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.LineBreak})
precompile(Tuple{typeof(Utils.lx_initcounter), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.lx_show), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.html_code), String, String})
precompile(Tuple{typeof(Franklin.html_code), String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Utils.record_theorem_number), Base.SubString{String}})
precompile(Tuple{typeof(Utils.lx_recordTheoremNumber), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.deepcopy), Utils.Theorem})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Utils.Theorem, Base.SubString{String}})
precompile(Tuple{typeof(Utils.lx_generateLabel), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.lx_label), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.from), Franklin.HTML_SPCH})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.HTML_SPCH, Franklin.OCBlock})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.HTML_SPCH, Franklin.LxCom})
precompile(Tuple{typeof(Franklin.to), Franklin.HTML_SPCH})
precompile(Tuple{getfield(Markdown, Symbol("#13#14")){Bool, Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Char}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.SubString{String}, Nothing}, String})
precompile(Tuple{typeof(Markdown._is_link), String})
precompile(Tuple{typeof(Markdown._is_mailto), String})
precompile(Tuple{typeof(Markdown.withstream), getfield(Markdown, Symbol("#47#48")){Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Markdown.autolink), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Utils.lx_getTheoremNumber), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Utils.lx_generateTheoremName), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_block), Franklin.HTML_SPCH, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_md_math), Base.SubString{String}, Array{Franklin.LxDef, 1}, Int64})
precompile(Tuple{getfield(Franklin, Symbol("#24#25")), Int64, Char})
precompile(Tuple{typeof(Base.isequal), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Utils.ref), Base.SubString{String}})
precompile(Tuple{typeof(Utils.lx_ref), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Base.SubString{String}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Base.SubString{String}})
precompile(Tuple{typeof(Base.string), String, String, String, Base.SubString{String}, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(Franklin.lx_input), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.Unicode.lowercase), Base.SubString{String}})
precompile(Tuple{Type{NamedTuple{(:lang,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.stat), Base.SubString{String}})
precompile(Tuple{typeof(Base.to_index), Array{String, 1}, Nothing})
precompile(Tuple{getfield(Franklin, Symbol("#78#80")), String})
precompile(Tuple{typeof(Franklin.resolve_rpath), Base.SubString{String}, String})
precompile(Tuple{getfield(Franklin, Symbol("##_lx_input_code#125")), String, typeof(Franklin._lx_input_code), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#_lx_input_code##kw")), NamedTuple{(:lang,), Tuple{String}}, typeof(Franklin._lx_input_code), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.lx_output), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.lx_figalt), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#parse_rpath##kw")), NamedTuple{(:canonical, :code), Tuple{Bool, Bool}}, typeof(Franklin.parse_rpath), Base.SubString{String}})
precompile(Tuple{typeof(Base.Filesystem.joinpath), String, Base.SubString{String}, Vararg{Base.SubString{String}, N} where N})
precompile(Tuple{typeof(Franklin.html_img), String, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.is_html_entity), Int64, Char})
precompile(Tuple{typeof(Franklin._validate_language2), Base.SubString{String}})
precompile(Tuple{Type{Franklin.LxCom}, Base.SubString{String}, Base.RefArray{Franklin.LxDef, Array{Franklin.LxDef, 1}, Nothing}})
precompile(Tuple{typeof(Franklin.lx_toc), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.string), String, Int64, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{Type{Franklin.HFun}, Base.SubString{String}, Base.SubString{String}, Array{String, 1}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.MappingRF{getfield(Franklin, Symbol("#132#134")), Base.BottomRF{typeof(Base.min)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{Type{OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}, Tuple{}})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#131#133")), OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, Array{Union{Base.SubString{String}, String}, 1}, Array{Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{getfield(Franklin, Symbol("#132#134")), Base.BottomRF{typeof(Base.min)}}, Base._InitialValue, Base.ValueIterator{OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, Array{Union{Base.SubString{String}, String}, 1}, Array{Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(Franklin.hfun_toc), Array{String, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{String, Int64, Int64}})
precompile(Tuple{getfield(Franklin, Symbol("#131#133")), Base.Pair{String, Tuple{String, Int64, Int64}}})
precompile(Tuple{getfield(Franklin, Symbol("#132#134")), Tuple{String, Int64, Int64}})
precompile(Tuple{Base.BottomRF{typeof(Base.min)}, Int64, Int64})
precompile(Tuple{typeof(Franklin.html_ahref_key), String, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{Any, Tuple{DataType, Vararg{DataType, N} where N}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Pair{A, B} where B where A}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Pair{A, B} where B where A}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Pair{A, B} where B where A}, Base.Pair{Any, Tuple{DataType, Vararg{DataType, N} where N}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Pair{A, B} where B where A}, Base.Pair{Bool, Tuple{DataType}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Pair{A, B} where B where A}, Base.Pair{String, Tuple{DataType}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Pair{A, B} where B where A}, Base.Pair{Any, Tuple{Type, Vararg{DataType, N} where N}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Pair{A, B} where B where A}, Base.Pair{String, Tuple{DataType, DataType}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Pair{A, B} where B where A}, Base.Pair{Array{String, 1}, Tuple{DataType}}, String})
precompile(Tuple{getfield(Markdown, Symbol("#41#42")){Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(Markdown.image), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.underscore_bold), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.underscore_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.asterisk_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Image})
precompile(Tuple{typeof(Markdown.withtag), Nothing, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{getfield(Markdown, Symbol("#127#128")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Italic}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#127#128")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Italic}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Italic})
precompile(Tuple{getfield(Markdown, Symbol("#125#126")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}})
precompile(Tuple{typeof(Markdown.withtag), getfield(Markdown, Symbol("#125#126")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold}, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Markdown.htmlinline), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.Bold})
precompile(Tuple{typeof(Base.deepcopy), Base.Pair{String, Tuple{DataType, DataType}}})
precompile(Tuple{typeof(Base.getindex), Array{Union{Nothing, Base.SubString{String}}, 1}, Int64})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.html_ahref), String, Base.SubString{String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Tuple{DataType}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Base.Pair{Int64, Tuple{DataType}}, String})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.Token, Franklin.OCBlock})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.OCBlock, Franklin.Token})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{getfield(Franklin, Symbol("#20#21"))}, Franklin.Token, Franklin.LxCom})
precompile(Tuple{typeof(Franklin.convert_footnote_ref), Franklin.Token})
precompile(Tuple{typeof(Franklin.convert_block), Franklin.Token, Array{Franklin.LxDef, 1}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.BottomRF{typeof(Base.mul_prod)}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Franklin.refstring), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{getfield(Franklin, Symbol("#123#124")){String, Int64}, Base.BottomRF{typeof(Base.mul_prod)}}, Base._InitialValue, Base.Iterators.Enumerate{Array{String, 1}}})
precompile(Tuple{getfield(Franklin, Symbol("##form_href#122")), Base.Pair{String, String}, String, typeof(Franklin.form_href), Franklin.LxCom, String})
precompile(Tuple{typeof(Franklin.lx_citep), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(OrderedCollections.add_new!), OrderedCollections.LittleDict{String, String, Array{String, 1}, Array{String, 1}}, String, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.LittleDict{String, String, Array{String, 1}, Array{String, 1}}, Base.SubString{String}, String})
precompile(Tuple{typeof(Franklin.lx_biblabel), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.lx_eqref), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.Pair{Int64, Tuple{DataType}}, Symbol})
precompile(Tuple{typeof(Base.string), Int64})
precompile(Tuple{getfield(Franklin, Symbol("##html_ahref#6")), String, String, typeof(Franklin.html_ahref), String, Int64})
precompile(Tuple{typeof(Franklin.hfun_href), Array{String, 1}})
precompile(Tuple{typeof(Franklin.modulename), String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{typeof(Base.write), String, String})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{String}, String})
precompile(Tuple{typeof(Franklin.parse_code), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##run_code#67")), Bool, Bool, typeof(Franklin.run_code), Module, Base.SubString{String}, String})
precompile(Tuple{getfield(Franklin, Symbol("#run_code##kw")), NamedTuple{(:strip_code,), Tuple{Bool}}, typeof(Franklin.run_code), Module, Base.SubString{String}, String})
precompile(Tuple{typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.isnothing), Expr})
precompile(Tuple{getfield(Franklin, Symbol("#69#71")){Module, Array{Any, 1}, Int64}})
precompile(Tuple{typeof(Base.redirect_stdout), getfield(Franklin, Symbol("#69#71")){Module, Array{Any, 1}, Int64}, Base.IOStream})
precompile(Tuple{getfield(Franklin, Symbol("#68#70")){Module, Array{Any, 1}, Int64}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Franklin, Symbol("#68#70")){Module, Array{Any, 1}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.rpad), String, Int64})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#549")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#pipeline##kw")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#559")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.IOStream})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.IOStream})
precompile(Tuple{typeof(Base.setup_stdio), Base.IOStream, Bool})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#338")), Nothing, Int64, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#692#694")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Base.sort!), Array{Pkg.BinaryPlatforms.Platform, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Pkg.BinaryPlatforms, Symbol("#40#42"))}})
precompile(Tuple{typeof(Base.sort!), Array{Pkg.BinaryPlatforms.Platform, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Pkg.BinaryPlatforms, Symbol("#40#42"))}, Array{Pkg.BinaryPlatforms.Platform, 1}})
precompile(Tuple{typeof(Pkg.BinaryPlatforms.select_platform), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Platform})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}})
precompile(Tuple{typeof(Base.filter), typeof(HTTP.Cookies.validcookievaluebyte), Array{Char, 1}})
precompile(Tuple{typeof(Base.string), Char, String, Char})
precompile(Tuple{typeof(HTTP.Cookies.sanitizeCookieValue), String})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, String})
precompile(Tuple{typeof(HTTP.Cookies.isCookieDomainName), String})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Int64})
precompile(Tuple{typeof(HTTP.Cookies.isIP), String})
precompile(Tuple{Type{String}, HTTP.Cookies.Cookie, Bool})
precompile(Tuple{typeof(Base.string), String, Array{HTTP.Cookies.Cookie, 1}, Bool})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(LibVPX_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.check_js)})
precompile(Tuple{typeof(GR.js.jsterm_send), String, String})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.js.initjs)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#93#95"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(PlotUtils.__init__)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Function, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(Core.Compiler._typename), DataType})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#13")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:url,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:file,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#78#79")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#78#79")), String})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Base.SubString{String}, Tuple{Symbol}, NamedTuple{(:server,), Tuple{Base.SubString{String}}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_server_dir), String, Base.SubString{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("#81#86")), Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:write,), Tuple{Bool}}}, typeof(Base.open), getfield(Pkg.PlatformEngines, Symbol("#81#86")), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Plots._plots_defaults)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Plots.replaceAlias!), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(Plots, Symbol("##default#110")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.default)})
precompile(Tuple{getfield(Plots, Symbol("##_theme#114")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots._theme), Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reset,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots._initialize_backend), Plots.PyPlotBackend})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.PyPlotBackend})
precompile(Tuple{getfield(Plots, Symbol("##pyplot#221")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.pyplot)})
precompile(Tuple{typeof(Plots.pyplot)})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(PyCall.pythonenv), Base.Cmd})
precompile(Tuple{typeof(PyCall.find_libpython), String})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cstring}, String})
precompile(Tuple{typeof(Base.array_subpadding), Type{T} where T, Type{T} where T})
precompile(Tuple{Type{Base.CyclePadding{P} where P}, DataType})
precompile(Tuple{typeof(Base.rem), Int64, Int64})
precompile(Tuple{typeof(Base.padding), Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#205")){Int32, UInt8}, Type{Int32}, Type{UInt8}, Int64})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.ReinterpretArray{UInt8, 1, Int32, Array{Int32, 1}}})
precompile(Tuple{typeof(PyCall._preserveas!), Array{UInt8, 1}, Type{Base.Cwstring}, String})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Nothing, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall._pyimport), String})
precompile(Tuple{Type{PyCall.PyError}, String})
precompile(Tuple{typeof(PyCall.pyimport), String})
precompile(Tuple{typeof(PyCall.pydecref_), PyCall.PyObject})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall.pyexc_initialize)})
precompile(Tuple{typeof(PyCall._handle_error), String})
precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.hash), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.convert), Type{String}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, Nothing})
precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.PyTypeObject!), getfield(PyCall, Symbol("#129#130")){Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, PyCall.PyTypeObject, String, Int64})
precompile(Tuple{typeof(PyCall.pyjlwrap_init)})
precompile(Tuple{typeof(PyCall.pyhasproperty), PyCall.PyObject, String})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, String})
precompile(Tuple{typeof(PyCall._set_finalized)})
precompile(Tuple{typeof(PyCall.Py_SetProgramName), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(PyCall.__init__)})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Base.Timer}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Ptr{Nothing}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, Base.VersionNumber, String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#66#67")){typeof(Base.isempty)}, Array{Base.SubString{String}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.SubString{String}, 1}, Int64, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Base.SubString{String}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, typeof(VersionParsing.digits2num)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(VersionParsing.vparse), String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Bool}})
precompile(Tuple{typeof(PyCall.typetuple), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{typeof(PyCall.array_format), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pysequence_query), PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyptr_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(PyCall.pyisinstance), PyCall.PyObject, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pynothing_query), PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Exception}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ErrorException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.SystemError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{TypeError}})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.Meta.ParseError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ArgumentError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.KeyError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{LoadError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{MethodError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.EOFError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{BoundsError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DivideError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DomainError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InexactError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OutOfMemoryError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{StackOverflowError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{UndefRefError}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InterruptException}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{PyCall.PyIOError}})
precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
precompile(Tuple{typeof(PyCall.pyeval_), String, PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyDict{String, PyCall.PyObject, true}, Int64, String})
precompile(Tuple{typeof(PyCall.pyeval_), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{typeof(Base.setindex!), PyCall.PyDict{String, PyCall.PyObject, true}, PyCall.PyObject, String})
precompile(Tuple{getfield(PyCall, Symbol("#118#119")){Module}})
precompile(Tuple{typeof(Base.get!), getfield(PyCall, Symbol("#118#119")){Module}, Base.Dict{Module, PyCall.PyDict{String, PyCall.PyObject, true}}, Module})
precompile(Tuple{Type{PyCall.PyObject}, Symbol})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyPlot.__init__)})
precompile(Tuple{typeof(Base.print_to_string), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.istextmime), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(Base.Multimedia.displayable), Plots.PlotsDisplay, Base.Multimedia.MIME{Symbol("image/png")}})
precompile(Tuple{typeof(PyCall.anaconda_conda)})
precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Symbol, String}, 1}, Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(PyPlot, Symbol("#3#4")){Base.Dict{Symbol, String}}}})
precompile(Tuple{Type{Base.Dict{String, Symbol}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Symbol}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Symbol}, Symbol, String})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Symbol}, String})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.:(==)), WeakRef, Symbol})
precompile(Tuple{typeof(PyCall.pydecref_), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Bool}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall.pyexists), String})
precompile(Tuple{typeof(PyCall.pygui_works), Symbol})
precompile(Tuple{typeof(Base.haskey), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}, String})
precompile(Tuple{typeof(PyCall.pygui), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(PyCall.wx_eventloop), Float64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Timer}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Timer}, Base.Timer, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print_to_string), Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_requireversion), String, Base.VersionNumber})
precompile(Tuple{typeof(PyCall.gtk_eventloop), String, Float64})
precompile(Tuple{typeof(PyCall.Tk_eventloop), Float64})
precompile(Tuple{typeof(PyCall.fixqtpath), String})
precompile(Tuple{typeof(PyCall.qt_eventloop), PyCall.PyObject, Float64})
precompile(Tuple{typeof(PyCall.qt_eventloop), Float64})
precompile(Tuple{typeof(PyCall.pygui_start), Symbol, Float64})
precompile(Tuple{typeof(Base.haskey), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, false}, String})
precompile(Tuple{typeof(PyCall.pygui)})
precompile(Tuple{typeof(Base.:(^)), String, PyCall.PyObject})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.print_to_string), Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pystring), PyCall.PyObject})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PyCall.PyObject})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{typeof(PyPlot.find_backend), PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyAny}, String, String})
precompile(Tuple{typeof(Base.insert!), Array{Tuple{Symbol, String}, 1}, Int64, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.:(==)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pytype_mapping), PyCall.PyObject, Type{T} where T})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyTypeObject}})
precompile(Tuple{typeof(Base.isimmutable), Any})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.RefValue{Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Function, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Function})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, String, Function})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Int64, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Int64, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Int64}, 1}, Base.Pair{String, Int64}, Base.Generator{Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol, Symbol}, NamedTuple{(:vmin, :vmax), Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(PyPlot.init_colormaps)})
precompile(Tuple{typeof(Base.convert), Type{Bool}, PyCall.PyObject})
precompile(Tuple{Type{PyCall.PyObject}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
precompile(Tuple{Type{PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Function, 1}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{getfield(Plots, Symbol("#265#298"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#266#299"))})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Plots, Symbol("#267#300"))})
precompile(Tuple{getfield(Requires, Symbol("#@require")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Requires.parsepkg), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{getfield(Base, Symbol("#683#684")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#683#684")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{typeof(Base.length), Array{Base.Multimedia.AbstractDisplay, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Multimedia.AbstractDisplay}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Multimedia.AbstractDisplay, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.splice!), Array{Base.Multimedia.AbstractDisplay, 1}, Base.UnitRange{Int64}, Array{Any, 1}})
precompile(Tuple{typeof(Base.splice!), Array{Base.Multimedia.AbstractDisplay, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Multimedia.AbstractDisplay, 1}, Int64, Array{Base.Multimedia.AbstractDisplay, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{Base.Multimedia.AbstractDisplay, 1}, Array{Base.Multimedia.AbstractDisplay, 1}})
precompile(Tuple{Type{NamedTuple{(:invalid,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, String, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:invalid,), Tuple{String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:invalid,), Tuple{String}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:invalid,), Tuple{String}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}})
precompile(Tuple{typeof(Base.copy), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int64}}, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Ptr{PyCall.PyObject_struct}}}, Base.RefValue{Ptr{PyCall.PyObject_struct}}})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.print_to_string), Expr})
precompile(Tuple{typeof(Base.string), Expr})
precompile(Tuple{typeof(Base.string), String, Symbol, String})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{getfield(PyPlot, Symbol("##ioff#68")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.ioff)})
precompile(Tuple{typeof(PyPlot.ioff)})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_meta#20")), Pkg.BinaryPlatforms.Platform, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, typeof(Base.push!), Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Set{Pkg.BinaryPlatforms.Platform}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge), Bool})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##temp_cleanup_later#14")), Bool, typeof(Base.Filesystem.temp_cleanup_later), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_cmd#13")), Bool, typeof(Pkg.PlatformEngines.probe_cmd), Base.Cmd})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##probe_platform_engines!#14")), Bool, typeof(Pkg.PlatformEngines.probe_platform_engines!)})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#19")), String, Bool, typeof(Base.Filesystem.mktempdir), String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##tempname#17")), Bool, typeof(Base.Filesystem.tempname), String})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:url,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:file,), Tuple{String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.:(>=)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#cptree##kw")), NamedTuple{(:force, :follow_symlinks), Tuple{Bool, Bool}}, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{typeof(Base.Filesystem.sendfile), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cptree#11")), Bool, Bool, typeof(Base.Filesystem.cptree), String, String})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##cp#12")), Bool, Bool, typeof(Base.Filesystem.cp), String, String})
precompile(Tuple{typeof(Base.Filesystem.rename), String, String})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Base.SubString{String}, Tuple{Symbol}, NamedTuple{(:server,), Tuple{Base.SubString{String}}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_server_dir), String, Base.SubString{String}})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##get_auth_header#77")), Bool, typeof(Pkg.PlatformEngines.get_auth_header), String})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{typeof(UUIDs.uuid4)})
precompile(Tuple{typeof(Random.randstring), Int64})
precompile(Tuple{typeof(Pkg.PlatformEngines.load_telemetry_file), String})
precompile(Tuple{typeof(Pkg.PlatformEngines.get_telemetry_headers), String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download#87")), Bool, Nothing, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify#88")), Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify), String, Nothing, String})
precompile(Tuple{typeof(Base.:(>)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#96")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#101")), Nothing, Bool, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, Nothing, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_paths##kw")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.set_readonly), String})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, Nothing}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, Nothing})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}})
precompile(Tuple{typeof(Pkg.Artifacts.with_show_download_info), getfield(Pkg.Artifacts, Symbol("#43#45")){Bool, Bool, Base.SHA1}, String, Bool})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Base.foreach), getfield(OpenBLAS_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenBLAS_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Arpack_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Arpack_jll.__init__)})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.exp), Float64})
precompile(Tuple{typeof(Base.randn), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randn_unlikely), Random.MersenneTwister, Int64, Int64, Float64})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp), Random.MersenneTwister})
precompile(Tuple{typeof(Random.randexp_unlikely), Random.MersenneTwister, UInt64, Float64})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(Statistics._mean), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Statistics.mean), Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:corrected,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Int64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{getfield(Statistics, Symbol("#std##kw")), NamedTuple{(:corrected,), Tuple{Bool}}, typeof(Statistics.std), Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Type{Float64}})
precompile(Tuple{typeof(Random.rand!), Random.MersenneTwister, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.rand), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.sqrt), Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}, Float64}}})
precompile(Tuple{Type{NamedTuple{(:normalize, :label), T} where T<:Tuple}, Tuple{Symbol, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:normalize, :label), Tuple{Symbol, String}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB24}})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Int64, 0}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{typeof(Base.allocatedinline), Type{PyCall.PyMethodDef}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64, Int64, Float64}, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, String}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{T, 3} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(ColorTypes.pureintersect), Type{Any}, Type{Float64}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Color{Float64, 3}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.LCHab{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Lab{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.Lab{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.XYZ{Float64}}})
precompile(Tuple{typeof(ColorTypes.eltypes_supported), Type{ColorTypes.XYZ{T} where T<:AbstractFloat}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.AbstractRGB{Float64}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{Float64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.MappingRF{getfield(PlotUtils, Symbol("#40#43")), Base.BottomRF{typeof(Base.max)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{(1,)}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s35#2")), Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("#3#4")), Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N} where N where T}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:normalize, :label, :seriestype), Tuple{Symbol, String, Symbol}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend)})
precompile(Tuple{typeof(Plots.backend), Symbol})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots._pick_default_backend)})
precompile(Tuple{Type{Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{getfield(Plots, Symbol("##plot#120")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:normalize, :label, :seriestype), Tuple{Symbol, String, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#histogram##kw")), NamedTuple{(:normalize, :label), Tuple{Symbol, String}}, typeof(Plots.histogram), Array{Float64, 1}})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.PyPlotBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Dict{Symbol, Any}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{RecipesBase.RecipeData, 1}, Int64, Array{RecipesBase.RecipeData, 1}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{RecipesPipeline.GroupBy, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline._recipedata_vector), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline._process_userrecipes!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.println), String, Array{Any, 1}})
precompile(Tuple{typeof(Plots.xlims), Int64})
precompile(Tuple{typeof(Plots.ylims), Int64})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:lens}}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, RecipesPipeline.DefaultsDict, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Plots.fg_color), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.color_or_nothing!), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.layout_args), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots._plot_setup), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots.series_idx), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{RecipesBase.AbstractLayout, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Plots.link_subplots), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Plots, Symbol("#142#143")){Symbol}}})
precompile(Tuple{typeof(Plots.link_axes!), Array{RecipesBase.AbstractLayout, 1}, Symbol})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#144#145")), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.getindex), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Plots.Axis})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Axis, Plots.Axis})
precompile(Tuple{typeof(Base.throw_boundserror), Array{RecipesBase.AbstractLayout, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{RecipesBase.AbstractLayout, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Plots.link_axes!), Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots.is_axis_attr), Symbol})
precompile(Tuple{typeof(Plots._subplot_setup), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.slice_arg!), RecipesPipeline.DefaultsDict, RecipesPipeline.DefaultsDict, Symbol, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_colors), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Array{Plots.Subplot{Plots.PyPlotBackend}, 1}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#91")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("##Axis#90")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.Axis}, Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.get_axis), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis_colors), Plots.Axis})
precompile(Tuple{typeof(Plots._update_axis_links), Plots.Plot{Plots.PyPlotBackend}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict, Int64, Bool})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(Plots._override_seriestype_check), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Plots._prepare_subplot), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Float64})
precompile(Tuple{typeof(Plots.isvertical), RecipesPipeline.DefaultsDict})
precompile(Tuple{getfield(Plots, Symbol("#102#105")), Plots.Series})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, getfield(Plots, Symbol("#102#105"))}, Base.Colon})
precompile(Tuple{typeof(RecipesPipeline.is3d), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Subplot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots._expand_subplot_extrema), Plots.Subplot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(Plots._series_index), RecipesPipeline.DefaultsDict, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.autopick_ignore_none_auto), Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.aliasesAndAutopick), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Symbol, Symbol}, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(Plots.has_black_border_for_default), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#18")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PlotUtils.cgrad), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Plots.ensure_gradient!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Plots._replace_linewidth), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots._update_series_attributes!), RecipesPipeline.DefaultsDict, Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Set{Symbol}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Nothing}, Int64})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.Set{Symbol}})
precompile(Tuple{typeof(Plots.parse_axis_kw), Symbol})
precompile(Tuple{typeof(Plots.default), Symbol})
precompile(Tuple{typeof(Plots.warn_on_unsupported_args), Plots.PyPlotBackend, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.warn_on_unsupported), Plots.PyPlotBackend, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots._add_the_series), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.py_init_subplot), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{typeof(Plots.fix_xy_lengths!), Plots.Plot{Plots.PyPlotBackend}, Plots.Series})
precompile(Tuple{typeof(Plots.straightline_data), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.ispolar), Plots.Series})
precompile(Tuple{typeof(Plots.iscontour), Plots.Series})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#45#46")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.colorbar_style), Plots.Series})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Plots.Shape, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots.series_annotations_shapes!), Plots.Series, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#47#49")){Plots.Series}, Symbol})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#47#49")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#48#50")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.has_attribute_segments), Plots.Series})
precompile(Tuple{typeof(Plots.iter_segments), Plots.Series})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.py_linestyle), Symbol, Symbol})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#486#492")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.get_markerstrokecolor), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_markerstrokealpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_clims), Plots.Series})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Tuple{Float64, Float64, Float64, Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{Float64, 1}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Ptr{Nothing}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(*)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Ptr{PyCall.PyObject_struct}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
precompile(Tuple{typeof(PyCall.weakref_callback), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyMethodDef}, String, Ptr{Nothing}, UInt16, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 2}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Float64, 2}})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{typeof(PyCall.npyinitialize)})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Float64, 2}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Float64, 2}, Int64, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Float64, 2}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 2}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Plots.py_marker), Plots.Shape})
precompile(Tuple{typeof(Plots.py_marker), Symbol})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Int64})
precompile(Tuple{typeof(Base._linspace1), Type{Float64}, Float64, Float64, Int64})
precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.splitprec), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int128})
precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int128, Int128}, Tuple{Int128, Int128}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("#6#7")){PlotUtils.CategoricalColorGradient}, Float64})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(PlotUtils, Symbol("#6#7")){PlotUtils.CategoricalColorGradient}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.get), PlotUtils.CategoricalColorGradient, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(PyCall, Symbol("#108#109")), Base.Pair{Symbol, Any}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :alpha), Tuple{Tuple{Int64, Int64, Int64, Float64}, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:color, :alpha), Tuple{Tuple{Int64, Int64, Int64, Float64}, Float64}}}})
precompile(Tuple{typeof(Plots.py_colormap), PlotUtils.CategoricalColorGradient})
precompile(Tuple{typeof(Plots.py_fillcolormap), Plots.Series})
precompile(Tuple{getfield(Base, Symbol("##parse#346")), Int64, typeof(Base.parse), Type{UInt32}, Base.SubString{String}})
precompile(Tuple{typeof(Colors.chop1), Base.SubString{String}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Bool, Bool})
precompile(Tuple{typeof(FixedPointNumbers.throw_converterror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Colors.parse_rgb), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_hsl_sl), Base.SubString{String}})
precompile(Tuple{typeof(Colors.parse_alpha_num), Base.SubString{String}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror_), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32}})
precompile(Tuple{typeof(ColorTypes.throw_colorerror), Type{FixedPointNumbers.Normed{UInt8, 8}}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32})
precompile(Tuple{Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, FixedPointNumbers.Normed{UInt8, 8}, Float32})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Tuple{Int64, Int64, Int64}}, String})
precompile(Tuple{getfield(Base.Unicode, Symbol("##titlecase#2")), getfield(Base, Symbol("#66#67")){typeof(Base.Unicode.iscased)}, Bool, typeof(Base.Unicode.titlecase), String})
precompile(Tuple{typeof(Colors._parse_colorant), String})
precompile(Tuple{typeof(Colors._parse_colorant), Type{ColorTypes.RGBA{Float64}}, Type{ColorTypes.ColorAlpha{ColorTypes.RGB{Float64}, Float64, 4}}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{#s12, 1} where #s12<:(ColorTypes.Colorant{T, N} where N where T))}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.Lab{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.RGB{Float64}}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(PlotUtils.adjust_lch), ColorTypes.RGBA{Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.RGBA{Float64}, 1}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Int64, Array{ColorTypes.RGB{Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Math.sind), Float64})
precompile(Tuple{typeof(Base.Math.cosd), Float64})
precompile(Tuple{typeof(Colors._colordiff), ColorTypes.Lab{Float64}, ColorTypes.Lab{Float64}, Colors.DE_2000})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#16")), Bool, typeof(Base.identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##generate_colorscheme#1")), Array{ColorTypes.RGBA{Float64}, 1}, Float64, Int64, Int64, typeof(PlotUtils.generate_colorscheme), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.generate_colorscheme), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.LCHab{T} where T<:AbstractFloat}, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(PlotUtils.lightness_from_background), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(PlotUtils.generate_colorscheme), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(PlotUtils.generate_colorscheme)})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#18")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, PlotUtils.ContinuousColorGradient, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.reverse), Array{ColorTypes.RGBA{Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Math.clamp), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Int64, Int64}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Dict{Float64, Nothing}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, Nothing}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Float64, Nothing}, Nothing, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, Nothing}, Float64})
precompile(Tuple{typeof(Base.unique), Array{Float64, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(PlotUtils, Symbol("#12#13")){Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(PlotUtils, Symbol("#12#13")){Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(PlotUtils, Symbol("#12#13")){Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#85#86")){getfield(PlotUtils, Symbol("#12#13")){Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64, Float64}}}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(ColorSchemes.remap), Array{Float64, 1}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.Math.clamp), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Float64, Float64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(-)), Tuple{Int64, Int64}}}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(ColorSchemes.remap), Array{Float64, 1}, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Base.Rounding.RoundingMode{:Down}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.min), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Colors._weighted_color_mean), Float64, ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Colors.weighted_color_mean), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Int64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Extruded{Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.get), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(PlotUtils.prepare_continuous_cgrad_colors), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(PlotUtils, Symbol("##cgrad#16")), Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.py_colormap), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Series, Int64})
precompile(Tuple{typeof(Base.trues), Tuple{}})
precompile(Tuple{typeof(Base.iterate), Plots.EachAnn, Int64})
precompile(Tuple{typeof(Plots.py_linecolormap), Plots.Series})
precompile(Tuple{typeof(Plots.shape_data), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.py_add_series), Plots.Plot{Plots.PyPlotBackend}, Plots.Series})
precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, String})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Plots.hascolorbar), Tuple{Base.Broadcast.Extruded{Array{Plots.Series, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Float64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Float64, 1}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Float64, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Float64, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}}, Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:label,), Tuple{String}}}})
precompile(Tuple{typeof(Plots.py_thickness_scale), Plots.Plot{Plots.PyPlotBackend}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Plots.py_thickness_scale), Plots.Plot{Plots.PyPlotBackend}, Float64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:which,), Tuple{String}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.hasproperty), PyPlot.LazyPyModule, Symbol})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#496#497")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(PyCall.array2py), Array{Any, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.to_index), Array{Plots.Series, 1}, Nothing})
precompile(Tuple{typeof(Plots._before_layout_calcs), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Plots.recompute_lengths), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.GridLayout})
precompile(Tuple{typeof(Plots.update_inset_bboxes!), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{getfield(PyPlot, Symbol("##draw#40")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.draw)})
precompile(Tuple{typeof(Plots._update_plot_object), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.isijulia)})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.titlefont), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{Type{Measures.Length{U, T} where T where U}, Symbol, Float64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.rat), Float64})
precompile(Tuple{typeof(Base.lcm_unchecked), Int64, Int64})
precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
precompile(Tuple{Base.Colon, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.Millisecond, 1}, Tuple{Dates.Day, Dates.Hour, Dates.Minute, Dates.Second, Dates.Millisecond, Dates.Millisecond, Dates.Millisecond}})
precompile(Tuple{typeof(Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.:(+)), Dates.Date, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Month})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Year})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Int64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Down}, Int64, Int64})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{getfield(PlotUtils, Symbol("#40#43")), Base.BottomRF{typeof(Base.max)}}, Base._InitialValue, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#41#45")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#41#45")){Int64}}})
precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#42#46")){Int64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#42#46")){Int64}}})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Int64, Int64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{Type{Dates.DateTime}, Float64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#38#39"))}, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_ticks#48")), Bool, Nothing, Nothing, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{getfield(PlotUtils, Symbol("##optimize_ticks#48")), Bool, Int64, Int64, Symbol, Nothing, Nothing, Nothing, Nothing, Bool, Nothing, typeof(PlotUtils.optimize_ticks), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.tickfont), Plots.Axis})
precompile(Tuple{typeof(Base.isless), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Plots.guidefont), Plots.Axis})
precompile(Tuple{typeof(Plots.gr_set_xticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_yticks_font), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.prepare_output), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots._display), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.is_default_attribute), Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base._replace!), getfield(RecipesPipeline, Symbol("#37#38")), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(RecipesPipeline._prepare_series_data), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_markershape), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.make_fillrange_from_ribbon), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._preprocess_userrecipe), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.warn_on_unsupported_scales), Plots.PyPlotBackend, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_errorbar_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._add_smooth_kw), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.PyPlotBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram}}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_expr_fallback), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Symbol, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_enclosed_list), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, String, String, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_generator), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, Char, Int64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.show_block), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}, Expr, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PyPlotBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PyPlotBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{getfield(PyPlot, Symbol("##figure#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(PyPlot.figure)})
precompile(Tuple{typeof(PyPlot.gcf)})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#482#483")){Plots.Plot{Plots.PyPlotBackend}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#482#483")){Plots.Plot{Plots.PyPlotBackend}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64, Int64}, getfield(Plots, Symbol("#482#483")){Plots.Plot{Plots.PyPlotBackend}}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Int64, Int64}, getfield(Plots, Symbol("#482#483")){Plots.Plot{Plots.PyPlotBackend}}}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Tuple{Int64, Int64}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Tuple{Int64, Int64}, getfield(Plots, Symbol("#482#483")){Plots.Plot{Plots.PyPlotBackend}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Tuple{Int64, Int64}, getfield(Plots, Symbol("#482#483")){Plots.Plot{Plots.PyPlotBackend}}}, Int64})
precompile(Tuple{typeof(Base.map), typeof(Plots.px2inch), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, isdict} where isdict}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall._pyjlwrap_call), Function, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyAny}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.isvatuple), DataType})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(PyPlot.figure)})
precompile(Tuple{typeof(Base.convert), Type{PyPlot.Figure}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyreturn), PyPlot.Figure})
precompile(Tuple{typeof(Plots.compute_gridsize), Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#137")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.PyPlotBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_axis), Plots.Axis, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.PyPlotBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("##palette#21")), Bool, Nothing, typeof(PlotUtils.palette), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Colors.pow12_5), Float64})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.XYZ{Float64}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Colors.cnvt), Type{ColorTypes.Lab{Float64}}, ColorTypes.XYZ{Float64}, ColorTypes.XYZ{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Math.cbrt), Float64})
precompile(Tuple{typeof(Base.atan), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.Math.sincos_domain_error), Float64})
precompile(Tuple{typeof(Base.Math.paynehanek), Float64})
precompile(Tuple{typeof(Base.Math.sincos), Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.link_axes!), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.slice_arg!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}, Symbol, Int64, Bool})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, Int64})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.PyPlotBackend, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:histogram}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesBase.RecipeData, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Plots.replaceAlias!), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Plots.replaceAliases!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, Symbol}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PyPlotBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}, Base.HasLength})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}})
precompile(Tuple{typeof(Plots.wraptuple), Nothing})
precompile(Tuple{typeof(Base.:(==)), Nothing, Bool})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Base.getindex), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#123")), Any, Any, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#124")), Any, Any, Any})
precompile(Tuple{typeof(Base.map), typeof(Base.eltype), Core.SimpleVector})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:barhist}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Symbol, Nothing}})
precompile(Tuple{typeof(Plots._hist_edges), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##_make_hist#184")), Symbol, Nothing, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Symbol, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter!), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Statistics._mean), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce_impl), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Array{Float64, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), getfield(Statistics, Symbol("#8#9")){Float64}, typeof(Base.:(+)), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#_iqr#173")), Array{Float64, 1}})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#handle_message##kw")), NamedTuple{(:once,), Tuple{Bool}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.NullLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:once,), Tuple{Bool}}}, typeof(Base.CoreLogging.handle_message), Base.CoreLogging.SimpleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{getfield(DelimitedFiles, Symbol("##writedlm#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DelimitedFiles.writedlm), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool, Char})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Bool})
precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:once,), Tuple{Bool}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Plots.wand_edges), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#_cl#172")){Int64}, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##_auto_binning_nbins#171")), Symbol, typeof(Plots._auto_binning_nbins), Tuple{Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base._extrema_itr), typeof(Base.identity), Array{Float64, 1}})
precompile(Tuple{typeof(Base.nbitslen), Float64, Int64})
precompile(Tuple{typeof(Base.floatrange), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.exp10), Float64})
precompile(Tuple{typeof(StatsBase.histrange), Float64, Float64, Int64, Symbol})
precompile(Tuple{typeof(Plots._hist_edge), Tuple{Array{Float64, 1}}, Int64, Symbol})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#177#178")){Tuple{Array{Float64, 1}}, Symbol}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Statistics._quantilesort!), Array{Float64, 1}, Bool, Float64, Float64})
precompile(Tuple{getfield(Statistics, Symbol("##quantile!#52")), Bool, typeof(Statistics.quantile!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.Sort.searchsortedfirst), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.Sort.searchsortedlast), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.append!), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Tuple{Array{Float64, 1}}})
precompile(Tuple{getfield(StatsBase, Symbol("#fit##kw")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.float), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(StatsBase, Symbol("##s188#148")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Symbol, Expr, Vararg{Expr, N} where N})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr, Vararg{Expr, N} where N})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s189#146")), Any, Any, Any, Any})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{DataType, Base.BottomRF{typeof(Base.add_sum)}}, Base._InitialValue, Array{Float64, 1}})
precompile(Tuple{getfield(StatsBase, Symbol("##normalize!#147")), Symbol, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(LinearAlgebra, Symbol("#normalize!##kw")), NamedTuple{(:mode,), Tuple{Symbol}}, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.add_sum), Float64})
precompile(Tuple{Base.BottomRF{typeof(Base.add_sum)}, Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots._scale_adjusted_values), Type{Float64}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots._binbarlike_baseline), Float64, Symbol})
precompile(Tuple{typeof(Plots._preprocess_binlike), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots._bin_centers), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:barbins}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, Type{Float64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._preprocess_barlike), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:bar}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#163#166")){Plots.Axis}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#163#166")){Plots.Axis}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#163#166")){Plots.Axis}}})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{Type{Base.IteratorSize}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Float64})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Float64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, String})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{getfield(PlotUtils, Symbol("##palette#21")), Bool, Nothing, typeof(PlotUtils.palette), PlotUtils.ColorPalette})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Type{T} where T})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Type{T} where T})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Base.eltype), Nothing})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.PyPlotBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.lastindex), PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.ismissing), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.in), Base.Pair{Any, Any}, Base.Dict{Any, Any}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.ismissing), Symbol})
precompile(Tuple{typeof(Base.ismissing), Nothing})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{Type{Distributions.Normal{T} where T<:Real}, Float64, Float64})
precompile(Tuple{getfield(LaTeXStrings, Symbol("#@L_str")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(LaTeXStrings.latexstring), String})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##plot!#125")), Base.Iterators.Pairs{Symbol, LaTeXStrings.LaTeXString, Tuple{Symbol}, NamedTuple{(:label,), Tuple{LaTeXStrings.LaTeXString}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PyPlotBackend}, Function})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:label,), Tuple{LaTeXStrings.LaTeXString}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PyPlotBackend}, Function})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{RecipesPipeline.GroupBy, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}})
precompile(Tuple{typeof(RecipesPipeline._recipedata_vector), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}})
precompile(Tuple{typeof(RecipesPipeline._process_userrecipes!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))})
precompile(Tuple{typeof(RecipesPipeline.get_axis_limits), Plots.Plot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Int64, Int64, Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.similar), Array{Float64, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2")), Float64})
precompile(Tuple{typeof(PlotUtils.tryrange), getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2")), Array{Float64, 1}})
precompile(Tuple{typeof(Distributions.pdf), Distributions.Normal{Float64}, Float64})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Int64, Int64, Float64, Int64, Float64}})
precompile(Tuple{typeof(Base.filter), getfield(RecipesPipeline, Symbol("#62#63")){Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Function})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesBase.RecipeData, Symbol, Function})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Function})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#64#65")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Function, Float64, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#64#65")){Base.Dict{Symbol, Any}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#64#65")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(RecipesPipeline._scaled_adapted_grid), Function, Symbol, Symbol, Float64, Float64})
precompile(Tuple{typeof(PlotUtils.adapted_grid), Function, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Float64})
precompile(Tuple{typeof(Base._linspace), Float64, Float64, Int64})
precompile(Tuple{typeof(Base._range), Float64, Nothing, Float64, Int64})
precompile(Tuple{typeof(Random.make_seed), Int64})
precompile(Tuple{Type{Random.MersenneTwister}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
precompile(Tuple{getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Float64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#26")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#64#65")){getfield(Base, Symbol("#64#65")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(FD_SANDBOX_626613642289601706, Symbol("#1#2"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isfinite), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesBase.RecipeData, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.cmp), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.:(==)), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.in), LaTeXStrings.LaTeXString, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, LaTeXStrings.LaTeXString, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, LaTeXStrings.LaTeXString})
precompile(Tuple{Type{NamedTuple{(:xlim,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._expand_seriestype_array), Base.Dict{Symbol, Any}, Tuple{RecipesPipeline.GroupBy}})
precompile(Tuple{typeof(RecipesPipeline._recipedata_vector), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline._process_userrecipes!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PyPlotBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#125")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:xlim,), Tuple{Array{Int64, 1}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:xlim,), Tuple{Array{Int64, 1}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Int64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:lims,), Tuple{Array{Int64, 1}}}})
precompile(Tuple{getfield(Plots, Symbol("##attr!#91")), Base.Iterators.Pairs{Symbol, Array{Int64, 1}, Tuple{Symbol}, NamedTuple{(:lims,), Tuple{Array{Int64, 1}}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:lims,), Tuple{Array{Int64, 1}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{getfield(Franklin, Symbol("#@OUTPUT")), LineNumberNode, Module})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Plots.savefig), Plots.Plot{Plots.PyPlotBackend}, String})
precompile(Tuple{typeof(Plots.addExtension), String, String})
precompile(Tuple{typeof(Plots._show), Base.IOStream, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Plots.Plot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.svg), Plots.Plot{Plots.PyPlotBackend}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, String}, Base.SubString{String}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64, Float64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64, Float64}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Bool, String})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Bool}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Bool}, 1}, Base.Pair{String, Bool}, Base.Generator{Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:forward,), Tuple{Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64, Float64}, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:forward,), Tuple{Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:forward,), Tuple{Bool}}, PyCall.PyObject, Float64, Float64})
precompile(Tuple{Type{PyCall.PyObject}, Bool})
precompile(Tuple{typeof(Base.getproperty), PyPlot.Figure, Symbol})
precompile(Tuple{typeof(Plots.py_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Tuple{Float64, Float64, Float64, Float64}}, Int64, Ptr{Nothing}})
precompile(Tuple{PyCall.PyObject, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{PyCall.PyObject, Int64})
precompile(Tuple{typeof(Base.getproperty), PyCall.PyObject, Symbol})
precompile(Tuple{PyCall.PyObject, Int64, Vararg{Int64, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Int64, Int64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Nothing, Symbol}})
precompile(Tuple{Type{NamedTuple{(:label, :projection), T} where T<:Tuple}, Tuple{String, Nothing}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Nothing}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Array{Int64, 1}, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyembed), PyCall.PyObject, Array{Int64, 1}})
precompile(Tuple{typeof(PyCall.NpyArray), Array{Int64, 1}, Bool})
precompile(Tuple{typeof(PyCall.array2py), Array{Int64, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{Type{PyCall.PyObject}, Array{Int64, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Int64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Int64, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{String, String}}, Base.Pair{String, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Nothing}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Nothing}, Base.Generator{Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{String, Nothing}}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{String, Nothing}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Nothing}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Int64, 1}}, Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:label, :projection), Tuple{String, Nothing}}, PyCall.PyObject, Array{Int64, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}, Base.HasLength})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, _A} where _A, 1}, Int64, Array{Base.Pair{String, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, String}, 1}, Int64, Array{Base.Pair{String, String}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Union{Nothing, String}, Tuple{Symbol, Symbol}, NamedTuple{(:label, :projection), Tuple{String, Nothing}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, _A} where _A, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Nothing, String})
precompile(Tuple{typeof(Base.getproperty), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.default_should_widen), Plots.Axis})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.PyPlotBackend}, Symbol, Bool, Bool})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.PyPlotBackend}, Symbol})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Plots.is_2tuple), Array{Int64, 1}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int64, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Int64})
precompile(Tuple{typeof(Plots.widen), Int64, Int64, Symbol})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.is_2tuple), Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Plots.Series, 1}, typeof(Plots.hascolorbar)}, Base.Colon})
precompile(Tuple{typeof(Plots.hascolorbar), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.PyPlotBackend}, Plots.Series})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Float64}, Vararg{Base.Pair{Symbol, Float64}, N} where N})
precompile(Tuple{typeof(Plots.isscalar), Int64})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{getfield(Plots, Symbol("#7#8")){Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#66#67")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#81#82")){Float64, Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{PyCall.PyObject, Array{Float64, 2}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Nothing, Int64})
precompile(Tuple{typeof(Plots.py_color), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), T} where T<:Tuple}, Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}, PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :edgecolor, :facecolor, :linewidth, :linestyle, :fill), Tuple{String, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String, Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Float64, Float64, Float64, Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Tuple{Float64, Float64, Float64, Float64}, String})
precompile(Tuple{PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.maximum), Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#484#490")){Base.UnitRange{Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.single_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), T} where T<:Tuple}, Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}})
precompile(Tuple{getfield(Plots, Symbol("#484#490")){Base.UnitRange{Int64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#484#490")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#484#490")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}, PyCall.PyObject, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, LaTeXStrings.LaTeXString}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, LaTeXStrings.LaTeXString}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, LaTeXStrings.LaTeXString}, 1}, Base.Pair{String, LaTeXStrings.LaTeXString}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, _A} where _A, 1}, Int64, Array{Base.Pair{String, LaTeXStrings.LaTeXString}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, LaTeXStrings.LaTeXString}, 1}, Base.Pair{String, Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :zorder, :color, :linewidth, :linestyle, :solid_capstyle, :drawstyle), Tuple{LaTeXStrings.LaTeXString, Int64, Tuple{Float64, Float64, Float64, Float64}, Int64, String, String, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.print_to_string), LaTeXStrings.LaTeXString})
precompile(Tuple{Type{PyCall.PyObject}, LaTeXStrings.LaTeXString})
precompile(Tuple{typeof(Base.convert), Type{Array{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.pyarray_dims), PyCall.PyObject, Bool})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, PyCall.PyObject})
precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(PyCall.py2array), Type{T} where T, Array{Any, 1}, PyCall.PyObject, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Array{Any, 1}})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{PyCall.PyObject}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{PyCall.PyObject, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{PyCall.PyObject, 1}, PyCall.PyObject, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{PyCall.PyObject, 1}, Int64})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is3d), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.supported_scales)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Irrational{:ℯ}, Symbol})
precompile(Tuple{typeof(Base.min), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(NaNMath.min), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Plots.py_compute_axis_minval), Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.py_set_scale), PyCall.PyObject, Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.supported_scales), Plots.PyPlotBackend})
precompile(Tuple{Type{Symbol}, String, Vararg{Any, N} where N})
precompile(Tuple{PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.py_set_lims), PyCall.PyObject, Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{PyCall.PyObject, Float64, Vararg{Float64, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64, Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#36#37")){PyCall.PyObject}}, Int64})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{Float64, Float64}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{Float64, Float64}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.tuptype), DataType, Bool, Int64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, PyCall.PyObject})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis, Nothing})
precompile(Tuple{typeof(Plots.get_ticks), Plots.Subplot{Plots.PyPlotBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Float64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#41#45")){Float64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#41#45")){Float64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#42#46")){Float64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#42#46")){Float64}}})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{getfield(PlotUtils, Symbol("#optimize_ticks##kw")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.BottomRF{typeof(Base.:(|))}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{getfield(Base, Symbol("##any#592")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Showoff.concrete_minimum), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.concrete_maximum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base.oftype), UInt32, Int64})
precompile(Tuple{typeof(Base.Grisu.normalizedbound), Float32})
precompile(Tuple{typeof(Base.Grisu.fastshortest), Float32, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.init3!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init1!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.init2!), UInt32, Int32, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.initialscaledstartvalues!), UInt32, Int32, Bool, Int64, Bool, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum, Base.Grisu.Bignums.Bignum})
precompile(Tuple{typeof(Base.Grisu.bignumdtoa), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float32, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.fastprecision), Float32, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float32, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Showoff.plain_precision_heuristic), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.format_fixed), Float64, Int64})
precompile(Tuple{getfield(Showoff, Symbol("#1#2")), Float64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}})
precompile(Tuple{typeof(Showoff.format_fixed_scientific), Float64, Int64, Bool})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, typeof(Base.string)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(PyCall.array2py), Array{String, 1}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{String, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Plots.py_set_ticks), PyCall.PyObject, Tuple{Array{Float64, 1}, Array{String, 1}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:direction, :width), T} where T<:Tuple}, Tuple{String, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Float64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:direction, :width), Tuple{String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:direction, :width), Tuple{String, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:direction, :width), Tuple{String, Float64}}, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:direction, :width), Tuple{String, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:direction, :width), Tuple{String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:direction, :width), Tuple{String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:direction, :width), Tuple{String, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Float64, String})
precompile(Tuple{Type{PyCall.PyObject}, Float64})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Float64}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.iterate), Array{PyCall.PyObject, 1}, Int64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Type{NamedTuple{(:color, :linestyle, :linewidth, :alpha), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Bool}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Bool}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}, PyCall.PyObject, Bool})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, _A} where _A, 1}, Int64, Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linestyle, :linewidth, :alpha), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Float64, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.:(>)), Bool, Int64})
precompile(Tuple{typeof(Plots.py_set_axis_colors), Plots.Subplot{Plots.PyPlotBackend}, PyCall.PyObject, Plots.Axis})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Any, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Any, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}, Int64})
precompile(Tuple{Type{NamedTuple{(:axis, :which, :colors, :labelcolor), T} where T<:Tuple}, Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, String}, 1}, Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:axis, :which, :colors, :labelcolor), Tuple{String, String, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Plots.get_aspect_ratio), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Plots.should_add_to_legend), Plots.Series})
precompile(Tuple{typeof(Plots.get_markeralpha), Plots.Series, Int64})
precompile(Tuple{typeof(Plots.py_add_legend), Plots.Plot{Plots.PyPlotBackend}, Plots.Subplot{Plots.PyPlotBackend}, PyCall.PyObject})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Math.clamp), Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, Int64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:edgecolor, :facecolor, :linewidth, :linestyle), Tuple{Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Int64, String}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.:(!=)), LaTeXStrings.LaTeXString, String})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Float64, Float64, Int64})
precompile(Tuple{typeof(Plots.get_markercolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}, PyCall.PyObject, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, Float64}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:color, :linewidth, :linestyle, :marker, :markersize, :markeredgecolor, :markerfacecolor, :markeredgewidth), Tuple{Tuple{Float64, Float64, Float64, Float64}, Float64, String, String, Float64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(ColorTypes.alpha), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), T} where T<:Tuple}, Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}, Array{Any, 1}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}, Array{Any, 1}}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Array{Any, 1}, Array{Any, 1}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}, PyCall.PyObject, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:loc, :bbox_to_anchor, :scatterpoints, :fontsize, :facecolor, :edgecolor, :framealpha, :fancybox), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, Int64, Int64, Tuple{Float64, Float64, Float64, Float64}, Tuple{Float64, Float64, Float64, Float64}, Float64, Bool}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{Type{PyCall.PyObject}, PyCall.PyObject})
precompile(Tuple{Type{NamedTuple{(:color, :family, :fontsize), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}, PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, 1}, Base.Pair{String, Tuple{Float64, Float64, Float64, Float64}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :family, :fontsize), Tuple{Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Nothing}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Nothing, 1}, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{Any, 1}, typeof(Base.identity)}, Int64})
precompile(Tuple{Type{PyCall.PyAny}, PyCall.PyObject})
precompile(Tuple{typeof(Plots.py_renderer), PyPlot.Figure})
precompile(Tuple{typeof(Plots.py_drawfig), PyPlot.Figure})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.GridLayout})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Plots.py_extents), PyCall.PyObject})
precompile(Tuple{typeof(Plots.py_bbox), PyCall.PyObject})
precompile(Tuple{typeof(Plots.py_extents), PyPlot.Figure})
precompile(Tuple{Type{PyCall.PyBuffer}, PyCall.PyObject, Int32})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, String})
precompile(Tuple{Type{PyCall.PyArray_Info{T, N} where N where T}, PyCall.PyObject})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, N} where N}, PyCall.PyObject})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#9#10")){PyCall.PyBuffer}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, getfield(PyCall, Symbol("#9#10")){PyCall.PyBuffer}}, Int64})
precompile(Tuple{Type{PyCall.PyArray_Info{Float64, 2}}, Bool, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Ptr{Nothing}, Bool, PyCall.PyBuffer})
precompile(Tuple{typeof(PyCall.aligned), PyCall.PyArray_Info{Float64, 2}})
precompile(Tuple{Type{PyCall.PyArray{Float64, 2}}, PyCall.PyObject, PyCall.PyArray_Info{Float64, 2}})
precompile(Tuple{typeof(Base.copy), PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(Base._unaliascopy), PyCall.PyArray{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.unaliascopy), PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 2}, PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), PyCall.PyArray{Float64, 2}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(PyCall.pyocopy), PyCall.PyArray{Float64, 2}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.py_bbox_ticks), PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.py_bbox_axislabel), PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.py_bbox_axis), PyCall.PyObject, String})
precompile(Tuple{typeof(Plots.py_bbox), Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.:(+)), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.py_bbox_title), PyCall.PyObject})
precompile(Tuple{typeof(Plots.py_bbox_legend), PyCall.PyObject})
precompile(Tuple{typeof(Plots.ispositive), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.right), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bottom), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float64, Array{Measures.Length{:mm, Float64}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Measures.Length{:mm, Float64}, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.similar), Array{Measures.Length{:mm, Float64}, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Float64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Measures.Length{:mm, Float64}, 1}}})
precompile(Tuple{typeof(Base.copyto!), Array{Measures.Length{:mm, Float64}, 1}, Int64, Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.PyPlotBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{Measures.Length{:mm, Float64}, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{getfield(Base, Symbol("#maximum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}, Base.OneTo{Int64}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#189")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}}, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._foldl_impl), Base.BottomRF{typeof(Base.min)}, Base._InitialValue, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.fill!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.check_reducedims), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Measures.Length{:mm, Float64}, 2}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Array{Measures.Length{:mm, Float64}, 2}, Type})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Measures.Length{:mm, Float64}, 2}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.add_sum), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.PyPlotBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.PyPlotBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.update_child_bboxes!), Plots.Subplot{Plots.PyPlotBackend}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots.bbox_to_pcts), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Bool})
precompile(Tuple{typeof(Plots.bbox_to_pcts), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.left), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Measures.width), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.height), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{Float64, Float64, Float64, Float64}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{Float64, Float64, Float64, Float64}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Float64, Float64, Float64, Float64}}, PyCall.PyObject})
precompile(Tuple{Type{NamedTuple{(:format, :facecolor, :edgecolor, :dpi), T} where T<:Tuple}, Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}})
precompile(Tuple{Type{Core.Compiler.Signature}, PyCall.PyObject, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.IOStream, Ptr{PyCall.PyObject_struct}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Base.IOStream})
precompile(Tuple{Type{PyCall.PyObject}, Base.IOStream})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Base.IOStream}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Base.IOStream}, Int64, PyCall.PyObject})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Base.IOStream}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}})
precompile(Tuple{getfield(Core, Symbol("#Any##kw")), NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}, PyCall.PyObject, Base.IOStream})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _A} where _A, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:format, :facecolor, :edgecolor, :dpi), Tuple{String, Tuple{Float64, Float64, Float64, Float64}, String, Int64}}}, getfield(PyCall, Symbol("#108#109"))}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Symbol, Function}, 1}, Tuple{Tuple{Symbol, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, Tuple{Symbol, getfield(PyCall, Symbol("##close#254#80"))}, Tuple{Symbol, getfield(PyCall, Symbol("##fileno#257#83"))}, Tuple{Symbol, getfield(PyCall, Symbol("##flush#258#84"))}, Tuple{Symbol, getfield(PyCall, Symbol("##isatty#259#85"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readable#260#86"))}, Tuple{Symbol, getfield(PyCall, Symbol("##writable#261#87"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readline#262#88"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readlines#263#89"))}, Tuple{Symbol, getfield(PyCall, Symbol("##seek#264#90"))}, Tuple{Symbol, getfield(PyCall, Symbol("##seekable#265#91"))}, Tuple{Symbol, getfield(PyCall, Symbol("##tell#266#92"))}, Tuple{Symbol, getfield(PyCall, Symbol("##writelines#267#93"))}, Tuple{Symbol, getfield(PyCall, Symbol("##read#268#94"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readall#269#95"))}, Tuple{Symbol, getfield(PyCall, Symbol("##readinto#270#96"))}, Tuple{Symbol, getfield(PyCall, Symbol("##write#271#97"))}}})
precompile(Tuple{typeof(Base.union), Array{Any, 1}, Array{PyCall.PyObject, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#239#241")), Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Array{Any, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Any, 1}})
precompile(Tuple{getfield(PyCall, Symbol("##def_py_class#46")), Array{Any, 1}, Array{Tuple{Symbol, Function, Nothing}, 1}, Array{Any, 1}, typeof(PyCall.def_py_class), String, Array{Tuple{Symbol, Function}, 1}})
precompile(Tuple{typeof(PyCall.pyio_initialize)})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##close#254#80"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##fileno#257#83"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##flush#258#84"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##isatty#259#85"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readable#260#86"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##writable#261#87"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readline#262#88"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readlines#263#89"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##seek#264#90"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##seekable#265#91"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##tell#266#92"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##writelines#267#93"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##read#268#94"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readall#269#95"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##readinto#270#96"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Symbol, Function}, 1}, Tuple{Symbol, getfield(PyCall, Symbol("##write#271#97"))}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Symbol, getfield(PyCall, Symbol("##encoding_get#256#82")), Nothing}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Tuple{Symbol, Function, Nothing}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Symbol, Function, Nothing}, 1}, Tuple{Tuple{Symbol, getfield(PyCall, Symbol("##encoding_get#256#82")), Nothing}, Tuple{Symbol, getfield(PyCall, Symbol("##closed_get#255#81")), Nothing}}})
precompile(Tuple{typeof(Base._grow!), Function, Array{Any, 1}, Tuple{Array{Any, 1}, Array{PyCall.PyObject, 1}}})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#91#92")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#91#92")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, typeof(Base.push!), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(&)), PyCall.PyObject, Int64})
precompile(Tuple{typeof(Base.hashindex), PyCall.PyObject, Int64})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, PyCall.PyObject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, PyCall.PyObject})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#91#92")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Any}}, typeof(Base.push!), Array{PyCall.PyObject, 1}, Array{Any, 1}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PyCall.PyObject})
precompile(Tuple{Type{Base.Dict{Symbol, PyCall.PyObject}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{PyCall.PyObject}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, PyCall.PyObject}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, PyCall.PyObject}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PyCall.PyObject}, PyCall.PyObject, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PyCall.PyObject}, Base.Generator{Array{Tuple{Symbol, Function}, 1}, getfield(PyCall, Symbol("#47#49"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##close#254#80"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##close#254#80"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##fileno#257#83"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##fileno#257#83"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##flush#258#84"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##flush#258#84"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##isatty#259#85"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##isatty#259#85"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readable#260#86"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readable#260#86"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##writable#261#87"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##writable#261#87"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readline#262#88"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readline#262#88"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readlines#263#89"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readlines#263#89"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##seek#264#90"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##seek#264#90"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##seekable#265#91"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##seekable#265#91"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##tell#266#92"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##tell#266#92"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##writelines#267#93"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##writelines#267#93"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##read#268#94"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##read#268#94"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readall#269#95"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readall#269#95"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##readinto#270#96"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##readinto#270#96"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##write#271#97"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#47#49")), Tuple{Symbol, getfield(PyCall, Symbol("##write#271#97"))}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##encoding_get#256#82"))}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#48#50")), Tuple{Symbol, getfield(PyCall, Symbol("##encoding_get#256#82")), Nothing}})
precompile(Tuple{PyCall.PyObject, PyCall.PyObject, Vararg{PyCall.PyObject, N} where N})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, PyCall.PyObject, Vararg{PyCall.PyObject, N} where N})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject, PyCall.PyObject}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{PyCall.PyObject, PyCall.PyObject}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, PyCall.PyObject}, Base.Generator{Array{Tuple{Symbol, Function, Nothing}, 1}, getfield(PyCall, Symbol("#48#50"))}, Int64})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{getfield(PyCall, Symbol("##closed_get#255#81"))}, Int64, Ptr{Nothing}})
precompile(Tuple{getfield(PyCall, Symbol("#48#50")), Tuple{Symbol, getfield(PyCall, Symbol("##closed_get#255#81")), Nothing}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, PyCall.PyObject, Symbol})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Dict{Symbol, PyCall.PyObject}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Symbol, PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(PyCall, Symbol("##_#117")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, PyCall.PyObject, String, Vararg{Any, N} where N})
precompile(Tuple{Type{PyCall.PyObject}, Tuple{PyCall.PyObject}})
precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String, Tuple{PyCall.PyObject}, Base.Dict{Any, Any}}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(PyCall._pycall!), PyCall.PyObject, PyCall.PyObject, Tuple{String, Tuple{PyCall.PyObject}, Base.Dict{Any, Any}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, PyCall.PyAny}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, PyCall.PyAny}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{typeof(PyCall.istuplen), Type{T} where T, Bool, Int64})
precompile(Tuple{Type{PyCall.PyDict{Symbol, PyCall.PyObject, true}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.iterate), PyCall.PyDict{Symbol, PyCall.PyObject, true}, PyCall.PyDict_Iterator})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Tuple{Symbol, Any}, 1}})
precompile(Tuple{typeof(PyCall._setproperty!), PyCall.PyObject, Symbol, Bool})
precompile(Tuple{getfield(PyCall, Symbol("##__init__#253#77#79")), Bool, getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}, PyCall.PyObject, Base.IOStream})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##__init__#253#78")){getfield(PyCall, Symbol("##__init__#253#77#79"))}, Tuple{PyCall.PyObject, Base.IOStream}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(PyCall.pyreturn), Nothing})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, AbstractString}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny, AbstractString}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny, AbstractString}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##write#271#97"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##write#271#97"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##write#271#97")), PyCall.PyObject, String})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##write#271#97")), Tuple{PyCall.PyObject, String}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
precompile(Tuple{typeof(PyCall.pyreturn), Int64})
precompile(Tuple{getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(PyCall, Symbol("#28#29")){Tuple{PyCall.PyAny}, PyCall.PyObject, Bool}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Tuple{PyCall.PyAny}}, PyCall.PyObject})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##readable#260#86"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##readable#260#86"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##readable#260#86")), PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##readable#260#86")), Tuple{PyCall.PyObject}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.isreadable), Base.IOStream})
precompile(Tuple{typeof(PyCall.pyreturn), Bool})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##writable#261#87"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##writable#261#87"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##writable#261#87")), PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##writable#261#87")), Tuple{PyCall.PyObject}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.iswritable), Base.IOStream})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##seekable#265#91"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##seekable#265#91"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##seekable#265#91")), PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##seekable#265#91")), Tuple{PyCall.PyObject}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(PyCall.isseekable), Base.IOStream})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##tell#266#92"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##tell#266#92"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##tell#266#92")), PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##tell#266#92")), Tuple{PyCall.PyObject}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.position), Base.IOStream})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##closed_get#255#81"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##closed_get#255#81"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##closed_get#255#81")), PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##closed_get#255#81")), Tuple{PyCall.PyObject}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.isopen), Base.IOStream})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##flush#258#84"))}, PyCall.PyDict{Symbol, PyCall.PyObject, true}})
precompile(Tuple{typeof(Base.collect), Base.Generator{PyCall.PyDict{Symbol, PyCall.PyObject, true}, getfield(PyCall, Symbol("#57#58")){getfield(PyCall, Symbol("##flush#258#84"))}}})
precompile(Tuple{getfield(PyCall, Symbol("##flush#258#84")), PyCall.PyObject})
precompile(Tuple{getfield(PyCall, Symbol("#f_kw_closure#59")){getfield(PyCall, Symbol("##flush#258#84")), Tuple{PyCall.PyObject}, Array{Tuple{Symbol, Any}, 1}}})
precompile(Tuple{typeof(Base.redirect_stdout), Base.TTY})
precompile(Tuple{typeof(Base.:(==)), Expr, Symbol})
precompile(Tuple{getfield(Franklin, Symbol("#73#75")){Nothing}})
precompile(Tuple{typeof(Base.redirect_stdout), getfield(Franklin, Symbol("#73#75")){Nothing}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Franklin, Symbol("#72#74")){Nothing}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(DelimitedFiles, Symbol("##writedlm#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(DelimitedFiles.writedlm), Base.IOStream, Nothing, Char})
precompile(Tuple{typeof(DelimitedFiles.writedlm), Base.IOStream, Nothing, Char})
precompile(Tuple{typeof(Base.show), Base.IOStream, Base.Multimedia.MIME{Symbol("text/csv")}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOStream, Base.Multimedia.MIME{Symbol("text/tab-separated-values")}, Nothing})
precompile(Tuple{typeof(Base.show), Base.IOStream, String, Nothing})
precompile(Tuple{typeof(Base.:(*)), PyCall.PyObject, String})
precompile(Tuple{getfield(Franklin, Symbol("##lx_output#126")), Bool, Bool, typeof(Franklin.lx_output), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.lx_output), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Base.VersionNumber})
precompile(Tuple{getfield(Franklin, Symbol("#parse_rpath##kw")), NamedTuple{(:canonical,), Tuple{Bool}}, typeof(Franklin.parse_rpath), String})
precompile(Tuple{getfield(Franklin, Symbol("##parse_rpath#76")), Bool, Bool, typeof(Franklin.parse_rpath), String})
precompile(Tuple{getfield(Franklin, Symbol("##parse_rpath#76")), Bool, Bool, typeof(Franklin.parse_rpath), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.form_codepaths), Base.SubString{String}})
precompile(Tuple{typeof(Base.:(>=)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{getfield(Base, Symbol("##open#270")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#279#280")){String}, String})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Base.:(<)), PyCall.PyObject, PyCall.PyObject})
precompile(Tuple{typeof(Franklin.lx_figalt), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#parse_rpath##kw")), NamedTuple{(:canonical, :code), Tuple{Bool, Bool}}, typeof(Franklin.parse_rpath), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.hfun_href), Array{String, 1}})
precompile(Tuple{typeof(Franklin.hfun_insert), Array{String, 1}})
precompile(Tuple{typeof(Franklin.process_html_cond), String, Array{Franklin.AbstractBlock, 1}, Int64})
precompile(Tuple{typeof(Base.map), getfield(DataStructures, Symbol("#82#83")){Int64}, Tuple{DataStructures.SparseIntSet, DataStructures.SparseIntSet}})
precompile(Tuple{typeof(Franklin.process_html_for), String, Array{Franklin.AbstractBlock, 1}, Int64})
precompile(Tuple{typeof(Franklin.find_hrules!), Array{Franklin.Token, 1}})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Franklin.preprocess_candidate_mddefs!), Array{Franklin.Token, 1}})
precompile(Tuple{typeof(Base.in), Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Franklin.deactivate_inner_blocks!), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Franklin.filter_indented_blocks!), Array{Franklin.OCBlock, 1}})
precompile(Tuple{typeof(Franklin.set_paths!)})
precompile(Tuple{getfield(Franklin, Symbol("##find_lxcoms#58")), Bool, typeof(Franklin.find_lxcoms), Array{Franklin.Token, 1}, Array{Franklin.LxDef, 1}, Array{Franklin.OCBlock, 1}, Int64})
precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), String, Int64})
precompile(Tuple{typeof(Franklin.set_vars!), OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, Array{String, 1}, Array{Base.Pair{A, B} where B where A, 1}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Franklin.process_mddefs), Array{Franklin.OCBlock, 1}, Bool, Bool})
precompile(Tuple{typeof(Base.:(&)), PyCall.PyObject, Bool})
precompile(Tuple{typeof(Franklin.form_inter_md), String, Array{Franklin.AbstractBlock, 1}, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Markdown.Config, Symbol})
precompile(Tuple{getfield(Markdown, Symbol("##parse#20")), Markdown.Config, typeof(Markdown.parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Franklin, Symbol("##md2html#85")), Bool, typeof(Franklin.md2html), String})
precompile(Tuple{typeof(Franklin.url_curpage)})
precompile(Tuple{typeof(Franklin.def_LOCAL_VARS!)})
precompile(Tuple{typeof(Franklin.set_page_env)})
precompile(Tuple{getfield(Franklin, Symbol("##convert_md#106")), Bool, Bool, Bool, Bool, Bool, typeof(Franklin.convert_md), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isinternal,), Tuple{Bool}}, typeof(Franklin.convert_md), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isinternal,), Tuple{Bool}}, typeof(Franklin.convert_md), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##fd2html_v#139")), Bool, String, typeof(Franklin.fd2html_v), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#fd2html_v##kw")), NamedTuple{(:internal,), Tuple{Bool}}, typeof(Franklin.fd2html_v), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##fd2html#140")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:internal,), Tuple{Bool}}}, typeof(Franklin.fd2html), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#fd2html##kw")), NamedTuple{(:internal,), Tuple{Bool}}, typeof(Franklin.fd2html), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.validate_and_store_link_defs!), Array{Franklin.OCBlock, 1}})
precompile(Tuple{getfield(Franklin, Symbol("##convert_md#106")), Bool, Bool, Bool, Bool, Bool, typeof(Franklin.convert_md), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:pagevar,), Tuple{Bool}}, typeof(Franklin.convert_md), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:pagevar,), Tuple{Bool}}, typeof(Franklin.convert_md), String})
precompile(Tuple{typeof(Franklin.get_rpath), String})
precompile(Tuple{typeof(Franklin.pagevar), String, String})
precompile(Tuple{typeof(Franklin.hfun_fill), Array{String, 1}})
precompile(Tuple{typeof(Franklin.convert_html_fblock), Franklin.HFun})
precompile(Tuple{typeof(Franklin.process_html_qblocks), String, Array{Franklin.AbstractBlock, 1}, Int64, Int64})
precompile(Tuple{typeof(Franklin.process_html_qblocks), String, Array{Franklin.AbstractBlock, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Base.SubString{String}, Base.Generator{Array{Base.RegexMatch, 1}, getfield(Franklin, Symbol("#153#155"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.RegexMatch, 1}, getfield(Franklin, Symbol("#153#155"))}})
precompile(Tuple{typeof(Franklin.find_and_fix_md_links), String})
precompile(Tuple{typeof(Franklin.fix_links), String})
precompile(Tuple{getfield(Franklin, Symbol("##convert_html#136")), Bool, typeof(Franklin.convert_html), String})
precompile(Tuple{typeof(Franklin.convert_html), String})
precompile(Tuple{typeof(Utils.increment)})
precompile(Tuple{typeof(Utils.lx_increment), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Utils.resetcount)})
precompile(Tuple{typeof(Utils.lx_resetcount), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, Base.SubString{String}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Utils.Theorem, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.lx_input), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.resolve_rpath), Base.SubString{String}, String})
precompile(Tuple{getfield(Franklin, Symbol("##_lx_input_code#125")), String, typeof(Franklin._lx_input_code), Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("#_lx_input_code##kw")), NamedTuple{(:lang,), Tuple{String}}, typeof(Franklin._lx_input_code), Base.SubString{String}})
precompile(Tuple{typeof(Franklin.lx_textoutput), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.reprocess), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isrecursive, :isconfig, :has_mddefs), Tuple{Bool, Bool, Bool}}, typeof(Franklin.convert_md), String, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat_t), Type{Franklin.LxDef}, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#109")), Int64, typeof(Base.cat_t), Type{Franklin.LxDef}, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{typeof(Base._cat_t), Int64, Type{T} where T, Array{Franklin.LxDef, 1}, Vararg{Array{Franklin.LxDef, 1}, N} where N})
precompile(Tuple{getfield(Markdown, Symbol("#21#22")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.pushitem!), Markdown.List, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{getfield(Markdown, Symbol("#35#36")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#31#32")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#33#34")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("##_parse#90")), Bool, Bool, typeof(Markdown._parse), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Markdown.interpinner), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Markdown.blockinterp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#29#30")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Any, 1}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#56#58")){Markdown.MD}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.SubString{String}, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Markdown, Symbol("#56#58")){Markdown.MD}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{getfield(Markdown, Symbol("#55#57")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{getfield(Markdown, Symbol("#23#25")){Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD}})
precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Franklin.getname), Franklin.LxCom})
precompile(Tuple{typeof(Franklin.reprocess), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.:(*)), String, PyCall.PyObject})
precompile(Tuple{getfield(Franklin, Symbol("##resolve_lxcom#121")), Bool, typeof(Franklin.resolve_lxcom), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.resolve_lxcom), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_block), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_inter_html), Base.SubString{String}, Array{Franklin.AbstractBlock, 1}, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#convert_md##kw")), NamedTuple{(:isrecursive, :has_mddefs), Tuple{Bool, Bool}}, typeof(Franklin.convert_md), Base.SubString{String}, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_header), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_footnote_def), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Franklin, Symbol("#resolve_lxcom##kw")), NamedTuple{(:inmath,), Tuple{Bool}}, typeof(Franklin.resolve_lxcom), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_md_math), String, Array{Franklin.LxDef, 1}, Int64})
precompile(Tuple{typeof(Franklin.convert_math_block), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Franklin.convert_block), Franklin.OCBlock, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Franklin, Symbol("#131#133")), OrderedCollections.LittleDict{Union{Base.SubString{String}, String}, Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, Array{Union{Base.SubString{String}, String}, 1}, Array{Tuple{Union{Base.SubString{String}, String}, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Franklin.hfun_toc), Array{String, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, typeof(Franklin.literate_post_process), Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Franklin, Symbol("#81#82")), String, Bool}}})
precompile(Tuple{typeof(Franklin.lx_literate), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{getfield(Literate, Symbol("#12#14")), Base.Pair{Any, Any}})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Generator{Base.Dict{Any, Any}, getfield(Literate, Symbol("#12#14"))}})
precompile(Tuple{getfield(Literate, Symbol("#13#15")), Base.Pair{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:documenter, :postprocess, :credit), Tuple{Bool, typeof(Franklin.literate_post_process), Bool}}}, getfield(Literate, Symbol("#13#15"))}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Pair{String, String}, String})
precompile(Tuple{getfield(Literate, Symbol("##create_configuration#11")), Base.Dict{Any, Any}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:documenter, :postprocess, :credit), Tuple{Bool, typeof(Franklin.literate_post_process), Bool}}}, Symbol, typeof(Literate.create_configuration), String})
precompile(Tuple{typeof(Literate.sandbox)})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char})
precompile(Tuple{typeof(Base.link_pipe!), Base.PipeEndpoint, Bool, Base.PipeEndpoint, Bool})
precompile(Tuple{typeof(Literate.execute_block), Module, String})
precompile(Tuple{typeof(Base.getindex), LaTeXStrings.LaTeXString, Base.UnitRange{Int64}})
precompile(Tuple{typeof(REPL.ends_with_semicolon), AbstractString})
precompile(Tuple{typeof(Literate.execute_markdown!), Base.GenericIOBuffer{Array{UInt8, 1}}, Module, String, String})
precompile(Tuple{getfield(Literate, Symbol("##markdown#17")), Base.Dict{Any, Any}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:documenter, :postprocess, :credit), Tuple{Bool, typeof(Franklin.literate_post_process), Bool}}}, typeof(Literate.markdown), String, String})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:documenter, :postprocess, :name, :credit), Tuple{Bool, getfield(Franklin, Symbol("#81#82")), String, Bool}}}, getfield(Literate, Symbol("#13#15"))}})
precompile(Tuple{getfield(Literate, Symbol("##create_configuration#11")), Base.Dict{Any, Any}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:documenter, :postprocess, :name, :credit), Tuple{Bool, getfield(Franklin, Symbol("#81#82")), String, Bool}}}, Nothing, typeof(Literate.create_configuration), String})
precompile(Tuple{getfield(Literate, Symbol("##script#16")), Base.Dict{Any, Any}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:documenter, :postprocess, :name, :credit), Tuple{Bool, getfield(Franklin, Symbol("#81#82")), String, Bool}}}, typeof(Literate.script), String, String})
precompile(Tuple{typeof(Franklin.literate_to_franklin), Base.SubString{String}})
precompile(Tuple{Type{Base.Pair{String, typeof(Franklin.literate_post_process)}}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Function, String})
precompile(Tuple{typeof(Base.identity), String})
precompile(Tuple{getfield(Base, Symbol("##replace#336")), Int64, typeof(Base.replace), String, Base.Pair{Any, Any}})
precompile(Tuple{getfield(Literate, Symbol("##replace_default#10")), Base.Dict{String, Any}, String, String, typeof(Literate.replace_default), String, Symbol})
precompile(Tuple{getfield(Literate, Symbol("#replace_default##kw")), NamedTuple{(:config,), Tuple{Base.Dict{String, Any}}}, typeof(Literate.replace_default), String, Symbol})
precompile(Tuple{typeof(Base._pat_replacer), String})
precompile(Tuple{typeof(Base.findnext), String, String, Int64})
precompile(Tuple{typeof(Base.first), Int64})
precompile(Tuple{typeof(Base.last), Int64})
precompile(Tuple{typeof(Base.findnext), Base.RegexAndMatchData, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.EachLine{Base.GenericIOBuffer{Array{UInt8, 1}}}, Nothing})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.EachLine{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Literate.ismdline), Base.SubString{String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{String, String}, 1}, String, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Pair{String, String}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{Array{Base.Pair{String, String}, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Literate, Symbol("#3#7")), Array{Literate.Chunk, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(Literate, Symbol("#4#8")), Array{Literate.Chunk, 1}})
precompile(Tuple{getfield(Literate, Symbol("##parse#1")), Bool, typeof(Literate.parse), String})
precompile(Tuple{typeof(Literate.parse), String})
precompile(Tuple{typeof(Base.push!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}})
precompile(Tuple{getfield(Literate, Symbol("#3#7")), Literate.MDChunk})
precompile(Tuple{getfield(Literate, Symbol("#3#7")), Literate.CodeChunk})
precompile(Tuple{getfield(Literate, Symbol("#4#8")), Literate.MDChunk})
precompile(Tuple{getfield(Literate, Symbol("#4#8")), Literate.CodeChunk})
precompile(Tuple{typeof(Base.getindex), Array{Base.Pair{String, String}, 1}, Int64})
precompile(Tuple{typeof(Base.isempty), Base.Pair{String, String}})
precompile(Tuple{typeof(Base.last), Base.Pair{String, String}})
precompile(Tuple{typeof(Base.lastindex), Array{Base.Pair{String, String}, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}})
precompile(Tuple{typeof(Base.pop!), Array{String, 1}})
precompile(Tuple{typeof(Franklin.literate_post_process), String})
precompile(Tuple{Type{Base.Pair{String, getfield(Franklin, Symbol("#81#82"))}}, Any, Any})
precompile(Tuple{getfield(Franklin, Symbol("#81#82")), String})
precompile(Tuple{typeof(Franklin.should_eval), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Franklin.newmodule), String})
precompile(Tuple{typeof(Franklin.resolve_code_block), Base.SubString{String}})
precompile(Tuple{typeof(Base.vect), Franklin.LxDef})
precompile(Tuple{typeof(Franklin.lx_show), Franklin.LxCom, Array{Franklin.LxDef, 1}})
precompile(Tuple{typeof(Base._deleteat!), Array{LiveServer.WatchedFile{T} where T<:AbstractString, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(LiveServer.file_watcher_task!), LiveServer.SimpleWatcher})
precompile(Tuple{getfield(LiveServer, Symbol("#2#3")){LiveServer.SimpleWatcher}})
precompile(Tuple{Type{NamedTuple{(:clear, :verb, :on_write), T} where T<:Tuple}, Tuple{Bool, Bool, getfield(Franklin, Symbol("#189#192"))}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Pair{String, String}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.Pair{String, String}, Float64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple), 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{String, OrderedCollections.LittleDict{String, Base.Pair{A, B} where B where A, KS, VS} where VS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple) where KS<:(Union{#s14, #s13} where #s13<:(Array{T, 1} where T) where #s14<:Tuple)}, Int64})
precompile(Tuple{typeof(Base.endswith), String, Base.SubString{String}})
precompile(Tuple{getfield(Franklin, Symbol("##fd_loop#200")), Bool, Bool, Function, typeof(Franklin.fd_loop), Int64, LiveServer.SimpleWatcher, NamedTuple{(:other, :infra, :md, :html, :literate), Tuple{Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}}}})
precompile(Tuple{getfield(Franklin, Symbol("#fd_loop##kw")), NamedTuple{(:clear, :verb, :on_write), Tuple{Bool, Bool, getfield(Franklin, Symbol("#189#192"))}}, typeof(Franklin.fd_loop), Int64, LiveServer.SimpleWatcher, NamedTuple{(:other, :infra, :md, :html, :literate), Tuple{Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(LiveServer, Symbol("#10#15")){Int64, HTTP.Handlers.RequestHandlerFunction{getfield(LiveServer, Symbol("#9#14")){LiveServer.SimpleWatcher}}, Sockets.TCPServer}})
precompile(Tuple{getfield(HTTP.Servers, Symbol("##listen#1")), Nothing, Function, Sockets.TCPServer, Bool, Base.RefValue{Int64}, Nothing, Int64, Int64, Bool, typeof(HTTP.Servers.listen), getfield(LiveServer, Symbol("#11#16")){HTTP.Handlers.RequestHandlerFunction{getfield(LiveServer, Symbol("#9#14")){LiveServer.SimpleWatcher}}}, Sockets.IPv4, Int64})
precompile(Tuple{typeof(Sockets.accept), Sockets.TCPServer, Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.localport), Sockets.TCPSocket})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, String, String, Int64, Int64, Bool, Sockets.TCPSocket, Bool})
precompile(Tuple{typeof(HTTP.Servers.listenloop), Function, HTTP.Servers.Server{Nothing, Sockets.TCPServer}, getfield(HTTP.Servers, Symbol("#2#5")){Nothing, getfield(HTTP.Servers, Symbol("#4#7"))}, Base.RefValue{Int64}, Int64, Int64, Bool})
precompile(Tuple{getfield(Franklin, Symbol("##scan_input_dir!#157")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:in_loop,), Tuple{Bool}}}, typeof(Franklin.scan_input_dir!), Base.Dict{Base.Pair{String, String}, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:files2ignore, :dirs2ignore), Tuple{Array{String, 1}, Array{String, 1}}}}, Type{NamedTuple{(:in_loop,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:files2ignore, :dirs2ignore), Tuple{Array{String, 1}, Array{String, 1}}}, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:in_loop,), Tuple{Bool}}}})
precompile(Tuple{getfield(Franklin, Symbol("#_scan_input_dir2!##kw")), NamedTuple{(:files2ignore, :dirs2ignore, :in_loop), Tuple{Array{String, 1}, Array{String, 1}, Bool}}, typeof(Franklin._scan_input_dir2!), Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Base.Dict{Base.Pair{String, String}, Float64}, Bool})
precompile(Tuple{typeof(Base._uv_hook_close), Sockets.TCPServer})
precompile(Tuple{typeof(Base.rethrow), Base.IOError})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Base.Pair{Int64, Tuple{DataType}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Timer}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Timer, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Base.Timer}, Int64})
precompile(Tuple{typeof(PyCall.pygui_stop), Symbol})
precompile(Tuple{typeof(PyCall.pygui_stop_all)})
precompile(Tuple{typeof(PyCall.Py_Finalize)})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
precompile(Tuple{typeof(Base.showerror), Base.TTY, InterruptException})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{getfield(Base, Symbol("##process_backtrace#668")), Bool, typeof(Base.process_backtrace), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
precompile(Tuple{typeof(Base.show_reduced_backtrace), Base.IOContext{Base.TTY}, Array{Any, 1}, Bool})
precompile(Tuple{typeof(Base.show_backtrace), Base.TTY, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPServer})
