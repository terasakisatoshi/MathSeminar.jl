precompile(Tuple{typeof(Base.similar), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.Sys.which), String})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#64#65")){typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{typeof(x265_jll.__init__)})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FreeType2_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(Base.Experimental.register_error_hint), Function, Type{T} where T})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libass_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libvorbis_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(FFMPEG_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.isijulia)})
precompile(Tuple{typeof(GR.isatom)})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.pkgdir), Module})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Function, 1}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#273#306"))})
precompile(Tuple{typeof(Requires.withnotifications), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#274#307"))})
precompile(Tuple{typeof(Requires.err), Any, Module, String})
precompile(Tuple{getfield(Plots, Symbol("#275#308"))})
precompile(Tuple{typeof(Zstd_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(JpegTurbo_jll.__init__)})
precompile(Tuple{typeof(Libtiff_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Libtiff_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Libtiff_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(ImageCore.__init__)})
precompile(Tuple{typeof(libpng_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(libpng_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(libpng_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(ImageMagick_jll.__init__)})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Nothing, Nothing, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Nothing, Nothing, Symbol}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{typeof(Base.foreach), getfield(ImageMagick_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(ImageMagick_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(ImageMagick.__init__)})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(FFTW_jll.__init__)})
precompile(Tuple{typeof(FFTW.spawnloop), Ptr{Nothing}, Ptr{Nothing}, UInt64, Int32, Ptr{Nothing}})
precompile(Tuple{typeof(FFTW.__init__)})
precompile(Tuple{getfield(ImageCore, Symbol("#39#42"))})
precompile(Tuple{getfield(ImageCore, Symbol("#40#43"))})
precompile(Tuple{getfield(ImageCore, Symbol("#41#44"))})
precompile(Tuple{typeof(ImageCore.include), String})
precompile(Tuple{typeof(Base.string), String, Symbol})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(ImageFiltering.__init__)})
precompile(Tuple{typeof(VisualRegressionTests.__init__)})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(PCRE_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Libiconv_jll.__init__)})
precompile(Tuple{typeof(XML2_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(XML2_jll, Symbol("#13#15")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(XML2_jll, Symbol("#14#16")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Gettext_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Gettext_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Gettext_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Libffi_jll.__init__)})
precompile(Tuple{typeof(Glib_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Glib_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Glib_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Expat_jll.__init__)})
precompile(Tuple{typeof(Fontconfig_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Fontconfig_jll, Symbol("#34#36")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Fontconfig_jll, Symbol("#35#37")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Graphite2_jll.__init__)})
precompile(Tuple{typeof(LZO_jll.__init__)})
precompile(Tuple{typeof(Pixman_jll.__init__)})
precompile(Tuple{typeof(Cairo_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Cairo_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Cairo_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(HarfBuzz_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(HarfBuzz_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(HarfBuzz_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Pango_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Pango_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Pango_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(gdk_pixbuf_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(gdk_pixbuf_jll, Symbol("#10#12")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(gdk_pixbuf_jll, Symbol("#11#13")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(ATK_jll.__init__)})
precompile(Tuple{typeof(hicolor_icon_theme_jll.__init__)})
precompile(Tuple{typeof(iso_codes_jll.__init__)})
precompile(Tuple{typeof(Libepoxy_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Libepoxy_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Libepoxy_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(GTK3_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(GTK3_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(GTK3_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(adwaita_icon_theme_jll.__init__)})
precompile(Tuple{typeof(Gtk.GLib.GClosureMarshal), Ptr{Nothing}, Ptr{Gtk.GLib.GValue}, UInt32, Ptr{Gtk.GLib.GValue}, Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Gtk.GLib.uv_prepare), Ptr{Nothing}, Ptr{Int32}})
precompile(Tuple{typeof(Gtk.GLib.uv_check), Ptr{Nothing}})
precompile(Tuple{typeof(Gtk.GLib.uv_dispatch), Ptr{Nothing}, Ptr{Nothing}, Int64})
precompile(Tuple{typeof(Gtk.GLib.g_yield), UInt64})
precompile(Tuple{typeof(Gtk.GLib.__init__)})
precompile(Tuple{typeof(Gtk.__init__)})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Union{Nothing, String}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Nothing, String}, 1}, Tuple{String, String, String, Nothing}})
precompile(Tuple{typeof(Base.filter), getfield(Gtk, Symbol("#299#305")), Array{Union{Nothing, String}, 1}})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Array{Union{Nothing, String}, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Union{Nothing, String}, 1}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_hash#23")), Pkg.BinaryPlatforms.Platform, Nothing, typeof(Pkg.Artifacts.artifact_hash), String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#artifact_meta##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, String})
precompile(Tuple{typeof(Pkg.TOML.table2dict), Pkg.TOML.Table})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#6#9"))})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#7#10"))})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#8#11"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(VisualRegressionTests.include), String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr})
precompile(Tuple{typeof(Base.Docs.docm), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Base.Docs.objectdoc), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.Docs.docstr), Any, Any})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Expr}}})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), Any, Any})
precompile(Tuple{typeof(Test.get_test_result), Any, Any})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#12")), Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#6")), Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base._all), getfield(StaticArrays, Symbol("#7#8")), Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#2")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Test.Error}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Test.Fail}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Test.Error, Test.Fail}}})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{Type{Test.DefaultTestSet}, Any})
precompile(Tuple{Type{Test.DefaultTestSet}, AbstractString, Array{T, 1} where T, Int64, Bool})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{Type{NamedTuple{(:showaxis,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:showaxis,), Tuple{Symbol}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.wraptuple), Symbol})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Base.UnitRange{Int64}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots.build_layout), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#141")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##chop#342")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{Plots.GRBackend}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.slice_arg), Bool, Int64})
precompile(Tuple{Type{NamedTuple{(:showaxis,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:showaxis,), Tuple{Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.wraptuple), Bool})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#83#84")){getfield(Plots, Symbol("#132#133"))}, Base.Iterators.Pairs{Int64, Base.Dict{Symbol, Any}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Base.Dict{Symbol, Any}, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, String})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Plots._update_axis), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.lastindex), PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.last), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Symbol, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#142#143")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Ptr{Nothing}, Base.InterpreterIP}}})
precompile(Tuple{typeof(Test.do_test), Test.ExecutionResult, Any})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:scale,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:scale,), Tuple{Symbol}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{NamedTuple{(:showaxis,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:showaxis,), Tuple{String}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.wraptuple), String})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, String, Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, String})
precompile(Tuple{typeof(Plots.slice_arg), String, Int64})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:guide,), Tuple{String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#747")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#746")), Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Gtk.gtk_main)})
precompile(Tuple{typeof(Gtk.GLib.g_sigatom), Any})
precompile(Tuple{getfield(Gtk, Symbol("#237#238"))})
precompile(Tuple{typeof(Base.getproperty), Gtk.GLib._GPollFD, Symbol})
precompile(Tuple{typeof(Base.:(!=)), UInt16, Int64})
precompile(Tuple{typeof(Gtk.GLib.g_siginterruptible), typeof(Base.yield), Function})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#747")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:axis,), Tuple{Nothing}}, typeof(RecipesBase.plot), Int64})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Int64, Int64, Nothing})
precompile(Tuple{typeof(Plots.slice_arg), Array{Any, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Array{Any, 1}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:ticks,), Tuple{Array{Any, 1}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Lz4_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Blosc_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(Blosc_jll, Symbol("#7#9")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(Blosc_jll, Symbol("#8#10")), Tuple{Array{String, 1}, Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Blosc.__init__)})
precompile(Tuple{typeof(HDF5_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(HDF5_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(HDF5_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(HDF5.blosc_set_local), Int64, Int64, Int64})
precompile(Tuple{typeof(HDF5.blosc_filter), UInt32, UInt64, Ptr{UInt32}, UInt64, Ptr{UInt64}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(HDF5.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Tuple{Int64, Any, UInt64}, DataType}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Int64, Int32, UInt64}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{Int64, Nothing, UInt64}, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Tuple{Any, Any, Int64}}, Int64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Tuple{Function, Int64, Vararg{Int64, N} where N}}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#246#279"))})
precompile(Tuple{getfield(Plots, Symbol("#247#280"))})
precompile(Tuple{getfield(Plots, Symbol("#248#281"))})
precompile(Tuple{typeof(Plots.include), String})
precompile(Tuple{typeof(Base.length), Base.Dict{Type, String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Type{T} where T})
precompile(Tuple{Type{Base.Pair{String, DataType}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Tuple}})
precompile(Tuple{Type{Base.Pair{String, UnionAll}}, Any, Any})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Measures.Length{U, T} where T where U}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Array{T, N} where N where T}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Union{Nothing, T} where T}})
precompile(Tuple{Type{Base.Dict{String, Type}}, Base.Pair{String, DataType}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Type}, Type{T} where T, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Type}, Base.Dict{String, Type}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#465#466")), Base.Dict{String, Type}})
precompile(Tuple{Type{Base.Dict{Type, String}}, Base.Generator{Base.Dict{String, Type}, getfield(Plots, Symbol("#465#466"))}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Nothing}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Type, String}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{RecipesPipeline.DefaultsDict}})
precompile(Tuple{Type{Base.Pair{UnionAll, String}}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Array{T, N} where N where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.SeriesAnnotations}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.RootLayout}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.Font}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Tuple}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.GridLayout}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.Shape}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.Axis}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.Extrema}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{PlotUtils.ColorGradient}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.HDF5CTuple}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.PlotText}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Union{Nothing, T} where T}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Plots.HDF5PlotNative}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Type, String}, String, Type{Measures.Length{U, T} where T where U}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Type, String}, Base.Dict{Type, String}})
precompile(Tuple{getfield(Base, Symbol("#@show")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.sprint), Function, Symbol})
precompile(Tuple{typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##s91#155")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reset,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.hdf5)})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(RecipesBase.plot), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.HDF5Backend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.HDF5Backend}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.HDF5Backend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.HDF5Backend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.HDF5Backend}, RecipesBase.RecipeData, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.HDF5Backend}, Base.Dict{Symbol, Any}, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.UnitRange{Int64}, Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.HDF5Backend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.HDF5Backend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.HDF5Backend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.HDF5Backend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.HDF5Backend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.HDF5Backend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.HDF5Backend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.HDF5Backend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.HDF5Backend}, Symbol})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.HDF5Backend}, Plots.Subplot{Plots.HDF5Backend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.HDF5Backend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.HDF5Backend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.HDF5Backend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.HDF5Backend}, Plots.Subplot{Plots.HDF5Backend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.HDF5Backend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.HDF5Backend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.HDF5Backend}, Plots.Subplot{Plots.HDF5Backend}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.HDF5Backend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.HDF5Backend, Symbol})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.HDF5Backend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.HDF5Backend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.HDF5Backend}})
precompile(Tuple{typeof(Plots.hdf5plot_write), Plots.Plot{Plots.HDF5Backend}, String})
precompile(Tuple{getfield(HDF5, Symbol("##h5open#5")), Bool, typeof(HDF5.h5open), getfield(Plots, Symbol("#467#468")){Plots.Plot{Plots.HDF5Backend}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(HDF5, Symbol("#h5open##kw")), NamedTuple{(:swmr,), Tuple{Bool}}, typeof(HDF5.h5open), String, String})
precompile(Tuple{typeof(Base.iterate), Int64})
precompile(Tuple{typeof(HDF5.h5p_set_fclose_degree), HDF5.HDF5Properties, Int64})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Type, String}, Type{T} where T})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Symbol})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Bool})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.close), HDF5.HDF5Attribute})
precompile(Tuple{typeof(Base.close), HDF5.HDF5Dataspace})
precompile(Tuple{typeof(Base.close), HDF5.HDF5Datatype})
precompile(Tuple{typeof(Base.close), HDF5.HDF5Dataset})
precompile(Tuple{typeof(Base.close), HDF5.HDF5Properties})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots._hdf5plot_overwritetype), HDF5.HDF5Group, String, Type{T} where T})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Array{Any, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Axis})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Plots.Axis})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Extrema})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Plots.Extrema})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.close), HDF5.HDF5Group})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.string), String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#746")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#745")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Plots.Subplot{Plots.HDF5Backend}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Plots._hdf5plot_gwrite), HDF5.HDF5Group, String, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{typeof(Plots.hdf5plot_read), String})
precompile(Tuple{typeof(Base.close), HDF5.HDF5File})
precompile(Tuple{getfield(HDF5, Symbol("##h5open#5")), Bool, typeof(HDF5.h5open), getfield(Plots, Symbol("#471#472")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(HDF5.hdf5_to_julia_eltype), HDF5.HDF5Datatype})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Tuple{Int64, Any, UInt64}, DataType}, Tuple{Int32, Int32, UInt64}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int32, Int32, UInt64}, Tuple{Int64, Int32, UInt64}})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Attribute, Type{Int64}})
precompile(Tuple{Type{Array{Int64, N} where N}, UndefInitializer, Tuple{}})
precompile(Tuple{typeof(HDF5.datatype), Array{Int64, 0}})
precompile(Tuple{typeof(Base.getproperty), HDF5.HDF5Datatype, Symbol})
precompile(Tuple{typeof(HDF5.readarray), HDF5.HDF5Attribute, Int64, Array{Int64, 0}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 0}, Int64})
precompile(Tuple{Type{NamedTuple{(:layout,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout,), Tuple{Int64}}, typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{typeof(Plots._hdf5plot_read), Plots.Plot{Plots.GRBackend}, HDF5.HDF5File})
precompile(Tuple{typeof(Base.:(==)), UInt64, Int64})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Attribute, Type{String}})
precompile(Tuple{typeof(Plots._hdf5plot_read), HDF5.HDF5Group, String, Type{T} where T, String})
precompile(Tuple{typeof(Plots._hdf5plot_read), HDF5.HDF5Group, String, Type{T} where T})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{Array{UInt8, N} where N}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Vararg{Int64, N} where N}}, Tuple{UInt64}})
precompile(Tuple{Type{Array{UInt8, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(HDF5.datatype), Array{UInt8, 1}})
precompile(Tuple{typeof(HDF5.readarray), HDF5.HDF5Dataset, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{String}})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Symbol}, String})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{Int64}})
precompile(Tuple{typeof(HDF5.readarray), HDF5.HDF5Dataset, Int64, Array{Int64, 0}})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Plots.HDF5PlotNative}, Int64})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Plots.HDF5PlotNative}, String})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Bool}, Int64})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{HDF5.UTF8Char}})
precompile(Tuple{Type{Array{Int64, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(HDF5.datatype), Array{Int64, 1}})
precompile(Tuple{typeof(HDF5.readarray), HDF5.HDF5Dataset, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Tuple}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_read), Plots.Subplot{Plots.GRBackend}, String, HDF5.HDF5File})
precompile(Tuple{typeof(Base.string), String, String, Int64})
precompile(Tuple{typeof(Plots._hdf5plot_read), HDF5.HDF5Group, String, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Plots.HDF5PlotNative}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Tuple{Int64, Any, UInt64}, DataType}, Tuple{Int32, Nothing, UInt64}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int32, Nothing, UInt64}, Tuple{Int64, Nothing, UInt64}})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{Array{Float64, N} where N}})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(HDF5.datatype), Array{Float64, 1}})
precompile(Tuple{typeof(HDF5.readarray), HDF5.HDF5Dataset, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Plots.HDF5PlotNative}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Subplot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#129")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot!), Plots.Subplot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), Plots.Subplot{Plots.GRBackend}}, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:subplot,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:subplot,), Tuple{Int64}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:subplot,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Int64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._cycle), Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_read), HDF5.HDF5Group, String, Type{Array{T, N} where N where T}})
precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{Float64}})
precompile(Tuple{Type{Array{Float64, N} where N}, UndefInitializer, Tuple{}})
precompile(Tuple{typeof(HDF5.datatype), Array{Float64, 0}})
precompile(Tuple{typeof(HDF5.readarray), HDF5.HDF5Dataset, Int64, Array{Float64, 0}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 0}, Int64})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Plots.HDF5PlotNative}, Float64})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Attribute, Type{Array{String, N} where N}})
precompile(Tuple{typeof(Base.prod), Tuple{Int64}})
precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Array{String, N} where N}, Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.Cstring, 1}, Int64})
precompile(Tuple{typeof(Plots._hdf5_map_str2telem), Array{String, 1}})
precompile(Tuple{typeof(Plots._hdf5plot_read), HDF5.HDF5Group, String, Type{Measures.Length{U, T} where T where U}, Array{String, 1}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{typeof(Plots._hdf5plot_read), HDF5.HDF5Group, String, Type{Plots.Axis}})
precompile(Tuple{typeof(Base.read), HDF5.HDF5Dataset, Type{HDF5.EmptyArray{Float64}}})
precompile(Tuple{typeof(Plots._hdf5plot_convert), Type{Plots.Extrema}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.HDF5Backend}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Subplot{Plots.HDF5Backend}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Series, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Plots.Series, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.pgfplotsx)})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(PGFPlotsX.__init__)})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#78#97"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#79#98"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#80#99"))})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#87#106"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#88#107"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#89#108"))})
precompile(Tuple{getfield(Plots, Symbol("#258#291"))})
precompile(Tuple{getfield(Plots, Symbol("#259#292"))})
precompile(Tuple{getfield(Plots, Symbol("#260#293"))})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#84#103"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#85#104"))})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#86#105"))})
precompile(Tuple{getfield(Base, Symbol("#@kwdef")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Printf, Symbol("#@sprintf")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.tail), Tuple{String, Expr, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Expr, Expr, Expr}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Expr, Expr, Expr, Expr}})
precompile(Tuple{typeof(Printf._printf), String, Expr, String, Tuple{Expr, Expr, Expr, Expr}})
precompile(Tuple{getfield(Requires, Symbol("#@require")), LineNumberNode, Module, Any, Any})
precompile(Tuple{typeof(Requires.parsepkg), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, String}, Int64, Int64})
precompile(Tuple{typeof(Requires.isprecompiling)})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(Test, Symbol("#@test_nowarn")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Test, Symbol("#@test_warn")), LineNumberNode, Module, Any, Any})
precompile(Tuple{getfield(Colors, Symbol("#@colorant_str")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.nameof), UnionAll})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(Colors._parse_colorant), String})
precompile(Tuple{typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.PGFPlotsXBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.PGFPlotsXBackend}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PGFPlotsX.Plot}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PGFPlotsXBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PGFPlotsXBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Plots._create_backend_figure), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.PGFPlotsXBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.PGFPlotsXBackend, Symbol})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setproperty!), Plots.PGFPlotsXPlot, Symbol, Bool})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{}}})
precompile(Tuple{Plots.PGFPlotsXPlot, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.pgfx_sanitize_string), Tuple{Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.pgfx_sanitize_string), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.pgfx_sanitize_string), Tuple{Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.eachindex), Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Plots.pgfx_split_extra_opts), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Any, Any}})
precompile(Tuple{Type{PGFPlotsX.Options}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, ColorTypes.RGBA{Float64}, String})
precompile(Tuple{typeof(OrderedCollections.hashindex), String, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Float64, String})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(ColorTypes.alpha), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.PGFPlotsXBackend}, Function})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float64})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Plots.pgfx_get_title_pos), Symbol})
precompile(Tuple{typeof(Plots.pgfx_thickness_scaling), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.pgfx_thickness_scaling), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.pgfx_font), Int64, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, String}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Int64, String})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{PGFPlotsX.Options, Nothing}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Nothing, PGFPlotsX.Options})
precompile(Tuple{typeof(OrderedCollections.hashindex), PGFPlotsX.Options, Int64})
precompile(Tuple{Type{PGFPlotsX.Options}, Base.Pair{String, ColorTypes.RGBA{Float64}}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.string), Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:mm, Float64}})
precompile(Tuple{Type{PGFPlotsX.Options}, Base.Pair{String, Float64}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, Float64}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.:(>)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.pgfx_get_legend_pos), Symbol})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, String}, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.isequal), String, PGFPlotsX.Options})
precompile(Tuple{typeof(Plots.pgfx_axis!), PGFPlotsX.Options, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(ColorTypes.color), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, ColorTypes.RGB{Float64}})
precompile(Tuple{Type{PGFPlotsX.Options}, Base.Pair{String, ColorTypes.RGB{Float64}}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, ColorTypes.RGB{Float64}}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, ColorTypes.RGB{Float64}, String})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Bool})
precompile(Tuple{typeof(Plots.pgfx_get_xguide_pos), Symbol})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Options#1")), Bool, Type{PGFPlotsX.Options}, Base.Pair{String, Nothing}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Plots.widen), Float64, Float64, Symbol})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Float64})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Float64})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Float64}, Base.Pair{String, Float64}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Nothing, Bool, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._transform_ticks), Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{getfield(PlotUtils, Symbol("#optimize_ticks##kw")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#636")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.join), Array{Float64, 1}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#355")), Nothing, Int64, typeof(Base.sprint), Function, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Float64, 1}, String})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{String, 1}}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Char}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Char, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Char, String}, Type{Any}, Type{String}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, String}, Base.Dict{Char, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, String}, String, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, String}, Tuple{Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{Char, String}, Base.Pair{String, String}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, Char})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{Char, String}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Any, Base.Dict{Any, String}}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, String}, String})
precompile(Tuple{typeof(Base.replace), String, Base.Pair{String, String}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, Base.RefValue{Base.Pair{String, String}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.replace), Tuple{Array{String, 1}, Base.RefValue{Base.Pair{String, String}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.replace), Tuple{Array{String, 1}, Base.RefValue{Base.Pair{String, String}}}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{typeof(Plots.pgfx_get_ticklabel_style), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Axis})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, Symbol})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.pgfx_get_yguide_pos), Symbol})
precompile(Tuple{typeof(RecipesPipeline.is3d), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#47#48")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.hascolorbar), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, PGFPlotsX.Options})
precompile(Tuple{Type{PGFPlotsX.Axis}, PGFPlotsX.Options})
precompile(Tuple{typeof(Plots.single_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.pgfx_split_extra_opts), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.in), Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Symbol, 1}, getfield(Plots, Symbol("#49#51")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Tuple{Symbol, Symbol, Symbol}, getfield(Plots, Symbol("#50#52")){Plots.Series}}, Base.Colon})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.findfirst), Function, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.push!), Array{Base.UnitRange{Int64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Plots.SegmentsIterator, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Plots._cycle), Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Symbol, Int64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Nothing, Symbol})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Series, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Val{x} where x}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, PGFPlotsX.Coordinate{2}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Nothing, PGFPlotsX.Coordinate{3}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{PGFPlotsX.Coordinate{3}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{Type{PGFPlotsX.Plot}, PGFPlotsX.Options, PGFPlotsX.Coordinates{2}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Axis, PGFPlotsX.Plot})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{PGFPlotsX.LegendEntry}, PGFPlotsX.Options, String, Bool})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Axis, PGFPlotsX.LegendEntry})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Base.UnitRange{Int64}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.TikzPicture, PGFPlotsX.Axis})
precompile(Tuple{typeof(Base.getproperty), Plots.PGFPlotsXPlot, Symbol})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.TikzDocument, Symbol})
precompile(Tuple{typeof(Base.push!), Plots.PGFPlotsXPlot, PGFPlotsX.TikzPicture})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Series, Symbol})
precompile(Tuple{typeof(Base.getindex), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Plots.pgfx_axes), Plots.PGFPlotsXPlot})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.TikzPicture, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Union{String, PGFPlotsX.TikzElement}, 1}, Int64})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.Axis, Symbol})
precompile(Tuple{typeof(Base.count), Function, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Int64}}}, typeof(Base.mapfoldl), Function, Function, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#211#212")){getfield(Main, Symbol("#3#37"))}, typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.Plot, Symbol})
precompile(Tuple{typeof(Base.getproperty), PGFPlotsX.Options, Symbol})
precompile(Tuple{typeof(Base.haskey), OrderedCollections.OrderedDict{Any, Any}, String})
precompile(Tuple{Type{Test.Returned}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Base.rand), Int64, Int64})
precompile(Tuple{typeof(Base.hcat), String, String})
precompile(Tuple{Type{NamedTuple{(:lab,), T} where T<:Tuple}, Tuple{Array{String, 2}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:lab,), Tuple{Array{String, 2}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Nothing, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Base.isempty), Array{String, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{String, 2}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(Plots.scatter!), Plots.Plot{Plots.PGFPlotsXBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter!#339")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.scatter!), Plots.Plot{Plots.PGFPlotsXBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Float64, String})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Float64, ColorTypes.RGBA{Float64}, Float64, Symbol})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.OneTo{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.setindex!), Array{PGFPlotsX.Coordinate{2}, 1}, PGFPlotsX.Coordinate{2}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{2}}, Array{PGFPlotsX.Coordinate{2}, 1}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Nothing}})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{typeof(Plots.pgfx_get_marker), Symbol})
precompile(Tuple{typeof(Base.string), Float64, String})
precompile(Tuple{typeof(Base.print_to_string), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.pgfx_get_linestyle), Symbol})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:scatter}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#4#38")), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#5#39")), Array{Any, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.AbstractTestSet})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Irrational{:π}})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Float64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#range##kw")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(Base.map), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.cos), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.cos)}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Base.sin)}})
precompile(Tuple{typeof(Base.reverse), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.stroke), Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Int64})
precompile(Tuple{Type{NamedTuple{(:zcolor, :m, :leg, :cbar, :w), T} where T<:Tuple}, Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:zcolor, :m, :leg, :cbar, :w), Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :leg, :cbar, :w), Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}}, typeof(RecipesBase.plot), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :leg, :cbar, :w), Tuple{Base.StepRange{Int64, Int64}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Bool, Bool, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64, Symbol, Plots.Stroke}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Float64, Symbol, Plots.Stroke}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Float64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Float64})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.PGFPlotsXBackend, Symbol})
precompile(Tuple{typeof(Base.:(==)), Type{T} where T, Symbol})
precompile(Tuple{typeof(Base.length), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}})
precompile(Tuple{typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{Type{ColorSchemes.ColorScheme{V, S1, S2} where S2<:AbstractString where S1<:AbstractString where V<:(AbstractArray{#s12, 1} where #s12<:(ColorTypes.Colorant{T, N} where N where T))}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Plots.Stroke})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Symbol}, Plots.Stroke})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.convertLegendValue), Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.size), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.size), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ContinuousColorGradient, Symbol})
precompile(Tuple{typeof(Plots.get_series_color), PlotUtils.ContinuousColorGradient, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ContinuousColorGradient, Symbol})
precompile(Tuple{typeof(Plots.get_series_color), ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.zeros), Int64})
precompile(Tuple{Type{NamedTuple{(:w,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots._update_clims), Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Plots.pgfx_colormap), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.length), Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#482#483")){PlotUtils.ContinuousColorGradient}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#482#483")){PlotUtils.ContinuousColorGradient}}})
precompile(Tuple{typeof(Base.getindex), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Int64})
precompile(Tuple{typeof(ColorTypes.red), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(ColorTypes.green), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(ColorTypes.blue), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Printf.fix_dec), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64, String, Int64, Int64, Char, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, Int32, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int32, Int32, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.string), String, Int64, String, Vararg{String, N} where N})
precompile(Tuple{Type{PGFPlotsX.Options}, Base.Pair{String, String}, Vararg{Union{PGFPlotsX.MergeEntry, Base.Pair{A, B} where B where A}, N} where N})
precompile(Tuple{typeof(Plots.pgfx_get_colorbar_pos), Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base._any), typeof(Base.isnan), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.firstindex), Array{Float64, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#4#6")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#4#6"))}})
precompile(Tuple{typeof(Plots.get_markercolor), RecipesPipeline.DefaultsDict, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.get_gradient), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.getindex), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.get), PlotUtils.ContinuousColorGradient, Int64, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.get), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Int64, Tuple{Float64, Float64}})
precompile(Tuple{Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path3d}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{3}}})
precompile(Tuple{typeof(Base.setindex!), Array{PGFPlotsX.Coordinate{3}, 1}, PGFPlotsX.Coordinate{3}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{3}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.UnitRange{Int64}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{3}}, Array{PGFPlotsX.Coordinate{3}, 1}})
precompile(Tuple{typeof(PGFPlotsX.Plot3), PGFPlotsX.Options, PGFPlotsX.Coordinates{3}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.Filesystem.tempname)})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#6#40")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.redirect_stderr), Base.TTY})
precompile(Tuple{typeof(Base.read), String, Type{String}})
precompile(Tuple{typeof(Test.contains_warn), Any, Base.Regex})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{Type{NamedTuple{(:force,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("#rm##kw")), NamedTuple{(:force,), Tuple{Bool}}, typeof(Base.Filesystem.rm), String})
precompile(Tuple{typeof(Base.getindex), PGFPlotsX.Axis, String})
precompile(Tuple{Type{NamedTuple{(:lab, :w, :palette, :fill, :α), T} where T<:Tuple}, Tuple{String, Int64, Symbol, Int64, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64, Symbol, Int64, Float64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, Symbol, Int64, Float64}}, typeof(RecipesBase.plot), Base.StepRange{Int64, Int64}, Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, Symbol, Int64, Float64}}}, typeof(RecipesBase.plot), Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.wraptuple), Int64})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRange{Int64, Int64}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Int64, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Plots.stroke), Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##stroke#88")), Nothing, typeof(Plots.stroke), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.allStyles), Int64})
precompile(Tuple{typeof(Plots.allAlphas), Int64})
precompile(Tuple{typeof(Plots.allStyles), Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{Type{NamedTuple{(:zcolor, :m, :ms, :lab), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:zcolor, :m, :ms, :lab), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:zcolor, :m, :ms, :lab), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}}}, typeof(Plots.scatter!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, Array{String, 1}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{Symbol, Any}}, Any, Any})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Float64, Plots.Stroke}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Float64, Plots.Stroke}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{101}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#192")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#193#194")), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.StepRange{Int64, Int64}, getfield(StaticArrays, Symbol("#193#194"))}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.StepRange{Int64, Int64}, getfield(StaticArrays, Symbol("#193#194"))}, Int64})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{101}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{101}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{101}}})
precompile(Tuple{typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{StaticArrays.SArray{Tuple{101}, ColorTypes.RGB{Float64}, 1, 101}, String, String}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{String, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Array{String, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.label_to_string), Tuple{Array{String, 1}, Int64}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{String, 1}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.pgfx_sanitize_string), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.pgfx_sanitize_string), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.pgfx_sanitize_string), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRange{Int64, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots.pgfx_linestyle), Int64, ColorTypes.RGBA{Float64}, Float64, Symbol})
precompile(Tuple{typeof(Plots._cycle), Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.pgfx_fillrange_series!), PGFPlotsX.Axis, Plots.Series, Type{T} where T, Int64, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.StepRange{Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.pgfx_fillrange_args), Array{Int64, 1}, Base.StepRange{Int64, Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Int64}, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{1}, typeof(Base.cat_t), Type{Int64}, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Base.StepRange{Int64, Int64}, Base.StepRange{Int64, Int64}, Int64}})
precompile(Tuple{typeof(Base.cat_similar), Base.StepRange{Int64, Int64}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.StepRange{Int64, Int64}, Type{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.StepRange{Int64, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.cat_indices), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(PGFPlotsX.PlotInc), PGFPlotsX.Options, PGFPlotsX.Coordinates{2}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#replace_underline#9")), String})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Base.StepRange{Int64, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.StepRange{Int64, Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.eachindex), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#3#5")), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, getfield(Plots, Symbol("#3#5"))}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Array{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{Int64, 1}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.get), PlotUtils.ContinuousColorGradient, Float64, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.allunique), Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Math.clamp), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(ColorSchemes.remap), Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Int64, Float64})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.getindex), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Float64})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Series, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Array{Int64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Array{Int64, 1}}, Tuple{Base.OneTo{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:scatter}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.OneTo{Int64}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Array{Int64, 1}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), Array{String, 1}, Int64, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Array{Int64, 1}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), Float64})
precompile(Tuple{typeof(Base.findfirst), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.:(==)), Float64}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#211#212")){getfield(Main, Symbol("#8#42"))}, typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("#211#212")){getfield(Main, Symbol("#9#43"))}, typeof(Base.add_sum), NamedTuple{(:init,), Tuple{Int64}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getindex), PGFPlotsX.Options, String})
precompile(Tuple{Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:reg, :fill), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Symbol}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:reg, :fill), Tuple{Bool, Tuple{Int64, Symbol}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.length), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.ones), Int64})
precompile(Tuple{typeof(Base.hcat), Base.OneTo{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.size), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#13")), Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("##s37#5")), Any, Any, Any})
precompile(Tuple{typeof(Base.:(\)), Array{Float64, 2}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Plots.ignorenan_minimum), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.ignorenan_maximum), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Int64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Float64, Array{Int64, 1}}}, Float64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:path}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Int64, 1}})
precompile(Tuple{Type{NamedTuple{(:markersize, :c), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Symbol, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}, typeof(Plots.scatter!), Plots.Plot{Plots.PGFPlotsXBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter!#339")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}}, typeof(Plots.scatter!), Plots.Plot{Plots.PGFPlotsXBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.OneTo{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.pgfx_fillrange_args), Array{Int64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Int64}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{1}, typeof(Base.cat_t), Type{Int64}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}, Int64}})
precompile(Tuple{typeof(Base.cat_similar), Base.UnitRange{Int64}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.UnitRange{Int64}, Type{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.cat_size), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Int64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Int64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Array{Int64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Int64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Int64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#10#44")), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#11#45")), Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#12#46")), Array{Symbol, 1}})
precompile(Tuple{typeof(Plots.supported_markers), Plots.PGFPlotsXBackend})
precompile(Tuple{typeof(Base.reshape), Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Symbol, 2}})
precompile(Tuple{Type{NamedTuple{(:stop, :length), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#range##kw")), NamedTuple{(:stop, :length), Tuple{Int64, Int64}}, typeof(Base.range), Int64})
precompile(Tuple{typeof(Base.lastindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.reverse), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.reshape), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.repeat), Base.ReshapedArray{Float64, 2, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Symbol, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{Symbol, 2}, Base.Generator{Array{Symbol, 2}, typeof(Base.string)}})
precompile(Tuple{Type{NamedTuple{(:m, :lab, :bg, :xlim, :ylim), T} where T<:Tuple}, Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter##kw")), NamedTuple{(:m, :lab, :bg, :xlim, :ylim), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, typeof(Plots.scatter), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#338")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:m, :lab, :bg, :xlim, :ylim), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}, typeof(Plots.scatter), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:m, :lab, :bg, :xlim, :ylim, :seriestype), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:m, :lab, :bg, :xlim, :ylim, :seriestype), Tuple{Tuple{Int64, Symbol}, Array{String, 2}, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Symbol}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Int64, Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:lims,), Tuple{Tuple{Int64, Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Symbol})
precompile(Tuple{typeof(Base.hashindex), Symbol, Int64})
precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Type{T} where T})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Type{Plots.Shape}})
precompile(Tuple{getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Any}}, Type{T} where T})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.fakedata), Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.zeros), Int64, Int64})
precompile(Tuple{typeof(Base.to_indices), Array{Float64, 2}, Tuple{Int64, Base.Colon}})
precompile(Tuple{typeof(Base._getindex), Base.IndexLinear, Array{Float64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.vec), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(*)), Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.hcat), Symbol, Symbol, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{Type{NamedTuple{(:layout, :palette, :bg_inside), T} where T<:Tuple}, Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{Symbol, 2}, Array{Symbol, 2}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Symbol, 2}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Symbol, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Symbol, 2}, Int64})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{StaticArrays.SArray{Tuple{101}, ColorTypes.RGB{Float64}, 1, 101}, String, String}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SArray{Tuple{101}, ColorTypes.RGB{Float64}, 1, 101}, Int64})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.randn), Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.abs), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.abs), Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:proj, :m), T} where T<:Tuple}, Tuple{Symbol, Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:proj, :m), Tuple{Symbol, Int64}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:proj, :m), Tuple{Symbol, Int64}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.vect), Tuple{Float64, Float64}, Vararg{Tuple{Float64, Float64}, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Plots.Shape}, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Int64, Int64, Int64, Float64})
precompile(Tuple{Type{NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), T} where T<:Tuple}, Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:line, :marker, :bg, :fg, :xlim, :ylim, :leg), Tuple{Tuple{Int64, Symbol, Symbol}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol, Symbol, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Plots.Shape, Int64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Plots.Shape})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.Shape})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots._replace_markershape), Plots.Shape})
precompile(Tuple{typeof(Base.:(==)), Plots.Shape, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Plots.Shape})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Shape})
precompile(Tuple{Type{NamedTuple{(:nbins,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#histogram2d##kw")), NamedTuple{(:nbins,), Tuple{Int64}}, typeof(Plots.histogram2d), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##histogram2d#352")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:nbins,), Tuple{Int64}}}, typeof(Plots.histogram2d), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:nbins, :seriestype), Tuple{Int64, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:nbins, :seriestype), Tuple{Int64, Symbol}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram2d}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:histogram2d}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{getfield(StatsBase, Symbol("##s196#114")), Any, Any, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s196#115")), Any, Any, Any})
precompile(Tuple{typeof(Base.map), typeof(Base.eltype), Core.SimpleVector})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#83#84")){getfield(Base, Symbol("#64#65")){typeof(Base.isfinite)}}, Base.Iterators.Pairs{Int64, Float64, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Float64, 1}}}, typeof(Base.first)}})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Plots, Symbol("#184#187")){Base.Set{Int64}}, Base.Iterators.Enumerate{Array{Float64, 1}}}, getfield(Plots, Symbol("#183#186"))}})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#181#182")){Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(StatsBase, Symbol("#fit##kw")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.float), StatsBase.Histogram{Int64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{getfield(StatsBase, Symbol("##s195#139")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{getfield(StatsBase, Symbol("##s196#137")), Any, Any, Any, Any})
precompile(Tuple{getfield(LinearAlgebra, Symbol("#normalize!##kw")), NamedTuple{(:mode,), Tuple{Symbol}}, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 2, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, RecipesPipeline.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}, Base.HasLength})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{}})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:bins2d}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.deepcopy), Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(+)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.:(/)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol})
precompile(Tuple{typeof(Base._collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Type{Float64}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Int64})
precompile(Tuple{typeof(Plots._heatmap_edges), Array{Float64, 1}, Bool})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#13#47")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#13#47"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#14#48")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#14#48"))}})
precompile(Tuple{typeof(Base.reshape), Base.UnitRange{Int64}, Int64, Base.Colon})
precompile(Tuple{typeof(Base.:(*)), Base.UnitRange{Int64}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}})
precompile(Tuple{typeof(Base.float), Array{Int64, 2}})
precompile(Tuple{Type{NamedTuple{(:aspect_ratio,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#heatmap##kw")), NamedTuple{(:aspect_ratio,), Tuple{Int64}}, typeof(Plots.heatmap), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##heatmap#356")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:aspect_ratio,), Tuple{Int64}}}, typeof(Plots.heatmap), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}, typeof(RecipesBase.plot), Array{String, 1}, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:aspect_ratio, :seriestype), Tuple{Int64, Symbol}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{String, 1}, Array{String, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{String, 1}, Array{String, 1}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{String, 1}, Array{String, 1}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:heatmap}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{String, 1}})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Int64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Plots.heatmap_edges), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.getproperty), RecipesPipeline.Surface{Array{Float64, 2}}, Symbol})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Array{Float64, 2}})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.iterate), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}}, Base.RefValue{String}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.RefValue{String}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.convert_sci_unicode), Tuple{Array{Any, 1}}}, Base.RefValue{String}}}})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.PGFPlotsXBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Plots.single_color), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, String}})
precompile(Tuple{typeof(Plots.surface_to_vecs), Array{Float64, 1}, Array{Float64, 1}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Plots.SegmentsIterator})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Plots.SegmentsIterator}, Tuple{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:heatmap}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Options, Base.Pair{String, Nothing}, Base.Pair{String, Int64}, Base.Pair{String, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Table}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Table#45")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{PGFPlotsX.Table}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{PGFPlotsX.Table}, PGFPlotsX.Options, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##Table#44")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{PGFPlotsX.Table}, PGFPlotsX.Options, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{PGFPlotsX.TableData}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(PGFPlotsX, Symbol("##TableData#37")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{PGFPlotsX.TableData}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{PGFPlotsX.TableData}, Array{Float64, 2}, Nothing, Int64, Bool})
precompile(Tuple{typeof(PGFPlotsX.Plot3), PGFPlotsX.Options, PGFPlotsX.Table})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Plots.SegmentsIterator}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#15#49")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:aspect_ratio,), Tuple{Int64}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{getfield(Plots, Symbol("#wireframe##kw")), NamedTuple{(:aspect_ratio,), Tuple{Int64}}, typeof(Plots.wireframe), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##wireframe#382")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:aspect_ratio,), Tuple{Int64}}}, typeof(Plots.wireframe), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:wireframe}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Base.Colon, Int64, Float64, Int64})
precompile(Tuple{typeof(Base.length), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.repeat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#f#51"))}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#f#51"))}}})
precompile(Tuple{typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##contour#374")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:contour}}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{Type{NamedTuple{(:fill,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Plots, Symbol("#contour##kw")), NamedTuple{(:fill,), Tuple{Bool}}, typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##contour#374")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:fill,), Tuple{Bool}}}, typeof(Plots.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:fill, :seriestype), Tuple{Bool, Symbol}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:fill, :seriestype), Tuple{Bool, Symbol}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:fill, :seriestype), Tuple{Bool, Symbol}}}})
precompile(Tuple{typeof(Plots.processFillArg), Base.Dict{Symbol, Any}, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#f#51"))}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, getfield(Main, Symbol("#f#51")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Plots.layout_args), Int64, Int64})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol, Plots.PGFPlotsXPlot})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.PGFPlotsXPlot})
precompile(Tuple{typeof(Base._copyto_impl!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.in), Plots.Subplot{Plots.PGFPlotsXBackend}, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Plots._slice_series_args!), RecipesPipeline.DefaultsDict, Plots.Plot{Plots.PGFPlotsXBackend}, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.PGFPlotsXBackend}, Bool})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Float64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.sin), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}}}})
precompile(Tuple{Type{NamedTuple{(:line_z, :linewidth, :legend), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:line_z, :linewidth, :legend), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line_z, :linewidth, :legend), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64, Bool}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:categorical,), Tuple{Nothing}}}, Type{NamedTuple{(:alpha,), Tuple{Nothing}}}})
precompile(Tuple{getfield(PlotUtils, Symbol("#cgrad##kw")), NamedTuple{(:alpha,), Tuple{Nothing}}, typeof(PlotUtils.cgrad)})
precompile(Tuple{getfield(PlotUtils, Symbol("#cgrad##kw")), NamedTuple{(:alpha,), Tuple{Nothing}}, typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGBA{Float64}, 1}, String, String}, Int64})
precompile(Tuple{Type{NamedTuple{(:marker_z, :color, :legend), T} where T<:Tuple}, Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:marker_z, :color, :legend), Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter##kw")), NamedTuple{(:marker_z, :color, :legend), Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#338")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend), Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool}}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{getfield(Main, Symbol("#17#52")), Symbol, Bool, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#17#52"))}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){getfield(Main, Symbol("#17#52"))}}})
precompile(Tuple{typeof(Base.length), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{typeof(PlotUtils.cgrad), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}, Int64})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.fill), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.hcat), String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.permutedims), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks), T} where T<:Tuple}, Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter##kw")), NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}}}, typeof(Plots.scatter), Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#338")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}}}}, typeof(Plots.scatter), Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks, :seriestype), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}, Symbol}}, typeof(RecipesBase.plot), Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:framestyle, :title, :color, :layout, :label, :markerstrokewidth, :ticks, :seriestype), Tuple{Array{Symbol, 2}, Array{String, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64, String, Int64, Base.UnitRange{Int64}, Symbol}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Array{Symbol, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Number}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, AbstractString}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:ticks,), T} where T<:Tuple}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:ticks,), Tuple{Base.UnitRange{Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.:(==)), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.isempty), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}})
precompile(Tuple{typeof(Plots.slice_arg), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Int64})
precompile(Tuple{typeof(Plots.get_series_color), Int64, Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.cos), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{Type{NamedTuple{(:quiver, :arrow), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:quiver, :arrow), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:quiver, :arrow), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}, Bool}}}, typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Arrow, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Arrow, Bool})
precompile(Tuple{typeof(Base.in), Plots.Arrow, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Arrow})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.text), String, Symbol})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{Type{NamedTuple{(:annotations, :leg), T} where T<:Tuple}, Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:annotations, :leg), Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:annotations, :leg), Tuple{Tuple{Int64, Float64, Plots.PlotText}, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64, Plots.PlotText}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Float64, Plots.PlotText}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Float64, Plots.PlotText}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Tuple{Int64, Float64, Plots.PlotText}})
precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Array{Any, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_indices), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{typeof(Base.iterate), Base.OneTo{Int64}, Int64})
precompile(Tuple{typeof(Plots.locate_annotation), Plots.Subplot{Plots.PGFPlotsXBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{typeof(Plots.pgfx_add_annotation!), PGFPlotsX.Axis, Int64, Float64, Plots.PlotText, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{Float16}, FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Float16})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Float16, String})
precompile(Tuple{typeof(Base.promote_typeof), String, PGFPlotsX.Options, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, PGFPlotsX.Options, String}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#18#53")), Array{Any, 1}})
precompile(Tuple{typeof(Base.Filesystem.mktempdir), Function})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#20")), String, typeof(Base.Filesystem.mktempdir), getfield(Main, Symbol("#19#54")), String})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#20#55")){String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Plots.savefig), Plots.Plot{Plots.PGFPlotsXBackend}, String})
precompile(Tuple{typeof(Plots.tex), Plots.Plot{Plots.PGFPlotsXBackend}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, 2}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.leftpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{RecipesBase.AbstractLayout, 2}, Int64, Base.Slice{Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.toppad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.rightpad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots.bottompad), Array{RecipesBase.AbstractLayout, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 1}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 1}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 1}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.leftpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.toppad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.rightpad)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base._similar_for), Array{RecipesBase.AbstractLayout, 2}, Type{Measures.Length{:mm, Float64}}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots.bottompad)}, Int64})
precompile(Tuple{getfield(Base, Symbol("#maximum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.maximum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{getfield(Base, Symbol("##mapfoldl#204")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapfoldl), Function, Function, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.min), NamedTuple{(), Tuple{}}, Base.SubArray{Measures.Length{:mm, Float64}, 2, Array{Measures.Length{:mm, Float64}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, false}})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Measures.Length{:mm, Float64}, 2}, Int64, Measures.Length{:mm, Float64}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.mapreducedim!), Function, Function, Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.max), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{Measures.Length{:mm, Float64}, 2}, Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Base.sum), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(-)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.:(/)), Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{typeof(Base.:(*)), Measures.Length{:mm, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.PGFPlotsXBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), Function, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.PGFPlotsXBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.vect), Measures.Length{:mm, Float64}, Vararg{Measures.Length{:mm, Float64}, N} where N})
precompile(Tuple{Type{NamedTuple{(:include_preamble,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#print_tex##kw")), NamedTuple{(:include_preamble,), Tuple{Bool}}, typeof(PGFPlotsX.print_tex), Base.IOStream, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.IOStream, PGFPlotsX.TikzPicture, PGFPlotsX.TikzDocument})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, String})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOStream, Float64})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, Float64})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.IOStream, PGFPlotsX.Axis, PGFPlotsX.TikzPicture})
precompile(Tuple{typeof(Base.print), Base.IOStream, String, String, Vararg{String, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, PGFPlotsX.Options, Nothing})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#replace_underline#9")), PGFPlotsX.Options})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.IOStream, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Plot, PGFPlotsX.Axis})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(PGFPlotsX.print_indent), getfield(PGFPlotsX, Symbol("#49#50")){PGFPlotsX.Coordinates{2}, Array{Any, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, PGFPlotsX.Coordinate{2}, PGFPlotsX.Coordinates{2}})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Int64, Float64}, PGFPlotsX.Coordinate{2}})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, PGFPlotsX.Coordinate{2}}, 1}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PGFPlotsX, Symbol("#10#11")), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PGFPlotsX, Symbol("#10#11")), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}, PGFPlotsX.Axis})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#14#15")){Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(PGFPlotsX, Symbol("#14#15")){Base.GenericIOBuffer{Array{UInt8, 1}}}, PGFPlotsX.Options})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(PGFPlotsX.print_opt), Base.GenericIOBuffer{Array{UInt8, 1}}, Float16})
precompile(Tuple{typeof(Base.print), Base.IOStream, Char})
precompile(Tuple{typeof(Plots.text), String, Int64, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##text#87")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.text), String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.font), Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots.text), String, Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##text#87")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.text), String, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.font), Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Float64, Plots.PlotText}, Vararg{Tuple{Int64, Float64, Plots.PlotText}, N} where N})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.annotate!), Array{Tuple{Int64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Tuple{Symbol}, NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Int64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Tuple{Int64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#24#59")), Array{Any, 1}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#20")), String, typeof(Base.Filesystem.mktempdir), getfield(Main, Symbol("#25#60")), String})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#26#61")){String}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, String, String, String, String, Plots.PlotText}})
precompile(Tuple{Type{NamedTuple{(:marker, :series_annotations), T} where T<:Tuple}, Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:marker, :series_annotations), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:marker, :series_annotations), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}, typeof(Plots.scatter!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter!#339")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:marker, :series_annotations), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}}}}, typeof(Plots.scatter!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}, typeof(RecipesBase.plot!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}, typeof(RecipesBase.plot!), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64, Symbol}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Float64, Symbol}})
precompile(Tuple{typeof(Plots.wraptuple), Array{Any, 1}})
precompile(Tuple{typeof(Plots.series_annotations), Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Plots.SeriesAnnotations})
precompile(Tuple{typeof(Plots.series_annotations), Plots.SeriesAnnotations})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.SeriesAnnotations})
precompile(Tuple{typeof(Base.getproperty), Plots.SeriesAnnotations, Symbol})
precompile(Tuple{typeof(Base.collect), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.iter_segments), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:scatter}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Plots._cycle), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{Type{Plots.PlotText}, String, Plots.Font})
precompile(Tuple{typeof(Plots.pgfx_add_annotation!), PGFPlotsX.Axis, Float64, Float64, Plots.PlotText, Int64})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#30#65")), Array{Any, 1}})
precompile(Tuple{getfield(Base.Filesystem, Symbol("##mktempdir#20")), String, typeof(Base.Filesystem.mktempdir), getfield(Main, Symbol("#31#66")){Plots.Plot{Plots.PGFPlotsXBackend}}, String})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#32#67")){String, Plots.Plot{Plots.PGFPlotsXBackend}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(PGFPlotsX.print_tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Float64, Float64}, PGFPlotsX.Coordinate{2}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.hcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.fill), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 2}, Function, Int64})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:ribbon,), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Symbol}, NamedTuple{(:ribbon,), Tuple{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Int64, 1}, Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Int64})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.first), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(-)), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Plots, Symbol("#11#12")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.pgfx_fillrange_series!), PGFPlotsX.Axis, Plots.Series, Type{T} where T, Int64, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.pgfx_fillrange_args), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Type{PGFPlotsX.Coordinate{2}}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PGFPlotsX.Coordinate{2}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(PGFPlotsX.coordinate_or_nothing), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(tuple), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(PGFPlotsX.expand_errors), Tuple{Base.RefValue{Nothing}, Base.RefValue{Nothing}}}, Base.RefValue{Nothing}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#36#71")), Array{Any, 1}})
precompile(Tuple{Type{NamedTuple{(:test,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:test,), Tuple{String}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Plots.Plot{Plots.PGFPlotsXBackend}, Int64})
precompile(Tuple{typeof(Base.getindex), Plots.Subplot{Plots.PGFPlotsXBackend}, Int64})
precompile(Tuple{Type{NamedTuple{(:test, :extra_kwargs), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Symbol}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:test, :extra_kwargs), Tuple{String, Symbol}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), Plots.Subplot{Plots.PGFPlotsXBackend}, Symbol})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Dict{Symbol, String}}, Vararg{Base.Pair{Symbol, Base.Dict{Symbol, String}}, N} where N})
precompile(Tuple{Type{NamedTuple{(:extra_kwargs,), T} where T<:Tuple}, Tuple{Base.Dict{Symbol, Base.Dict{Symbol, String}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:extra_kwargs,), Tuple{Base.Dict{Symbol, Base.Dict{Symbol, String}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, Base.Dict{Symbol, String}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Symbol, Base.Dict{Symbol, String}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Base.Dict{Symbol, String}}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, String}, Symbol})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, String}, Symbol})
precompile(Tuple{Type{NamedTuple{(:title,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{String, String}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{Symbol, Base.Dict{String, String}}})
precompile(Tuple{Type{NamedTuple{(:title, :extra_kwargs), T} where T<:Tuple}, Tuple{String, Base.Dict{Symbol, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Symbol, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:title, :extra_kwargs), Tuple{String, Base.Dict{Symbol, Base.Dict{String, String}}}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Base.Dict{Symbol, Base.Dict{String, String}}, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter##kw")), NamedTuple{(:title, :extra_kwargs), Tuple{String, Base.Dict{Symbol, Base.Dict{String, String}}}}, typeof(Plots.scatter), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Base.Dict{String, String}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, Base.Dict{String, String}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Symbol, Base.Dict{String, String}}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Base.Dict{String, String}}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Subplot{Plots.PGFPlotsXBackend}, Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{String, String}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.Dict{Symbol, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, String}, Symbol})
precompile(Tuple{typeof(Plots.pgfx_split_extra_opts), Base.Dict{String, String}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:scatter}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.OneTo{Int64}, Base.UnitRange{Int64}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{Type{NamedTuple{(:add, :extra_kwargs), T} where T<:Tuple}, Tuple{String, Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:add, :extra_kwargs), Tuple{String, Symbol}}, typeof(RecipesBase.plot), Function, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:add, :extra_kwargs), Tuple{String, Symbol}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(Main, Symbol("#72#75")), Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, getfield(Main, Symbol("#72#75")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Function, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{getfield(Main, Symbol("#72#75"))}, getfield(Main, Symbol("#72#75"))})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, RecipesBase.RecipeData, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.PGFPlotsXBackend}, Base.Dict{Symbol, Any}, Symbol, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.UnitRange{Int64}, Function, Nothing})
precompile(Tuple{typeof(Base.vect), getfield(Main, Symbol("#72#75"))})
precompile(Tuple{typeof(Base.getindex), Array{getfield(Main, Symbol("#72#75")), 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.UnitRange{Int64}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#72#75")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#72#75"))}})
precompile(Tuple{typeof(RecipesPipeline._nobigs), Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{Symbol, Any}, Base.Dict{Symbol, String}})
precompile(Tuple{typeof(Base.push!), PGFPlotsX.Axis, String})
precompile(Tuple{typeof(Plots.iter_segments), Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}, Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}})
precompile(Tuple{typeof(Plots.pgfx_series_coordinates!), Base.Val{:path}, PGFPlotsX.Options, RecipesPipeline.DefaultsDict, Base.Generator{Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Tuple{Base.UnitRange{Int64}, Array{Int64, 1}}, getfield(Plots, Symbol("#478#479")){Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{Type{PGFPlotsX.Coordinates{N} where N}, Base.UnitRange{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#73#76")), Array{Any, 1}})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Plot{Plots.PGFPlotsXBackend}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#74#77")), Array{Any, 1}})
precompile(Tuple{typeof(Main.reference_dir)})
precompile(Tuple{typeof(Base.Filesystem.isdir), String})
precompile(Tuple{typeof(Random.seed!), Int64})
precompile(Tuple{Type{NamedTuple{(:show, :reuse), T} where T<:Tuple}, Tuple{Bool, Bool}})
precompile(Tuple{getfield(Plots, Symbol("#default##kw")), NamedTuple{(:show, :reuse), Tuple{Bool, Bool}}, typeof(Plots.default)})
precompile(Tuple{typeof(Plots.default), Symbol, Bool})
precompile(Tuple{typeof(Main.is_ci)})
precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Array{Int64, 1}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:tol, :skip), T} where T<:Tuple}, Tuple{Float64, Array{Int64, 1}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Float64, String}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:popup,), Tuple{Bool}}}, Type{NamedTuple{(:sigma, :tol, :newfn), Tuple{Array{Int64, 1}, Float64, String}}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Int64, 1}, Float64}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{3}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#62")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{3, 3}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{9}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#64")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3}}})
precompile(Tuple{getfield(Gtk.GLib, Symbol("##s16#1")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{WeakRef, Gtk.GLib.GObject}}})
precompile(Tuple{getfield(Main, Symbol("#image_comparison_facts##kw")), NamedTuple{(:tol, :skip), Tuple{Float64, Array{Int64, 1}}}, typeof(Main.image_comparison_facts), Symbol})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, PlotThemes.PlotTheme}, Symbol})
precompile(Tuple{typeof(Plots._backend_instance), Symbol})
precompile(Tuple{typeof(Plots.backend), Plots.GRBackend})
precompile(Tuple{typeof(Plots.default), Symbol, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Main, Symbol("#79#80")){Plots.PlotExample}, String, Int64})
precompile(Tuple{typeof(Base.in), Expr, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.pushfirst!), Array{Any, 1}, Expr})
precompile(Tuple{Type{StableRNGs.LehmerRNG}, Int64})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Plots.png), Plots.Plot{Plots.GRBackend}, String})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation), Tuple{Symbol, Symbol, Int64}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_thickness_scaling), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.get_size), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_size), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.maximum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(GR.setcharheight), Float64})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(GR.latin1), String})
precompile(Tuple{typeof(Base.:(*)), Int64, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Length{:mm, Float64}, 1}, Measures.Length{:mm, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Measures.Length{:mm, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Int64, Base.Broadcast.Extruded{Array{Measures.Length{:mm, Float64}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Measures.Length{:mm, Float64}}})
precompile(Tuple{Type{Tuple}, Array{Measures.Length{:mm, Float64}, 1}})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(GR.inqdspsize)})
precompile(Tuple{typeof(Base.float), Int64})
precompile(Tuple{typeof(GR.setwsviewport), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(GR.setwswindow), Int64, Int64, Int64, Float64})
precompile(Tuple{typeof(Plots.gr_fill_viewport), Array{Float64, 1}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(GR.fillrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.gr_display), Plots.Subplot{Plots.GRBackend}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_viewport_from_bbox), Plots.Subplot{Plots.GRBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(GR.setviewport), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(&)), Int64, Int64})
precompile(Tuple{typeof(GR.tick), Float64, Float64})
precompile(Tuple{typeof(GR.setwindow), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Int64})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.max), Int64, Float64})
precompile(Tuple{typeof(GR.setlinewidth), Float64})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, String}, Int64, Int64})
precompile(Tuple{typeof(GR.wctondc), Float64, Float64})
precompile(Tuple{typeof(Plots.gr_tick_label), Plots.Axis, String})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.get_clims), Plots.Subplot{Plots.GRBackend}, Plots.Series, Function})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_fillcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Nothing})
precompile(Tuple{Type{NamedTuple{(:arrowside, :arrowstyle), T} where T<:Tuple}, Tuple{Symbol, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_legend_pos), Plots.Subplot{Plots.GRBackend}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.drawrect), Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.get_linecolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_line), Float64, Symbol, ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(GR.polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkMessageDialogLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkMessageDialogLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkFrameLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkFrameLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkWindowLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkWindowLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkLabelLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkLabelLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkBoxLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkBoxLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref_weak), Gtk.GtkImageLeaf})
precompile(Tuple{typeof(Gtk.GLib.gc_unref), Gtk.GtkImageLeaf})
precompile(Tuple{getfield(VisualRegressionTests, Symbol("#test_images##kw")), NamedTuple{(:popup, :sigma, :tol, :newfn), Tuple{Bool, Array{Int64, 1}, Float64, String}}, typeof(VisualRegressionTests.test_images), String, String})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{typeof(FileIO.iter_eq), Array{UInt8, 1}, Tuple{UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8}})
precompile(Tuple{Type{FileIO.Stream{FileIO.DataFormat{:PNG}, Base.IOStream}}, Base.IOStream, String})
precompile(Tuple{typeof(FileIO.file!), FileIO.Stream{FileIO.DataFormat{:PNG}, Base.IOStream}})
precompile(Tuple{getfield(FileIO, Symbol("##load#27")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(FileIO.load), FileIO.Formatted{F} where F<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{typeof(Base.Filesystem.isfile), String})
precompile(Tuple{typeof(FileIO.applicable_loaders), FileIO.File{FileIO.DataFormat{:PNG}}})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{#s21} where #s21<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{getfield(ImageMagick, Symbol("##load#29")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(ImageMagick.load), FileIO.File{#s21} where #s21<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{typeof(ImageMagick.load_), String})
precompile(Tuple{getfield(ImageMagick, Symbol("##load_#36")), Type{T} where T, String, Nothing, Bool, typeof(ImageMagick.load_), String, Bool})
precompile(Tuple{Type{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), AbstractArray{#s20, N} where N where #s20<:Union{Bool, Unsigned}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(ImageMagick.getsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(ImageMagick.colorsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(Base.similar), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.pointer), Array{UInt8, 3}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Ptr{UInt8}})
precompile(Tuple{typeof(Base.:(*)), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.:(+)), Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{UInt8, 3}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Array{UInt8, 3}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Array{UInt8, 3}}}})
precompile(Tuple{typeof(ImageMagick.default_orientation), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Bool})
precompile(Tuple{typeof(Base.__cat), Array{Int64, 1}, Tuple{Int64}, Tuple{Bool}, Int64, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{T, N, perm, iperm, AA} where AA<:(AbstractArray{T, N} where N where T) where iperm where perm where N where T}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(VisualRegressionTests.blurdiff), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(ImageMagick.free), ImageMagick.MagickWand})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{2}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{3, 3}}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#242")), Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#243#244")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("#243#244")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64, Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Vararg{Int64, N} where N}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64, Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{Tuple{Vararg{Int64, N} where N}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Vararg{Int64, N} where N}, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Union{StaticArrays.Dynamic, Int64}}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Union{StaticArrays.Dynamic, Int64}, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, StaticArrays.Dynamic, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{StaticArrays.Dynamic, Int64}, 1}, Int64, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#245")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.findfirst), getfield(StaticArrays, Symbol("#246#250")), Tuple{DataType, DataType}})
precompile(Tuple{getfield(StaticArrays, Symbol("#246#250")), Type{T} where T})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#248#252")), Core.SimpleVector})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}})
precompile(Tuple{getfield(StaticArrays, Symbol("#248#252")), Type{T} where T})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64, Int64}, 1}, Tuple{Int64, Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{2}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64, Int64}, Base.IteratorsMD.CartesianIndex{2}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 2}, Expr, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#270")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#271#273")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#271#273"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#272#274")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#272#274")){Int64}}})
precompile(Tuple{typeof(ImageFiltering.KernelFactors.IIRGaussian), Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("##s826#436")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#481")), Any, Any, Any, Any, Any, Type{T} where T, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#482#486")){Tuple{Int64, Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#482#486")){Tuple{Int64, Int64}}}})
precompile(Tuple{Type{Base.Broadcast.BroadcastStyle}, Base.Broadcast.DefaultArrayStyle{0}, StaticArrays.StaticArrayStyle{1}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Int64}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#243#244"))}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Int64}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Int64}, 1}, Tuple{}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Int64}, 1}, Tuple{Int64}, Base.Generator{Core.SimpleVector, getfield(StaticArrays, Symbol("#248#252"))}, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Int64}})
precompile(Tuple{typeof(Base.similar), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Type{Expr}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#249#253")){Tuple{DataType, DataType}, Array{Tuple{Vararg{Int64, N} where N}, 1}, Base.IteratorsMD.CartesianIndex{1}}}})
precompile(Tuple{typeof(StaticArrays.broadcasted_index), Tuple{Int64}, Base.IteratorsMD.CartesianIndex{1}})
precompile(Tuple{typeof(Base.getindex), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}}, Tuple{Int64, Base.IteratorsMD.CartesianIndex{1}}})
precompile(Tuple{typeof(ImageFiltering.imfilter), Type{ColorTypes.RGB{Float64}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 0, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}, ImageFiltering.KernelFactors.ReshapedOneD{Float64, 2, 1, ImageFiltering.KernelFactors.TriggsSdika{Float64, 3, 3, 9}}}, ImageFiltering.NA{typeof(Base.isnan)()}})
precompile(Tuple{typeof(VisualRegressionTests.sad), Array{ColorTypes.RGB{Float64}, 2}, Array{ColorTypes.RGB{Float64}, 2}})
precompile(Tuple{typeof(Base.max), Float32, Float32})
precompile(Tuple{typeof(Base.:(/)), Float64, Float32})
precompile(Tuple{typeof(Base.setproperty!), VisualRegressionTests.VisualTestResult, Symbol, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.sin), typeof(Base.cos)}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Function, 1}})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.sin)}, typeof(Base.sin)})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Function, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Function, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{typeof(Base.vect), typeof(Base.sin)})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Function, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vect), typeof(Base.cos)})
precompile(Tuple{typeof(Base.vcat), Array{typeof(Base.sin), 1}, Array{typeof(Base.cos), 1}})
precompile(Tuple{typeof(Base.length), Array{Function, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Function, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Array{Float64, 1}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sin), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.sin)}})
precompile(Tuple{typeof(RecipesPipeline._nobigs), Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.cos), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.cos)}})
precompile(Tuple{typeof(Base.push!), Plots.Plot{Plots.GRBackend}, Float64, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Plots.Series, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Plots.Series, 1}, Int64})
precompile(Tuple{typeof(Base.copy), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Plots.Series, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Plots.extend_by_data!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Plots.frame), Plots.Animation, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:line, :leg, :fill), T} where T<:Tuple}, Tuple{Int64, Bool, Tuple{Int64, Symbol}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:line, :leg, :fill), Tuple{Int64, Bool, Tuple{Int64, Symbol}}}, typeof(RecipesBase.plot), Function, Function, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :leg, :fill), Tuple{Int64, Bool, Tuple{Int64, Symbol}}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :leg, :fill), Tuple{Int64, Bool, Tuple{Int64, Symbol}}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.sin), getfield(Main, Symbol("#82#83")), Int64, Float64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.sin), getfield(Main, Symbol("#82#83")), Int64, Float64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.sin), getfield(Main, Symbol("#82#83")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.get_series_color), ColorTypes.RGBA{Float64}, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#11#12")){Array{Float64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots._cycle), Int64, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(GR.fillarea), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.rand), StableRNGs.LehmerRNG, Int64})
precompile(Tuple{typeof(Base.rand), StableRNGs.LehmerRNG, Int64, Int64})
precompile(Tuple{typeof(PlotUtils.cgrad), Symbol})
precompile(Tuple{Type{NamedTuple{(:lab, :w, :palette, :fill, :α), T} where T<:Tuple}, Tuple{String, Int64, PlotUtils.ContinuousColorGradient, Int64, Float64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, PlotUtils.ContinuousColorGradient, Int64, Float64}}, typeof(RecipesBase.plot), Base.StepRange{Int64, Int64}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:lab, :w, :palette, :fill, :α), Tuple{String, Int64, PlotUtils.ContinuousColorGradient, Int64, Float64}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRange{Int64, Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Base.StepRange{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ContinuousColorGradient, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{ColorTypes.RGBA{Float64}}, Base.Generator{Array{Float64, 1}, getfield(PlotUtils, Symbol("#6#7")){PlotUtils.ContinuousColorGradient}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{Float64, 1}, getfield(PlotUtils, Symbol("#6#7")){PlotUtils.ContinuousColorGradient}}, Int64})
precompile(Tuple{typeof(PlotUtils.palette), Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:zcolor, :m, :ms, :lab), T} where T<:Tuple}, Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:zcolor, :m, :ms, :lab), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:zcolor, :m, :ms, :lab), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String}}, typeof(Plots.scatter!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:zcolor, :m, :ms, :lab, :seriestype), Tuple{Array{Float64, 1}, Tuple{Symbol, Float64, Plots.Stroke}, Array{Float64, 1}, String, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.get_series_color), PlotUtils.ContinuousColorGradient, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGBA{Float64}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Int64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(/)), Bool, Int64})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGBA{Float64}, Float64, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGBA{Float64}, Float64})
precompile(Tuple{typeof(Plots._cycle), Base.StepRange{Int64, Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#11#12")){Base.StepRange{Int64, Int64}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(GR.fillarea), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.StepRange{Int64, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Base.StepRange{Int64, Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_set_gradient), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(GR.setcolorrep), Int64, Float64, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Int64, Float64, Tuple{Float64, Float64}, Int64, Float64, Int64, Symbol})
precompile(Tuple{typeof(Plots.gr_set_bordercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_markercolor), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), Float64})
precompile(Tuple{typeof(GR.setmarkersize), Float64})
precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Plots.gr_draw_colorbar), Plots.GRColorbar, Plots.Subplot{Plots.GRBackend}, Tuple{Float64, Float64}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_colorgradient), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_colorgradient), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_colorgradient), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_colorgradient), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{PlotUtils.ContinuousColorGradient}})
precompile(Tuple{typeof(Base.setindex!), Array{PlotUtils.ContinuousColorGradient, 1}, PlotUtils.ContinuousColorGradient, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PlotUtils.ContinuousColorGradient, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_colorgradient), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{PlotUtils.ContinuousColorGradient, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_fillalpha), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Nothing, 1}, Nothing, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_fillalpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Nothing, 1}, String})
precompile(Tuple{typeof(GR.cellarray), Float64, Float64, Float64, Float64, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Float64, Float64, Int64, Int64, Float64})
precompile(Tuple{typeof(Plots.get_fillcolor), Plots.Series, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_set_fill), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, Function})
precompile(Tuple{getfield(Plots, Symbol("##gr_polyline#333")), Symbol, Symbol, typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}, typeof(GR.fillarea)})
precompile(Tuple{typeof(Base.first), Array{Float64, 1}})
precompile(Tuple{typeof(Base.first), Int64})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Float64, Float64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Float64, Float64, Symbol})
precompile(Tuple{Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Float64, Float64, Float64})
precompile(Tuple{Type{NamedTuple{(:xaxis, :background_color, :leg), T} where T<:Tuple}, Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:xaxis, :background_color, :leg), Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:xaxis, :background_color, :leg), Tuple{Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, ColorTypes.RGB{Float64}, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{Float64}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{String, Tuple{Int64, Int64}, Base.StepRange{Int64, Int64}, Symbol}})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.hash), Base.StepRange{Int64, Int64}, UInt64})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{Float64}, Symbol})
precompile(Tuple{typeof(Plots.slice_arg), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims, :flip, :ticks, :guide), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:lims, :flip, :ticks, :guide), Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:lims, :flip, :ticks, :guide), Tuple{Tuple{Int64, Int64}, Bool, Base.StepRange{Int64, Int64}, String}}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{getfield(Statistics, Symbol("#mean##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Statistics.mean), Array{Float64, 2}})
precompile(Tuple{typeof(Base.:(+)), Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:line,), T} where T<:Tuple}, Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:line,), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#hline!##kw")), NamedTuple{(:line,), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}}}, typeof(Plots.hline!), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:line, :seriestype), Tuple{Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Symbol, Float64, Array{Symbol, 2}}})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Float64})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base._all), getfield(Plots, Symbol("#54#55")), Array{Symbol, 2}, Base.Colon})
precompile(Tuple{typeof(Base._all), getfield(Plots, Symbol("#56#57")), Array{Symbol, 2}, Base.Colon})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 2}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:hline}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.isempty), Array{ColorTypes.RGBA{Float64}, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{ColorTypes.RGBA{Float64}, 2}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:hline}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.repeat), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.vline!), Array{Int64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot!), Array{Int64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:vline}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:formatter,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:formatter,), Tuple{Symbol}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:vline}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:title,), Tuple{String}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.title!), String})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:title,), Tuple{String}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.yaxis!), String, Symbol})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Tuple{String, Symbol}, Tuple{Symbol}, NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}}, typeof(RecipesBase.plot!)})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:yaxis,), Tuple{Tuple{String, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{String, Symbol}})
precompile(Tuple{Type{NamedTuple{(:scale, :guide), T} where T<:Tuple}, Tuple{Symbol, String}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:scale, :guide), Tuple{Symbol, String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:scale, :guide), Tuple{Symbol, String}}}})
precompile(Tuple{typeof(Plots.gr_text_size), String})
precompile(Tuple{typeof(Plots._transform_ticks), Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.in), Base.StepRange{Int64, Int64}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Int64, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#100#102")){Int64, Int64}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Array{Int64, 1}, Type{Float64}, Base.Generator{Array{Int64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Int64, 1}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.log10), Float64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#94#97")), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(Plots, Symbol("#94#97"))}})
precompile(Tuple{typeof(GR.tick), Int64, Int64})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(GR.wctondc), Int64, Float64})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{typeof(Plots.gr_axis_height), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.gr_axis_width), Plots.Subplot{Plots.GRBackend}, Plots.Axis})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Tuple{Float64, Float64}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.fill), Float64, Int64})
precompile(Tuple{typeof(Plots.straightline_data), Tuple{Float64, Float64}, Tuple{Float64, Float64}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.download), String})
precompile(Tuple{typeof(Base.setup_stdio), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Base.setproperty!), Base.Process, Symbol, Base.DevNull})
precompile(Tuple{typeof(Base.success), Base.Process})
precompile(Tuple{getfield(Base, Symbol("#589#590")){Base.PipeEndpoint, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(FileIO.load), String})
precompile(Tuple{Type{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(ImageCore.channelview), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(ImageCore.rawview), Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}})
precompile(Tuple{typeof(ImageMagick.getsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(ImageMagick.colorsize), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, String})
precompile(Tuple{typeof(Base.similar), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), MappedArrays.MappedArray{UInt8, 3, Base.ReinterpretArray{FixedPointNumbers.Normed{UInt8, 8}, 3, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 3}}, typeof(Base.reinterpret), getfield(ImageCore, Symbol("#35#36")){FixedPointNumbers.Normed{UInt8, 8}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3}, Nothing, typeof(Base.identity), Tuple{Array{UInt8, 3}}}})
precompile(Tuple{typeof(ImageMagick.default_orientation), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Bool})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.collect), Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(RecipesBase.plot), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, RecipesPipeline.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:image}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{NamedTuple{(:flip,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:flip,), Tuple{Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Base.OneTo{Int64}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.min), Int64, Float64})
precompile(Tuple{typeof(Base.setproperty!), Plots.Extrema, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, RecipesPipeline.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.size), RecipesPipeline.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.OneTo{Int64}, Symbol, Base.OneTo{Int64}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._collect), Base.OneTo{Int64}, Base.Generator{Base.OneTo{Int64}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Base.OneTo{Int64}, Type{Float64}, Base.Generator{Base.OneTo{Int64}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.OneTo{Int64}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.getproperty), RecipesPipeline.Surface{Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}, Symbol})
precompile(Tuple{getfield(Base, Symbol("##s826#449")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Plots.transpose_z), Plots.Series, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Bool})
precompile(Tuple{typeof(Base.vec), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.adjoint), Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.size), LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_color), Tuple{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Plots.gr_color), Tuple{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{LinearAlgebra.Adjoint{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}}})
precompile(Tuple{typeof(GR.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Array{UInt32, 2}})
precompile(Tuple{typeof(Base.getindex), Type{Array{T, 1} where T}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.hcat), Symbol, Symbol})
precompile(Tuple{Type{NamedTuple{(:color, :line, :marker), T} where T<:Tuple}, Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:color, :line, :marker), Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}}, typeof(RecipesBase.plot), Array{Array{T, 1} where T, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:color, :line, :marker), Tuple{Array{Symbol, 2}, Tuple{Symbol, Int64}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Int64}})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Array{Symbol, 2}, Int64, Float64, Plots.Stroke}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Array{Symbol, 2}})
precompile(Tuple{typeof(Base._all), getfield(Plots, Symbol("#58#60")), Array{Symbol, 2}, Base.Colon})
precompile(Tuple{typeof(Plots._replace_markershape), Array{Symbol, 2}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 2}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Array{T, 1} where T, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Array{Float64, 1}}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{DataType, Nothing, Array{Array{T, 1} where T, 1}, Nothing}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{T, 1} where T}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Array{T, 1} where T, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Array{T, 1} where T, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{T, 1} where T, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Array{T, 1} where T, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.OneTo{Int64}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Int64, Float64, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:path}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._cycle), Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Int64, 1}, Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#11#12")){Base.OneTo{Int64}}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(GR.polyline), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:markersize, :c), Tuple{Int64, Symbol}}, typeof(Plots.scatter!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}}, typeof(RecipesBase.plot!), Array{Float64, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:markersize, :c, :seriestype), Tuple{Int64, Symbol, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.randn), StableRNGs.LehmerRNG, Int64})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram2d}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.size), RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.transpose_z), Plots.Series, Array{Float64, 2}, Bool})
precompile(Tuple{typeof(Base.vec), Array{Float64, 2}})
precompile(Tuple{typeof(Plots._as_gradient), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(GR.setspace), Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Plots.is_uniformly_spaced), Array{Float64, 1}})
precompile(Tuple{typeof(Statistics._mean), typeof(Base.identity), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{ColorTypes.RGBA{Float64}, 1}, Nothing})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PlotUtils.plot_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}, Base.RefValue{Nothing}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(PlotUtils.plot_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}, Base.RefValue{Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_color), Tuple{Array{ColorTypes.RGBA{Float64}, 1}}}})
precompile(Tuple{typeof(Base.last), Array{Float64, 1}})
precompile(Tuple{typeof(GR.drawimage), Float64, Float64, Float64, Float64, Int64, Int64, Array{UInt32, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Array{T, 1} where T}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Array{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.sort), Array{Float64, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Array{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:line, :lab, :ms), T} where T<:Tuple}, Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:line, :lab, :ms), Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}}, typeof(RecipesBase.plot), Array{Array{T, 1} where T, 1}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :lab, :ms), Tuple{Tuple{Array{Symbol, 2}, Int64}, Array{String, 2}, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Array{Symbol, 2}, Int64}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Array{Symbol, 2}, Int64}})
precompile(Tuple{typeof(Base.in), Array{Symbol, 2}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{T, 1} where T, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.size), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.axes), Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Symbol, 2}, Base.UnitRange{Int64}, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Array{T, 1} where T, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Array{T, 1} where T, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Array{T, 1} where T, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Array{T, 1} where T, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Array{T, 1} where T, 1}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:steppre}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:steppost}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:sticks}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Float64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#84#85")), Array{Symbol, 1}})
precompile(Tuple{typeof(Plots.supported_styles), Plots.GRBackend})
precompile(Tuple{typeof(Base.randn), StableRNGs.LehmerRNG, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#cumsum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cumsum), Array{Float64, 2}})
precompile(Tuple{Type{NamedTuple{(:line, :label, :legendtitle), T} where T<:Tuple}, Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:line, :label, :legendtitle), Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:line, :label, :legendtitle), Tuple{Tuple{Int64, Array{Symbol, 2}}, Array{String, 2}, String}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Array{Symbol, 2}}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, Array{Symbol, 2}}})
precompile(Tuple{typeof(Base.filter), getfield(Main, Symbol("#86#87")), Array{Symbol, 1}})
precompile(Tuple{typeof(Plots.supported_markers), Plots.GRBackend})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#89#90")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(GR.setwindow), Int64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Int64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(GR.wctondc), Float64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Plots.bar), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:bar}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:bar}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, Type{Float64}}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#167#170")){Plots.Axis}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.OneTo{Int64}, getfield(Plots, Symbol("#167#170")){Plots.Axis}}})
precompile(Tuple{typeof(Base.diff), Array{Int64, 1}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#168#171")), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.ignorenan_minimum), Array{Int64, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Int64, Int64, Float64, Float64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_polyline), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:outer,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#repeat##kw")), NamedTuple{(:outer,), Tuple{Int64}}, typeof(Base.repeat), Base.UnitRange{Int64}})
precompile(Tuple{Type{NamedTuple{(:bins, :weights), T} where T<:Tuple}, Tuple{Symbol, Array{Int64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("#histogram##kw")), NamedTuple{(:bins, :weights), Tuple{Symbol, Array{Int64, 1}}}, typeof(Plots.histogram), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:bins, :weights, :seriestype), Tuple{Symbol, Array{Int64, 1}, Symbol}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:histogram}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:barhist}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{NamedTuple{(:normed, :weights), T} where T<:Tuple}, Tuple{Bool, Array{Int64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Bool, Array{Int64, 1}}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.filter!), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#181#182")){Tuple{Array{Float64, 1}}, Symbol}, Tuple{Int64}})
precompile(Tuple{getfield(StatsBase, Symbol("#fit##kw")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, StatsBase.Weights{Int64, Int64, Array{Int64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.float), StatsBase.Histogram{Int64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T})
precompile(Tuple{getfield(LinearAlgebra, Symbol("#normalize!##kw")), NamedTuple{(:mode,), Tuple{Symbol}}, typeof(LinearAlgebra.normalize!), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.getproperty), StatsBase.Histogram{Float64, 1, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:barbins}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:bar}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#167#170")){Plots.Axis}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Float64, 1}, getfield(Plots, Symbol("#167#170")){Plots.Axis}}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("#@layout")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(Plots.create_grid), Expr})
precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Plots.rowsize), Expr})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Int64}, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, typeof(Plots.rowsize)}, Int64})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(Plots, Symbol("#144#145"))}})
precompile(Tuple{getfield(Plots, Symbol("#144#145")), Tuple{Int64, Expr}})
precompile(Tuple{typeof(Base.:(*)), Float64, Measures.Length{:pct, Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(Plots, Symbol("#142#143"))}})
precompile(Tuple{getfield(Plots, Symbol("#142#143")), Tuple{Int64, Symbol}})
precompile(Tuple{getfield(Plots, Symbol("#142#143")), Tuple{Int64, Expr}})
precompile(Tuple{getfield(Plots, Symbol("#144#145")), Tuple{Int64, Symbol}})
precompile(Tuple{Type{NamedTuple{(:label, :width, :height), T} where T<:Tuple}, Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}}, Type{Plots.EmptyLayout}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:label, :width, :height), Tuple{Symbol, Symbol, Measures.Length{:pct, Float64}}}}})
precompile(Tuple{typeof(Base.setindex!), Plots.GridLayout, Plots.EmptyLayout, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:label, :blank), T} where T<:Tuple}, Tuple{Symbol, Bool}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}, Type{Plots.EmptyLayout}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:label, :blank), Tuple{Symbol, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Plots.GridLayout, Plots.GridLayout, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:layout, :t, :leg, :ticks, :border), T} where T<:Tuple}, Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :t, :leg, :ticks, :border), Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :t, :leg, :ticks, :border), Tuple{Plots.GridLayout, Array{Symbol, 2}, Bool, Nothing, Symbol}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.GridLayout, Symbol})
precompile(Tuple{typeof(Plots.layout_args), Plots.GridLayout})
precompile(Tuple{typeof(Base.:(!=)), Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{Measures.Measure, 1}, Measures.Length{:pct, Float64}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:ticks,), Tuple{Nothing}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:line}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{getfield(StatsBase, Symbol("#fit##kw")), NamedTuple{(:closed,), Tuple{Symbol}}, typeof(StatsBase.fit), Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:steppre}}, Base.OneTo{Int64}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{Base.BottomRF{typeof(Base.min)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots.bottom), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.GridLayout, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox!), Plots.GridLayout, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:pct, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Int64})
precompile(Tuple{typeof(Plots.right), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.iter_segments), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}, Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Symbol, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(PlotUtils.cgrad), Tuple{Array{Symbol, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(PlotUtils.cgrad), Tuple{Array{Symbol, 2}}}})
precompile(Tuple{Type{NamedTuple{(:layout, :palette, :bg_inside), T} where T<:Tuple}, Tuple{Int64, Array{PlotUtils.ContinuousColorGradient, 2}, Array{Symbol, 2}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{PlotUtils.ContinuousColorGradient, 2}, Array{Symbol, 2}}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:layout, :palette, :bg_inside), Tuple{Int64, Array{PlotUtils.ContinuousColorGradient, 2}, Array{Symbol, 2}}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{PlotUtils.ContinuousColorGradient, 2}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{PlotUtils.ContinuousColorGradient, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{PlotUtils.ContinuousColorGradient, 2}, Int64})
precompile(Tuple{typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot!), Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 2}})
precompile(Tuple{typeof(Base._array_for), Type{Plots.OHLC{T} where T<:Real}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{Plots.OHLC{T} where T<:Real, 1}, Tuple{Float64, Float64, Float64, Float64}, Int64})
precompile(Tuple{typeof(Plots.ohlc), Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Plots.OHLC{T} where T<:Real, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{getfield(Base, Symbol("##diff#435")), Int64, typeof(Base.diff), Base.OneTo{Int64}})
precompile(Tuple{typeof(Statistics._mean), typeof(Base.identity), Array{Int64, 1}, Base.Colon})
precompile(Tuple{typeof(Plots.get_xy), Plots.OHLC{Float64}, Int64, Float64})
precompile(Tuple{typeof(Base.vect), Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64, Float64, Int64, Int64, Float64, Int64, Float64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Plots.OHLC{T} where T<:Real, 1}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.GRBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:annotation,), Tuple{Array{Tuple{Int64, Float64, Plots.PlotText}, 1}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker, :series_annotations, :seriestype), Tuple{Tuple{Int64, Float64, Symbol}, Array{Any, 1}, Symbol}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.locate_annotation), Plots.Subplot{Plots.GRBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(!=)), Plots.Shape, Symbol})
precompile(Tuple{typeof(Plots._cycle), Plots.Shape, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Float64, Float64, Tuple{Float64, Float64}, Int64, Int64, Int64, Plots.Shape})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Float64}}}}})
precompile(Tuple{typeof(Plots.gr_set_line), Int64, Symbol, ColorTypes.RGBA{Float64}, Plots.Series})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Main.f)}, Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 2}, Array{Float64, 2}}}, getfield(Base, Symbol("#3#4")){typeof(Main.f)}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Main.f)}})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, typeof(Main.f), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:contour}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Base.in), Plots.Subplot{Plots.GRBackend}, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Plots._slice_series_args!), RecipesPipeline.DefaultsDict, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{typeof(Base.permutedims!), Array{Float64, 2}, Array{Float64, 2}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.gr_linetype), Symbol})
precompile(Tuple{typeof(Base.vect), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.in), PlotUtils.ContinuousColorGradient, Tuple{ColorTypes.RGBA{Float64}, Array{ColorTypes.RGBA{Float64}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#range##kw")), NamedTuple{(:stop, :length), Tuple{Float64, Int64}}, typeof(Base.range), Float64})
precompile(Tuple{typeof(Base.:(!=)), PlotUtils.ContinuousColorGradient, PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(GR.contourf), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.contour_levels), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.contour_levels), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.contour_levels), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Type{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.contour_levels), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, String})
precompile(Tuple{typeof(Base._any), typeof(Base.identity), Base.Generator{Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, getfield(Plots, Symbol("#335#336")){Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, Base.Colon})
precompile(Tuple{typeof(Base.:(==)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.getindex), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Int64})
precompile(Tuple{typeof(Base.last), Array{Any, 1}})
precompile(Tuple{typeof(Plots.ignorenan_extrema), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(NaNMath.extrema), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(-)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(*)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(/)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.:(+)), Int64, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
precompile(Tuple{typeof(Base.Iterators.zip), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(GR.contour), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linewidth), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linewidth), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_linewidth), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linewidth), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Int64, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linestyle), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linestyle), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_linestyle), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linestyle), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Plots._cbar_unique), Array{Symbol, 1}, String})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linecolor), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linecolor), Tuple{Array{Any, 1}, Base.RefValue{Tuple{Float64, Float64}}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Type{PlotUtils.ContinuousColorGradient}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{PlotUtils.ContinuousColorGradient, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Tuple{Float64, Float64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.lastindex), PlotUtils.ContinuousColorGradient})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ContinuousColorGradient, Int64})
precompile(Tuple{typeof(Plots.gr_getcolorind), ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_linealpha), Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_linealpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Plots.get_linealpha), Plots.Series})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Nothing}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.get_linealpha), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Int64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:title, :l), T} where T<:Tuple}, Tuple{String, Float64}})
precompile(Tuple{getfield(Plots, Symbol("#pie##kw")), NamedTuple{(:title, :l), Tuple{String, Float64}}, typeof(Plots.pie), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##pie#396")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:title, :l), Tuple{String, Float64}}}, typeof(Plots.pie), Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title, :l, :seriestype), Tuple{String, Float64, Symbol}}, typeof(RecipesBase.plot), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:title, :l, :seriestype), Tuple{String, Float64, Symbol}}}})
precompile(Tuple{typeof(Plots.wraptuple), Float64})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{String, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:pie}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:pie}}, Array{String, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base.__cat), Array{Tuple{Float64, Float64}, 1}, Tuple{Int64}, Tuple{Bool}, Tuple{Float64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Tuple{Float64, Float64}, 1, Array{Tuple{Float64, Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{Tuple{Float64, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Tuple{Float64, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Float64, Float64}, 1}, Array{Tuple{Float64, Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.in), Bool, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(*)), Bool, Float64})
precompile(Tuple{typeof(Base.:(!=)), Bool, Symbol})
precompile(Tuple{typeof(Base.:(/)), Float64, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot!), Array{Float64, 1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:w,), Tuple{Int64}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:w,), Tuple{Int64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation, :color), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64, ColorTypes.RGBA{Float64}}})
precompile(Tuple{getfield(Plots, Symbol("#gr_set_font##kw")), NamedTuple{(:halign, :valign, :rotation, :color), Tuple{Symbol, Symbol, Int64, ColorTypes.RGBA{Float64}}}, typeof(Plots.gr_set_font), Plots.Font, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.round), Tuple{Base.RefValue{Type{Int64}}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64, Float64}}, Tuple{Float64, Float64, Float64}, Tuple{Float64, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(GR.wc3towc), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(GR.wc3towc), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Float64, Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(GR.polyline3d), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.gr_w3tondc), Float64, Float64, Float64})
precompile(Tuple{typeof(GR.polyline3d), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}}}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#88#89")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#88#89"))}})
precompile(Tuple{typeof(Base.rand), StableRNGs.LehmerRNG, Array{String, 1}, Int64})
precompile(Tuple{Type{NamedTuple{(:layout, :group, :linetype, :linecolor), T} where T<:Tuple}, Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :group, :linetype, :linecolor), Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :group, :linetype, :linecolor), Tuple{Plots.GridLayout, Array{String, 1}, Array{Symbol, 2}, Symbol}}}})
precompile(Tuple{typeof(RecipesPipeline._extract_group_attributes), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(RecipesPipeline, Symbol("##_extract_group_attributes#51")), Function, typeof(RecipesPipeline._extract_group_attributes), Array{String, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, RecipesPipeline.GroupBy, Array{Float64, 1}})
precompile(Tuple{typeof(Base.union), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.union!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Array{String, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Array{Symbol, 2}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, RecipesPipeline.GroupBy, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, RecipesPipeline.GroupBy, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, RecipesPipeline.GroupBy, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.filter_data!), Base.Dict{Symbol, Any}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.filter_data), Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.filter_data), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:bar}}, Array{Int64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#167#170")){Plots.Axis}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(Plots, Symbol("#167#170")){Plots.Axis}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:steppre}}, Array{Int64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Float64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(GR.tick), Int64, Float64})
precompile(Tuple{typeof(GR.setwindow), Int64, Float64, Int64, Float64})
precompile(Tuple{typeof(Plots.gr_polaraxes), Int64, Float64, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Tuple{Plots.Axis}, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Plots.gr_tick_label), Tuple{Tuple{Plots.Axis}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{typeof(GR.drawarc), Float64, Float64, Float64, Float64, Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), Array{String, 1}, Int64})
precompile(Tuple{typeof(Plots.convert_to_polar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Array{Float64, 1}, Tuple{Int64, Float64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#90#92")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#90#92"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#91#93")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#91#93"))}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{String, 1}, Array{String, 1}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:heatmap}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{Any, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Float64, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Plots.heatmap_edges), Array{Float64, 1}, Symbol, Array{Float64, 1}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Float64, 1}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{Any, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Any, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.hcat), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{NamedTuple{(:layout, :title, :titlelocation, :left_margin, :bottom_margin, :xrotation), T} where T<:Tuple}, Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :title, :titlelocation, :left_margin, :bottom_margin, :xrotation), Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}}, typeof(RecipesBase.plot), Array{Float64, 2}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :title, :titlelocation, :left_margin, :bottom_margin, :xrotation), Tuple{Plots.GridLayout, Array{String, 2}, Symbol, Array{Measures.Length{:mm, Float64}, 2}, Measures.Length{:mm, Float64}, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Measures.Length{:mm, Float64}, 2}, Symbol})
precompile(Tuple{typeof(Base.isempty), Array{Measures.Length{:mm, Float64}, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Measures.Length{:mm, Float64}, 2}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:rotation,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:rotation,), Tuple{Int64}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:leg,), Tuple{Bool}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Float64}, Tuple{Int64, Int64}, Bool}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Int64, Array{Function, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Int64, Array{Function, 1}, Nothing})
precompile(Tuple{typeof(Base.copyto!), Array{Function, 1}, Tuple{typeof(Base.atan), typeof(Base.cos)}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.atan)}, typeof(Base.atan)})
precompile(Tuple{typeof(Base.vect), typeof(Base.atan)})
precompile(Tuple{typeof(Base.vcat), Array{typeof(Base.atan), 1}, Array{typeof(Base.cos), 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.atan), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.atan)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Float64}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{typeof(Base.log), Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, typeof(Base.log), Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Int64, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{typeof(Base.log)}, typeof(Base.log)})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Int64, Function, Nothing})
precompile(Tuple{typeof(Base.vect), typeof(Base.log)})
precompile(Tuple{typeof(Base.getindex), Array{typeof(Base.log), 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.log), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, typeof(Base.log)}})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Int64, Float64}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Tuple{Int64, Float64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:lims,), Tuple{Tuple{Int64, Float64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{NamedTuple{(:layout,), T} where T<:Tuple}, Tuple{Plots.GridLayout}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout,), Tuple{Plots.GridLayout}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#123")), Base.Iterators.Pairs{Symbol, Plots.GridLayout, Tuple{Symbol}, NamedTuple{(:layout,), Tuple{Plots.GridLayout}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.layout_args), Int64, Plots.GridLayout})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Float64}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(!=)), Float64, Symbol})
precompile(Tuple{typeof(GR.setwindow), Int64, Float64, Int64, Int64})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Tuple{Float64, Float64}}, Tuple{Int64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(SparseArrays.spdiagm), Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Vararg{Base.Pair{Int64, Array{Float64, 1}}, N} where N})
precompile(Tuple{typeof(SparseArrays._spdiagm), Nothing, Base.Pair{Int64, Array{Float64, 1}}, Vararg{Base.Pair{Int64, Array{Float64, 1}}, N} where N})
precompile(Tuple{typeof(SparseArrays.spdiagm_internal), Base.Pair{Int64, Array{Float64, 1}}, Vararg{Base.Pair{Int64, Array{Float64, 1}}, N} where N})
precompile(Tuple{typeof(Base.map), getfield(SparseArrays, Symbol("#31#32")), Tuple{Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}, Base.Pair{Int64, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T, Type{T} where T, Type{T} where T, Type{T} where T, Vararg{Type{T} where T, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{T} where T, Type{T} where T, Type{T} where T})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Array{Float64, 1}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64, Function})
precompile(Tuple{typeof(SparseArrays.sparse!), Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Int64, Int64, typeof(Base.:(+)), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(SparseArrays.spdiagm), Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Vararg{Base.Pair{Int64, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(SparseArrays._spdiagm), Nothing, Base.Pair{Int64, Base.UnitRange{Int64}}, Vararg{Base.Pair{Int64, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(SparseArrays.spdiagm_internal), Base.Pair{Int64, Base.UnitRange{Int64}}, Vararg{Base.Pair{Int64, Base.UnitRange{Int64}}, N} where N})
precompile(Tuple{typeof(Base.map), getfield(SparseArrays, Symbol("#31#32")), Tuple{Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}, Base.Pair{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copyto!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(SparseArrays.sparse), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, Function})
precompile(Tuple{typeof(SparseArrays.sparse!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Int64, Int64, typeof(Base.:(+)), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots.spy), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Plots.Spy}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Plots.Spy})
precompile(Tuple{typeof(Base.axes), SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Int64})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, SparseArrays.SparseMatrixCSC{Float64, Int64}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Plots.Spy})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Plots.Spy})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, RecipesPipeline.Surface{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:spy}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:spy}}, Base.OneTo{Int64}, Base.OneTo{Int64}, RecipesPipeline.Surface{SparseArrays.SparseMatrixCSC{Float64, Int64}}})
precompile(Tuple{typeof(Plots.processGridArg!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.in), Bool, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), String, Bool})
precompile(Tuple{Type{NamedTuple{(:grid, :lims), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Int64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:grid, :lims), Tuple{Bool, Tuple{Int64, Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:grid, :lims), Tuple{Bool, Tuple{Int64, Int64}}}}})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{Type{NamedTuple{(:grid, :lims, :flip), T} where T<:Tuple}, Tuple{Bool, Tuple{Int64, Int64}, Bool}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:grid, :lims, :flip), Tuple{Bool, Tuple{Int64, Int64}, Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:grid, :lims, :flip), Tuple{Bool, Tuple{Int64, Int64}, Bool}}}})
precompile(Tuple{Type{NamedTuple{(:grid,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:grid,), Tuple{Bool}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.spy), SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{typeof(Base.axes), SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{Type{RecipesPipeline.Surface{M} where M<:(AbstractArray{T, 2} where T)}, SparseArrays.SparseMatrixCSC{Int64, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.OneTo{Int64}, Base.OneTo{Int64}, RecipesPipeline.Surface{SparseArrays.SparseMatrixCSC{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:title,), T} where T<:Tuple}, Tuple{Array{String, 2}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title,), Tuple{Array{String, 2}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Int64, 1}})
precompile(Tuple{typeof(Base.eachindex), Array{Int64, 1}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Int64, 1}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Plots.gr_draw_markers), Plots.Series, Array{Int64, 1}, Array{Int64, 1}, Tuple{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Plots.gr_draw_marker), Plots.Series, Int64, Int64, Tuple{Float64, Float64}, Int64, Int64, Int64, Symbol})
precompile(Tuple{typeof(GR.cellarray), Int64, Int64, Float64, Float64, Int64, Int64, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.axes), Int64, Float64, Int64, Float64, Int64, Int64, Float64})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:grid, :title), T} where T<:Tuple}, Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:grid, :title), Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:grid, :title), Tuple{Tuple{Symbol, Symbol, Symbol, Int64, Float64}, String}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Symbol, Symbol, Symbol, Int64, Float64}, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Symbol, Symbol, Int64, Float64}})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Int64, Symbol})
precompile(Tuple{typeof(Base.in), Int64, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), String, Int64})
precompile(Tuple{typeof(Plots.processGridArg!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.in), Float64, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), Symbol, Float64})
precompile(Tuple{typeof(Base.:(==)), String, Float64})
precompile(Tuple{typeof(Plots.slice_arg), ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Float64, Int64})
precompile(Tuple{Type{NamedTuple{(:gridlinewidth, :grid, :gridalpha, :gridstyle, :foreground_color_grid), T} where T<:Tuple}, Tuple{Int64, Bool, Float64, Symbol, ColorTypes.RGBA{Float64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:gridlinewidth, :grid, :gridalpha, :gridstyle, :foreground_color_grid), Tuple{Int64, Bool, Float64, Symbol, ColorTypes.RGBA{Float64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:gridlinewidth, :grid, :gridalpha, :gridstyle, :foreground_color_grid), Tuple{Int64, Bool, Float64, Symbol, ColorTypes.RGBA{Float64}}}}})
precompile(Tuple{typeof(Base.deepcopy), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Int64, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Plots.Series, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Plots.Series, 1}})
precompile(Tuple{typeof(Base.length), Array{Plots.Series, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Float64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{RecipesBase.AbstractLayout, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.length), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Measures.Measure, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Base.length), Array{Measures.Measure, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.length), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{ColorTypes.RGB{Float64}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Base.IdDict{Any, Any}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:title,), Tuple{String}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.xgrid!), Plots.Plot{Plots.GRBackend}, Symbol, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#xgrid!#435#456")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.xgrid!), Plots.Plot{Plots.GRBackend}, Symbol, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(:xgrid,), T} where T<:Tuple}, Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:xgrid,), Tuple{Tuple{Symbol, Symbol, Int64, Symbol, Float64}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Symbol, Symbol, Int64, Symbol, Float64}})
precompile(Tuple{Type{NamedTuple{(:layout, :label, :fillrange, :fillalpha), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, String, Int64, Float64}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :label, :fillrange, :fillalpha), Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#123")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:layout, :label, :fillrange, :fillalpha), Tuple{Tuple{Int64, Int64}, String, Int64, Float64}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Plots.layout_args), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.add_sum), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Array{Float64, 1}, 1}, Vararg{Array{Array{Float64, 1}, 1}, N} where N})
precompile(Tuple{typeof(Plots.get_series_color), Int64, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Plots._transform_ticks), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.in), Base.UnitRange{Int64}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Plots.optimal_ticks_and_labels), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.filter), getfield(Plots, Symbol("#100#102")){Float64, Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots.gr_set_transparency), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!=)), Tuple{Array{Float64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{Float64, 1}, Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.BitArray{1}})
precompile(Tuple{Type{NamedTuple{(:marker_z, :color, :legend), T} where T<:Tuple}, Tuple{typeof(Base.:(+)), Symbol, Bool}})
precompile(Tuple{getfield(Plots, Symbol("#scatter##kw")), NamedTuple{(:marker_z, :color, :legend), Tuple{typeof(Base.:(+)), Symbol, Bool}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#338")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend), Tuple{typeof(Base.:(+)), Symbol, Bool}}}, typeof(Plots.scatter), Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{typeof(Base.:(+)), Symbol, Bool, Symbol}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:marker_z, :color, :legend, :seriestype), Tuple{typeof(Base.:(+)), Symbol, Bool, Symbol}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(Base.:(+))}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(Base.:(+))}}})
precompile(Tuple{getfield(Base, Symbol("#sum##kw")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.sum), Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 2}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 2}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.:(+)), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}})
precompile(Tuple{typeof(Base.permutedims), Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:labels,), T} where T<:Tuple}, Tuple{Array{String, 2}}})
precompile(Tuple{getfield(Plots, Symbol("#portfoliocomposition##kw")), NamedTuple{(:labels,), Tuple{Array{String, 2}}}, typeof(Plots.portfoliocomposition), Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##portfoliocomposition#201")), Base.Iterators.Pairs{Symbol, Array{String, 2}, Tuple{Symbol}, NamedTuple{(:labels,), Tuple{Array{String, 2}}}}, typeof(Plots.portfoliocomposition), Array{Float64, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Plots.PortfolioComposition}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Plots.PortfolioComposition})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 2}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._accumulaten!), typeof(Base.add_sum), Array{Float64, 2}, Array{Float64, 2}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Base.OneTo{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Nothing})
precompile(Tuple{typeof(Base.axes), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.reverse), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Plots.PortfolioComposition})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Plots.PortfolioComposition})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Plots.PortfolioComposition})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:shape}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.LinRange{T} where T}, Int64, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:ribbon,), Tuple{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, 1}, Int64})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.first), Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.:(-)), Base.LinRange{Float64}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Base.UnitRange{Int64}, Base.LinRange{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:ribbon,), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, 1}, Int64})
precompile(Tuple{typeof(Plots.wraptuple), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.first), Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}})
precompile(Tuple{typeof(Base.:(-)), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Base.UnitRange{Int64}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:ribbon,), Tuple{typeof(Base.sqrt)}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Function, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.vect), typeof(Base.sqrt)})
precompile(Tuple{typeof(Base.length), Array{typeof(Base.sqrt), 1}})
precompile(Tuple{typeof(Base.getindex), Array{typeof(Base.sqrt), 1}, Int64})
precompile(Tuple{typeof(Base.map), Function, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.sqrt), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.collect_similar), Base.OneTo{Int64}, Base.Generator{Base.OneTo{Int64}, typeof(Base.sqrt)}})
precompile(Tuple{typeof(Plots.wraptuple), Array{Float64, 1}})
precompile(Tuple{typeof(Base.first), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{Type{NamedTuple{(:ribbon,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:ribbon,), Tuple{Int64}}, typeof(RecipesBase.plot), Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Int64, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.first), Tuple{Int64}})
precompile(Tuple{typeof(Plots.make_fillrange_side), Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#123")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Base.LinRange{Float64}, Base.LinRange{Float64}}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#gr_polyline##kw")), NamedTuple{(:arrowside, :arrowstyle), Tuple{Symbol, Symbol}}, typeof(Plots.gr_polyline), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(GR.polyline), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Complex{Bool}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Array{Float64, 1}, Base.Complex{Bool}}}}}}}})
precompile(Tuple{Type{NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64}})
precompile(Tuple{getfield(Plots, Symbol("#histogram2d##kw")), NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio), Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64}}, typeof(Plots.histogram2d), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nbins, :show_empty_bins, :normed, :aspect_ratio, :seriestype), Tuple{Tuple{Int64, Int64}, Bool, Bool, Int64, Symbol}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Base.Complex{Float64}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Base.Complex{Float64}, 1}})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.map), getfield(Plots, Symbol("#179#180")){Tuple{Array{Float64, 1}, Array{Float64, 1}}, Tuple{Int64, Int64}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.add_sum), Float64})
precompile(Tuple{Base.BottomRF{typeof(Base.add_sum)}, Float64, Float64})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Float64, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#cat##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat#111")), Base.Val{1}, typeof(Base.cat), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat), Base.Val{1}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Array{Float64, 1}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Float64, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{1}}}, typeof(Base.cat_t), Type{Float64}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{1}, typeof(Base.cat_t), Type{Float64}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{1}, Type{T} where T, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Array{Float64, 1}, Float64, Array{Float64, 1}, Float64, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.cat_similar), Array{Float64, 1}, Type{T} where T, Tuple{Int64}})
precompile(Tuple{Type{Array{Float64, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Missing, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64, Base.Missing, Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:marker,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:marker,), Tuple{Bool}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Missing}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Float64}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Union{Base.Missing, Int64}, 1}, Nothing})
precompile(Tuple{typeof(Base._similar_for), Array{Union{Base.Missing, Int64}, 1}, Type{Float64}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64, Int64})
precompile(Tuple{typeof(Base.replace!), Function, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base._replace!), getfield(RecipesPipeline, Symbol("#37#38")), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Union{Base.Missing, Float64}, 1}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Array{Union{Base.Missing, Float64}, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Float64}, 1}, Symbol})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Int64, 1}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{NamedTuple{(:arrow,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:arrow,), Tuple{Int64}}, typeof(RecipesBase.plot), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Int64, Bool})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Plots.arrow), Int64})
precompile(Tuple{typeof(Base.:(*)), Int64, Base.Complex{Bool}})
precompile(Tuple{typeof(Base.:(+)), Int64, Base.Complex{Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Complex{Bool}})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Complex{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Complex{Int64}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Base.Complex{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Complex{Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Base.Complex{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Complex{Float64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Base.Complex{Float64}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Complex{Float64}, 1}, Tuple{Int64, Base.Complex{Int64}, Float64, Base.Complex{Int64}, Int64, Base.Complex{Float64}, Int64, Base.Complex{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Complex{Float64}, 1}, Base.Complex{Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Complex{Float64}, 1}, Base.Complex{Float64}, Int64})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:marker,), Tuple{Bool}}, typeof(RecipesBase.plot), Array{Base.Complex{Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:legend,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:legend,), Tuple{Bool}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#123")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:legend,), Tuple{Bool}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Plots.Arrow})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Arrow, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Arrow, Symbol})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Int64, Int64}, Tuple{Int64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Int64, Float64}, Tuple{Int64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Tuple{Int64, Float64}, Tuple{Int64, Int64}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Tuple{Int64, Real}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Int64, Real}, 1}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Float64}, Tuple{Int64, Float64}, Tuple{Int64, Int64}, Tuple{Int64, Float64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:legend,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:legend,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Tuple{Int64, Real}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Tuple{Int64, Real}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Int64, Real}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Real}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Real, 1}, Base.Generator{Array{Tuple{Int64, Real}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Int64, 1}, Array{Real, 1}})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Base.Dict{Symbol, Any}, Array{Real, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Int64}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Int64, 1}, Array{Real, 1}, Nothing})
precompile(Tuple{typeof(Base._similar_for), Array{Real, 1}, Type{Float64}, Base.Generator{Array{Real, 1}, typeof(Base.float)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Real, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base.float), Float64})
precompile(Tuple{typeof(Base.replace!), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base.vect), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.plot!), Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot!), Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Tuple{Int64, Real}, 1}})
precompile(Tuple{typeof(Plots.bbox), Float64, Float64, Float64, Float64})
precompile(Tuple{Type{Measures.Length{:w, Float64}}, Float64})
precompile(Tuple{Type{Measures.Length{:h, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}, Measures.Length{:w, Float64}, Measures.Length{:h, Float64}})
precompile(Tuple{Type{NamedTuple{(:inset,), T} where T<:Tuple}, Tuple{Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}, Type{NamedTuple{(:inset,), Tuple{Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}})
precompile(Tuple{getfield(Plots, Symbol("#lens!##kw")), NamedTuple{(:inset,), Tuple{Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}, typeof(Plots.lens!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##lens!#189")), Base.Iterators.Pairs{Symbol, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, Tuple{Symbol}, NamedTuple{(:inset,), Tuple{Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}}, typeof(Plots.lens!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:seriestype, :inset), Tuple{Symbol, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}, typeof(RecipesBase.plot!), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:seriestype, :inset), Tuple{Symbol, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}}, typeof(RecipesBase.plot!), Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:seriestype, :inset), Tuple{Symbol, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot!#127")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:seriestype, :inset), Tuple{Symbol, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}}}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, Symbol})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Measures.width), Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Plots.left), Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Plots.bottom), Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Base.getproperty), Measures.Length{:h, Float64}, Symbol})
precompile(Tuple{typeof(Measures.height), Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Plots.intersection_point), Float64, Float64, Float64, Float64, Float64, Float64})
precompile(Tuple{typeof(Base.copy), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Float64, Float64}, Symbol})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, Symbol})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, 1}})
precompile(Tuple{Type{NamedTuple{(:parent,), T} where T<:Tuple}, Tuple{Plots.Subplot{Plots.GRBackend}}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.Subplot{Plots.GRBackend}}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Int64, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}}, 1}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Float64, Float64}, Int64})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Tuple{Float64, Float64}}})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:lims,), Tuple{Tuple{Float64, Float64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.plotarea), Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(==)), Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}, Symbol})
precompile(Tuple{getfield(Measures, Symbol("##s13#5")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Measures, Symbol("#6#7")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Measures, Symbol("#6#7"))}})
precompile(Tuple{typeof(Measures.resolve), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}, Measures.BoundingBox{Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}, Tuple{Measures.Length{:w, Float64}, Measures.Length{:h, Float64}}}})
precompile(Tuple{typeof(Base.:(+)), Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}})
precompile(Tuple{typeof(Plots.left), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.top), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.width), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Measures.height), Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Float64, Float64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{10}}})
precompile(Tuple{typeof(StaticArrays._Length), Int64})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#184")), Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#185#186")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#185#186"))}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{10}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{10}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{10}}})
precompile(Tuple{Type{StaticArrays.SArray{Tuple{10}, T, 1, 10} where T}, Array{Float64, 1}})
precompile(Tuple{Type{OffsetArrays.OffsetArray{T, 1, AA} where AA<:(AbstractArray{T, N} where N where T) where T}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.vect), StaticArrays.SArray{Tuple{10}, Float64, 1, 10}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{AbstractArray{Float64, 1}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Float64, 1}, 1}, Tuple{StaticArrays.SArray{Tuple{10}, Float64, 1, 10}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}})
precompile(Tuple{Type{NamedTuple{(:label,), T} where T<:Tuple}, Tuple{Array{String, 2}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:label,), Tuple{Array{String, 2}}}, typeof(RecipesBase.plot), Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{AbstractArray{Float64, 1}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{StaticArrays.SArray{Tuple{10}, Float64, 1, 10}}, StaticArrays.SArray{Tuple{10}, Float64, 1, 10}})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{DataType, Nothing, Array{AbstractArray{Float64, 1}, 1}, Nothing}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{AbstractArray{Float64, 1}, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{AbstractArray{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}})
precompile(Tuple{getfield(StaticArrays, Symbol("##s173#259")), Any, Any, Any})
precompile(Tuple{typeof(Base.findfirst), getfield(StaticArrays, Symbol("#260#263")), Tuple{DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(StaticArrays, Symbol("#262#265")){Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(StaticArrays, Symbol("#262#265")){Int64}}})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}, StaticArrays.SArray{Tuple{10}, Float64, 1, 10}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{AbstractArray{Float64, 1}, 1}, getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#45#48")){Base.Dict{Symbol, Any}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vcat), Array{StaticArrays.MArray{Tuple{10}, Float64, 1, 10}, 1}, Array{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, StaticArrays.SOneTo{10}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}, Symbol})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, StaticArrays.SOneTo{10}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, StaticArrays.SOneTo{10}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.:(*)), Int64, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:ribbon, :label), T} where T<:Tuple}, Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, String}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:ribbon, :label), Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, String}}, typeof(RecipesBase.plot!), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:ribbon, :label), Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, String}}}, typeof(RecipesBase.plot!), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:ribbon, :label), Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, String}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, 1}, Int64})
precompile(Tuple{typeof(Plots.wraptuple), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.first), Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.:(-)), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.make_fillrange_side), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), StaticArrays.SOneTo{10}})
precompile(Tuple{typeof(Base.collect), StaticArrays.MArray{Tuple{10}, Float64, 1, 10}})
precompile(Tuple{typeof(Plots.iter_segments), StaticArrays.SOneTo{10}, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{StaticArrays.SOneTo{10}, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{StaticArrays.SOneTo{10}, StaticArrays.MArray{Tuple{10}, Float64, 1, 10}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), StaticArrays.SOneTo{10}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), StaticArrays.MArray{Tuple{10}, Float64, 1, 10}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.length), OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect), OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Plots.iter_segments), OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.getindex), OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Plots._cycle), OffsetArrays.IdOffsetRange{Int64, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Plots._cycle), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Plots._cycle), OffsetArrays.OffsetArray{Float64, 1, Array{Float64, 1}}, Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{NamedTuple{(:titlefont, :legendfontsize, :guidefont, :tickfont, :guide, :framestyle, :yminorgrid), T} where T<:Tuple}, Tuple{Tuple{Int64, String}, Int64, Tuple{Int64, Symbol}, Tuple{Int64, Symbol}, String, Symbol, Bool}})
precompile(Tuple{getfield(Plots, Symbol("#default##kw")), NamedTuple{(:titlefont, :legendfontsize, :guidefont, :tickfont, :guide, :framestyle, :yminorgrid), Tuple{Tuple{Int64, String}, Int64, Tuple{Int64, Symbol}, Tuple{Int64, Symbol}, String, Symbol, Bool}}, typeof(Plots.default)})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:titlefont, :legendfontsize, :guidefont, :tickfont, :guide, :framestyle, :yminorgrid), Tuple{Tuple{Int64, String}, Int64, Tuple{Int64, Symbol}, Tuple{Int64, Symbol}, String, Symbol, Bool}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, String}, Symbol})
precompile(Tuple{typeof(Plots.processMinorGridArg!), Base.Dict{Symbol, Any}, Bool, Symbol})
precompile(Tuple{typeof(Plots.processFontArg!), Base.Dict{Symbol, Any}, Symbol, Int64})
precompile(Tuple{typeof(Plots.processFontArg!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Tuple{Int64, String}})
precompile(Tuple{typeof(Plots.processFontArg!), Base.Dict{Symbol, Any}, Symbol, String})
precompile(Tuple{typeof(Plots.default), Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Plots.default), Symbol, Int64})
precompile(Tuple{typeof(Plots.default), Symbol, String})
precompile(Tuple{typeof(Plots.default), Symbol, Symbol})
precompile(Tuple{Type{NamedTuple{(:label, :title, :xlabel, :linewidth, :legend), T} where T<:Tuple}, Tuple{Array{String, 2}, String, String, Int64, Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:label, :title, :xlabel, :linewidth, :legend), Tuple{Array{String, 2}, String, String, Int64, Symbol}}, typeof(RecipesBase.plot), Array{Function, 1}, Float64, Vararg{Float64, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :title, :xlabel, :linewidth, :legend), Tuple{Array{String, 2}, String, String, Int64, Symbol}}}, typeof(RecipesBase.plot), Array{Function, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:label, :title, :xlabel, :linewidth, :legend), Tuple{Array{String, 2}, String, String, Int64, Symbol}}}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Function, 1}, Float64, Float64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Function, 1}, Float64, Float64})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#66#67")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Function, 1}, Symbol, Symbol, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Array{Function, 1}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}})
precompile(Tuple{typeof(PlotUtils.adapted_grid), Function, Tuple{Float64, Float64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#26")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.sin)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
precompile(Tuple{typeof(Base.extrema), Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(==)), Float64, Int64})
precompile(Tuple{typeof(Base.all), Base.BitArray{1}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.zeros), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}, Type{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.setindex!), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Tuple{Array{Float64, 1}, Array{Float64, 1}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(RecipesPipeline._scaled_adapted_grid), Tuple{Base.Broadcast.Extruded{Array{Function, 1}, Tuple{Bool}, Tuple{Int64}}, Base.RefValue{Symbol}, Base.RefValue{Symbol}, Float64, Float64}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#26")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, typeof(Base.cos)}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Array{Float64, 1}, Array{Float64, 1}}, 1}})
precompile(Tuple{typeof(RecipesBase.wrap_tuple), Tuple{Array{Array{Float64, 1}, 1}, Array{Array{Float64, 1}, 1}}})
precompile(Tuple{typeof(Base.:(>)), Bool, Int64})
precompile(Tuple{typeof(Base.append!), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Float64, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Float64, Array{Float64, 1}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Float64}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(&)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Float64, Array{Float64, 1}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Float64}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Dates.DateTime}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.DateTime}, Tuple{Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Plots.heatmap), Array{Dates.DateTime, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##heatmap#356")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.heatmap), Array{Dates.DateTime, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Dates.DateTime, 1}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Dates.DateTime, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Dates.DateTime, 1}, Base.UnitRange{Int64}, Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Dates.DateTime, 1}, Base.UnitRange{Int64}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Dates.DateTime, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Dates.DateTime, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Dates.DateTime, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Dates.DateTime, 1}, Base.UnitRange{Int64}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Base.map), Function, Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#74#75")), Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Dates.DateTime, 1}, Base.Generator{Array{Dates.DateTime, 1}, getfield(RecipesPipeline, Symbol("#74#75"))}})
precompile(Tuple{Type{RecipesPipeline.Formatted{T} where T}, Array{Int64, 1}, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, RecipesPipeline.Formatted{Array{Int64, 1}}, Base.UnitRange{Int64}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, RecipesPipeline.Formatted{Array{Int64, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, RecipesPipeline.Formatted{Array{Int64, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, RecipesPipeline.Formatted{Array{Int64, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, RecipesPipeline.Formatted{Array{Int64, 1}}, Base.UnitRange{Int64}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.slice_arg), Function, Int64})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:formatter,), Tuple{typeof(RecipesPipeline.datetimeformatter)}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Plots.heatmap_edges), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Float64}, Base.Generator{Base.UnitRange{Int64}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Base.UnitRange{Int64}, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.:(==)), Function, Symbol})
precompile(Tuple{typeof(Base.:(==)), Function, Function})
precompile(Tuple{getfield(PlotUtils, Symbol("#optimize_datetime_ticks##kw")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_datetime_ticks), Float64, Float64})
precompile(Tuple{Type{Dates.Year}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{DataType, 1}, Type})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Dates.Year}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{DataType, 1}, Base.RefValue{Type{Dates.Year}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{DataType, 1}, Base.RefValue{Type{Dates.Year}}}}})
precompile(Tuple{typeof(Base.findfirst), Base.BitArray{1}})
precompile(Tuple{typeof(Base.getindex), Array{DataType, 1}, Base.StepRange{Int64, Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(PlotUtils, Symbol("#58#59")){Dates.DateTime}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{DataType, 1}, getfield(PlotUtils, Symbol("#58#59")){Dates.DateTime}}})
precompile(Tuple{getfield(PlotUtils, Symbol("#58#59")){Dates.DateTime}, Type{T} where T})
precompile(Tuple{Type{Dates.Year}, Dates.DateTime})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{DataType, 1}, getfield(PlotUtils, Symbol("#58#59")){Dates.DateTime}}, Int64})
precompile(Tuple{Type{Dates.DateTime}, Dates.Year})
precompile(Tuple{Base.Colon, Dates.DateTime, Dates.Year, Dates.DateTime})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Dates.DateTime, Dates.Year}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Dates.DateTime, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{1}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Dates.Date}, Tuple{Array{Dates.DateTime, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Dates.value), Tuple{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Dates.value), Tuple{Array{Dates.DateTime, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Int64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Int64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Int64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Plots.gr_get_ticks_size), Tuple{Array{Int64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Plots.heatmap_edges), Array{Float64, 1}, Symbol, Base.UnitRange{Int64}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.get_minor_ticks), Plots.Subplot{Plots.GRBackend}, Plots.Axis, Tuple{Array{Int64, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.in), Tuple{Array{Int64, 1}, Array{String, 1}}, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, String}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Function, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{String, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}, Float64, Float64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.get_z_normalized), Tuple{Array{Float64, 1}, Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Plots.get_z_normalized), Tuple{Array{Float64, 1}, Float64, Float64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int32}, Array{Float64, 1}, Base.HasShape{1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Int32, 1}})
precompile(Tuple{typeof(Base.round), Type{Int32}, Float64})
precompile(Tuple{typeof(Base.setindex!), Array{Int32, 1}, Int32, Int64})
precompile(Tuple{typeof(GR.nonuniformcellarray), Array{Float64, 1}, Array{Float64, 1}, Int64, Int64, Array{Int32, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#94#96"))}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{getfield(Main, Symbol("#94#96"))}, getfield(Main, Symbol("#94#96"))})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function, Nothing})
precompile(Tuple{typeof(Base.vect), getfield(Main, Symbol("#94#96"))})
precompile(Tuple{typeof(Base.getindex), Array{getfield(Main, Symbol("#94#96")), 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#94#96")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#94#96"))}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#95#97"))}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{getfield(Main, Symbol("#95#97"))}, getfield(Main, Symbol("#95#97"))})
precompile(Tuple{typeof(Base.vect), getfield(Main, Symbol("#95#97"))})
precompile(Tuple{typeof(Base.getindex), Array{getfield(Main, Symbol("#95#97")), 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#95#97")), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(Base.collect_similar), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.Generator{Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, getfield(Main, Symbol("#95#97"))}})
precompile(Tuple{Type{NamedTuple{(:layout, :link), T} where T<:Tuple}, Tuple{Int64, Symbol}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:layout, :link), Tuple{Int64, Symbol}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Plots, Symbol("#146#147")){Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#146#147")){Symbol}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base._array_for), Type{Plots.Axis}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Plots.Axis, 1}, Plots.Axis, Base.Generator{Array{Any, 1}, getfield(Plots, Symbol("#146#147")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Plots.Axis, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Axis, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Axis, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Axis, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{getfield(RecipesBase, Symbol("#@recipe")), LineNumberNode, Module, Expr})
precompile(Tuple{typeof(RecipesBase.create_kw_body), Expr})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Expr, Expr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Any, 1}, Expr, Expr}, Int64, Int64})
precompile(Tuple{typeof(RecipesBase.get_function_def), Expr, Array{Any, 1}})
precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Expr, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.process_recipe_body!), Expr})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Main.Measurement}, Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Main.Measurement}, Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.adjoint), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(*)), Tuple{Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Int64, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Int64, Base.UnitRange{Int64}}}}, Array{Float64, 2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Main.Measurement}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Int64, Base.UnitRange{Int64}}}}, Array{Float64, 2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, Type{Main.Measurement}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(*)), Tuple{Base.UnitRange{Int64}, LinearAlgebra.Adjoint{Int64, Base.UnitRange{Int64}}}}, Array{Float64, 2}}}})
precompile(Tuple{typeof(Base.hcat), Array{Main.Measurement, 1}, Array{Main.Measurement, 1}})
precompile(Tuple{typeof(Plots.scatter), Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##scatter#338")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.scatter), Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Main.Measurement, 1}, Array{Main.Measurement, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Main.Measurement, 1}, Array{Main.Measurement, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Main.Measurement, 1}, Array{Main.Measurement, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 2}, Nothing})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:xerror}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:yerror}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.isempty), Array{Float64, 2}})
precompile(Tuple{typeof(Plots.slice_arg), Array{Float64, 2}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:xerror}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Plots.error_zipit), Array{Float64, 1}})
precompile(Tuple{typeof(Plots.error_coords), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Tuple{Array{Float64, 1}}, getfield(Plots, Symbol("#190#191"))}, Int64})
precompile(Tuple{typeof(Plots.get_series_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:yerror}}, Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, Vararg{Array{Main.Measurement, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:seriestype,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Array{Main.Measurement, 1}, Vararg{Array{Main.Measurement, 1}, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, Array{Main.Measurement, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, Array{Main.Measurement, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:zerror}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:xerror}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.error_coords), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Plots, Symbol("#190#191")), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Array{Float64, 1}, Array{Float64, 1}}, getfield(Plots, Symbol("#190#191"))}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Float64, 1}, Array{Float64, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:yerror}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), RecipesPipeline.DefaultsDict, Type{Base.Val{:zerror}}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.heatmap), Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##heatmap#356")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.heatmap), Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot), Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, Array{Main.Measurement, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, Array{Main.Measurement, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Main.Measurement, 1}, Array{Main.Measurement, 1}, RecipesPipeline.Surface{Array{Main.Measurement, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}, Array{Float64, 1}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Float64, 1}, Array{Float64, 1}, RecipesPipeline.Surface{Array{Float64, 2}}})
precompile(Tuple{typeof(Plots.wireframe), Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##wireframe#382")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.wireframe), Array{Main.Measurement, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:wireframe}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot##kw")), NamedTuple{(:legend,), Tuple{Symbol}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#123")), Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:legend,), Tuple{Symbol}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.firstindex), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.map), typeof(Base.lastindex), Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{Plots.SegmentsIterator}, Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}}}, getfield(Base, Symbol("#3#4")){typeof(GR.wc3towc)}}})
precompile(Tuple{typeof(GR.surface), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#ensure_artifact_installed##kw")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{Type{Distributions.MvNormal{T, Cov, Mean} where Mean<:(AbstractArray{T, 1} where T) where Cov<:(PDMats.AbstractPDMat{T} where T<:Real) where T<:Real}, Array{Float64, 2}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Vararg{Tuple{Int64, Int64}, N} where N})
precompile(Tuple{typeof(RecipesBase.plot), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.eltype), Type})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{Type{NamedTuple{(:alpha,), T} where T<:Tuple}, Tuple{Float64}})
precompile(Tuple{typeof(Base.rand), StableRNGs.LehmerRNG, Distributions.MvNormal{Float64, PDMats.PDMat{Float64, Array{Float64, 2}}, FillArrays.Zeros{Float64, 1, Tuple{Base.OneTo{Int64}}}}, Int64})
precompile(Tuple{typeof(Base.eachcol), Array{Float64, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Base.Generator{Base.OneTo{Int64}, getfield(Base, Symbol("#194#195")){Array{Float64, 2}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{2, T} where T}, Tuple{Array{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, 1}}})
precompile(Tuple{getfield(GeometryBasics, Symbol("##s16#9")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryBasics, Symbol("#10#19")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryBasics, Symbol("#10#19"))}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{2, T} where T}, Tuple{Array{Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, 1}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:alpha,), Tuple{Float64}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Float64, Symbol}}})
precompile(Tuple{getfield(Plots, Symbol("#scatter!##kw")), NamedTuple{(:alpha,), Tuple{Float64}}, typeof(Plots.scatter!), Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:alpha, :seriestype), Tuple{Float64, Symbol}}, typeof(RecipesBase.plot!), Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot!#126")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:alpha, :seriestype), Tuple{Float64, Symbol}}}, typeof(RecipesBase.plot!), Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:alpha, :seriestype), Tuple{Float64, Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.GRBackend}, Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryBasics.Point{2, Float64}, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryBasics.Point{2, Float64}, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{GeometryBasics.Point{2, Float64}, 1}})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), AbstractArray{#s20, N} where N where #s20<:Union{Bool, Unsigned}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(Plots.unicodeplots)})
precompile(Tuple{getfield(Plots, Symbol("#267#300"))})
precompile(Tuple{getfield(Plots, Symbol("#268#301"))})
precompile(Tuple{getfield(Plots, Symbol("#269#302"))})
precompile(Tuple{getfield(Core, Symbol("#@cmd")), LineNumberNode, Module, Any})
precompile(Tuple{getfield(Base, Symbol("#shell_parse##kw")), NamedTuple{(:special,), Tuple{String}}, typeof(Base.shell_parse), String})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.UnicodePlotsBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.UnicodePlotsBackend}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StackTraces.StackFrame, Int64}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.UnicodePlotsBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.UnicodePlotsBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.UnicodePlotsBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.UnicodePlotsBackend}, Plots.Subplot{Plots.UnicodePlotsBackend}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.UnicodePlotsBackend, Symbol})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.UnicodePlotsBackend}, Int64, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.:(!=)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.Multimedia.display), Plots.PlotsDisplay, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots._update_min_padding!), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.ispolar), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.axis_limits), Plots.Subplot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Plots.labelfunc), Symbol, Plots.UnicodePlotsBackend})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Array{String, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Plots.text_size), Int64, Int64, Int64})
precompile(Tuple{typeof(Plots.leftpad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.toppad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.rightpad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.bottompad), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.plotarea!), Plots.Subplot{Plots.UnicodePlotsBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.bbox!), Plots.Subplot{Plots.UnicodePlotsBackend}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Plots.rebuildUnicodePlot!), Plots.Plot{Plots.UnicodePlotsBackend}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:width, :height, :title, :xlim, :ylim, :border), T} where T<:Tuple}, Tuple{Int64, Int64, String, Array{Float64, 1}, Array{Float64, 1}, Symbol}})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:width, :height, :title, :xlim, :ylim, :border), Tuple{Int64, Int64, String, Array{Float64, 1}, Array{Float64, 1}, Symbol}}, Type{UnicodePlots.Plot{T} where T<:UnicodePlots.GraphicsArea}, Array{Float64, 1}, Array{Float64, 1}, Type{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(UnicodePlots.xlabel!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, String})
precompile(Tuple{typeof(UnicodePlots.ylabel!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, String})
precompile(Tuple{typeof(Plots.addUnicodeSeries!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, RecipesPipeline.DefaultsDict, Bool, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.float), Base.OneTo{Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Tuple{Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Tuple{Symbol, Symbol}, getfield(Plots, Symbol("#490#492")){RecipesPipeline.DefaultsDict}}, Int64})
precompile(Tuple{typeof(Base.float), Array{Float64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.in), ColorTypes.RGBA{Float64}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Iterators.filter), Function, Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Plots, Symbol("#491#493")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Filter{getfield(Plots, Symbol("#491#493")), Base.Iterators.Zip{Tuple{Array{Float64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{Type{NamedTuple{(:color, :name), T} where T<:Tuple}, Tuple{Symbol, String}})
precompile(Tuple{getfield(UnicodePlots, Symbol("#lineplot!##kw")), NamedTuple{(:color, :name), Tuple{Symbol, String}}, typeof(UnicodePlots.lineplot!), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}, Array{Float64, 1}, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.show), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.show)}})
precompile(Tuple{typeof(Base.show), UnicodePlots.Plot{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(Base.show), Base.TTY, UnicodePlots.Plot{UnicodePlots.BrailleCanvas}})
precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.TTY, String})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Nothing}, Base.Generator{Array{Any, 1}, typeof(Base.show)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Nothing, 1}, Nothing, Base.Generator{Array{Any, 1}, typeof(Base.show)}, Int64})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:bar}}, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots.xlims), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Plots.ylims), Plots.Subplot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Plots.text), String, Symbol, Symbol})
precompile(Tuple{getfield(Plots, Symbol("##font#86")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.font), Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(Base.vect), Tuple{Float64, Float64, Plots.PlotText}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:annotation,), Tuple{Array{Tuple{Float64, Float64, Plots.PlotText}, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.annotate!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Float64, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Tuple{Float64, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Float64, Float64, Plots.PlotText})
precompile(Tuple{typeof(Plots.hline!), Plots.Plot{Plots.UnicodePlotsBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##hline!#365")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Plots.hline!), Plots.Plot{Plots.UnicodePlotsBackend}, Vararg{Any, N} where N})
precompile(Tuple{getfield(RecipesBase, Symbol("#plot!##kw")), NamedTuple{(:seriestype,), Tuple{Symbol}}, typeof(RecipesBase.plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:hline}}, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(Base.vect), Dates.Date, Vararg{Dates.Date, N} where N})
precompile(Tuple{typeof(RecipesBase.plot), Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Dates.Date, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Dates.Date, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Dates.Date, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{Dates.Date, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#72#73")), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Dates.Date, 1}, Base.Generator{Array{Dates.Date, 1}, getfield(RecipesPipeline, Symbol("#72#73"))}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Dates.Date, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Array{Dates.Date, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Dates.Date, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, RecipesPipeline.Formatted{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, RecipesPipeline.Formatted{Array{Int64, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, RecipesPipeline.Formatted{Array{Int64, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, RecipesPipeline.Formatted{Array{Int64, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, RecipesPipeline.Formatted{Array{Int64, 1}}, Array{Int64, 1}, Nothing})
precompile(Tuple{getfield(Plots, Symbol("#attr!##kw")), NamedTuple{(:formatter,), Tuple{typeof(RecipesPipeline.dateformatter)}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{typeof(Base.vect), Tuple{Dates.Date, Float64, Plots.PlotText}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:annotation,), Tuple{Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Plots.annotate!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Tuple{Dates.Date, Float64, Plots.PlotText}, 1}})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Dates.Date, Float64, Plots.PlotText})
precompile(Tuple{Type{Dates.Day}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Type{Dates.Day}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{DataType, 1}, Base.RefValue{Type{Dates.Day}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{DataType, 1}, Base.RefValue{Type{Dates.Day}}}}})
precompile(Tuple{Type{Dates.Month}, Dates.DateTime})
precompile(Tuple{Type{Dates.Day}, Dates.DateTime})
precompile(Tuple{Type{Dates.DateTime}, Dates.Year, Dates.Month, Dates.Day})
precompile(Tuple{typeof(Base.:(+)), Dates.DateTime, Dates.Day})
precompile(Tuple{Base.Colon, Dates.DateTime, Dates.Day, Dates.DateTime})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Dates.DateTime, Dates.Day}})
precompile(Tuple{typeof(Base.:(/)), Array{Int64, 1}, Float64})
precompile(Tuple{typeof(Plots.process_annotation), Plots.Subplot{Plots.UnicodePlotsBackend}, Int64, Float64, Plots.PlotText})
precompile(Tuple{typeof(RecipesBase.plot)})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.UnicodePlotsBackend}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Int64}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Any, Any}, String, Symbol})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#98#100")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#98#100"))}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#99#101")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Main, Symbol("#99#101"))}})
precompile(Tuple{typeof(Plots.histogram), Array{Int64, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:histogram}}, Plots.Plot{Plots.UnicodePlotsBackend}})
precompile(Tuple{getfield(Plots, Symbol("#_make_hist##kw")), NamedTuple{(:normed, :weights), Tuple{Bool, Nothing}}, typeof(Plots._make_hist), Tuple{Array{Float64, 1}}, Symbol})
precompile(Tuple{typeof(Base.vect), Base.Missing})
precompile(Tuple{typeof(RecipesBase.plot), Array{Base.Missing, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Base.Missing, 1}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Base.Missing, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Base.Missing, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Base.Missing, 1}, Nothing})
precompile(Tuple{typeof(Base.vcat), Base.Missing, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, Int64}, 1}, Tuple{Int64}, Tuple{Bool}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 1, Array{Union{Base.Missing, Int64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, Base.Missing})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Missing, Int64}, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 1}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Union{Base.Missing, Int64}, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{Union{Base.Missing, Int64}, 1}, Type{Base.Missing}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Missing, 1}, Base.Generator{Array{Union{Base.Missing, Int64}, 1}, typeof(Base.float)}, Int64, Int64})
precompile(Tuple{typeof(Base.fill), Base.Missing, Int64})
precompile(Tuple{typeof(Base.vcat), Array{Base.Missing, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Union{Base.Missing, Int64}}, Tuple{Int64, Int64}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._front), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._front), Int64, Base.Missing})
precompile(Tuple{typeof(Base.typed_hcat), Type{Union{Base.Missing, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64, Base.Missing}})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, Int64, Base.Missing})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Union{Base.Missing, Int64}}, Int64, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{2}, typeof(Base.cat_t), Type{Union{Base.Missing, Int64}}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.cat_similar), Int64, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, Int64}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, Int64}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 2, Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Int64})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, Int64}, 2, Array{Union{Base.Missing, Int64}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.typed_vcat), Type{Union{Base.Missing, Int64}}, Array{Union{Base.Missing, Int64}, 2}, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, Int64}, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Union{Base.Missing, Int64}, 2}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Nothing, Array{Union{Base.Missing, Int64}, 2}, Nothing})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Nothing, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Union{Base.Missing, Int64}, 2}, Nothing})
precompile(Tuple{typeof(Base._array_for), Type{Array{Float64, 1}}, Base.OneTo{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.OneTo{Int64}, getfield(RecipesPipeline, Symbol("#49#50")){Array{Union{Base.Missing, Int64}, 2}}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Float64, 1}, 1}, Array{Union{Base.Missing, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.OneTo{Int64}, getfield(RecipesPipeline, Symbol("#49#50")){Array{Union{Base.Missing, Int64}, 2}}}, Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Array{T, 1} where T, 1}, Int64})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltypeof), String, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typed_hvcat), Type{Union{Base.Missing, String}}, Tuple{Int64, Int64}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._front), String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._front), String, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, String, String})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{2}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.cat_similar), String, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{Type{Array{Union{Base.Missing, String}, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, String}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.tail), Tuple{String, String, Base.Missing, String}})
precompile(Tuple{typeof(Base.tail), Tuple{String, Base.Missing, String}})
precompile(Tuple{typeof(Base.typed_hcat), Type{T} where T, Base.Missing, String})
precompile(Tuple{getfield(Base, Symbol("#cat_t##kw")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#110")), Base.Val{2}, typeof(Base.cat_t), Type{Union{Base.Missing, String}}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{T} where T, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.cat_similar), Base.Missing, Type{T} where T, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.__cat), Array{Union{Base.Missing, String}, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, Base.Missing, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Union{Base.Missing, String}, 2, Array{Union{Base.Missing, String}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Base.Missing})
precompile(Tuple{typeof(Base.typed_vcat), Type{Union{Base.Missing, String}}, Array{Union{Base.Missing, String}, 2}, Array{Union{Base.Missing, String}, 2}})
precompile(Tuple{typeof(Base.hvcat), Tuple{Int64, Int64}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(RecipesBase.plot), Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Union{Base.Missing, String}, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Union{Base.Missing, String}, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Array{Union{Base.Missing, String}, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Union{Base.Missing, String}, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Array{Union{Base.Missing, String}, 2}, Array{Int64, 2}, Nothing})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.vect), Plots.Plot{Plots.UnicodePlotsBackend}, Vararg{Plots.Plot{Plots.UnicodePlotsBackend}, N} where N})
precompile(Tuple{typeof(Base.iterate), Array{Plots.Plot{Plots.UnicodePlotsBackend}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Plots.Plot{Plots.UnicodePlotsBackend}, 1}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{Any, 1}})
precompile(Tuple{typeof(Base.maximum), Base.Generator{Array{Any, 1}, typeof(Base.length)}})
precompile(Tuple{Base.BottomRF{typeof(Base.max)}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##open#287")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Main, Symbol("#102#105")), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Tuple{getfield(Main, Symbol("#104#107")), Int64, Int64}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Function, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Tuple{Symbol, Symbol}, getfield(RecipesPipeline, Symbol("#64#65")){Base.Dict{Symbol, Any}}}, Int64})
precompile(Tuple{typeof(RecipesPipeline._scaled_adapted_grid), Function, Symbol, Symbol, Int64, Int64})
precompile(Tuple{typeof(PlotUtils.adapted_grid), Function, Tuple{Float64, Float64}})
precompile(Tuple{getfield(PlotUtils, Symbol("##adapted_grid#26")), Int64, typeof(PlotUtils.adapted_grid), getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(Main, Symbol("#104#107"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Tuple{Float64, Float64}})
precompile(Tuple{getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(Main, Symbol("#104#107"))}, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(Main, Symbol("#104#107"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, getfield(PlotUtils, Symbol("#27#29")){getfield(Base, Symbol("#62#63")){getfield(Base, Symbol("#62#63")){getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, getfield(Main, Symbol("#104#107"))}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isfinite), Tuple{Array{Float64, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Function, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.UnicodePlotsBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}, Vararg{Array{Float64, 1}, N} where N})
precompile(Tuple{getfield(Plots, Symbol("#@animate")), LineNumberNode, Module, Expr, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots._animate), Expr})
precompile(Tuple{getfield(Test, Symbol("#@test_throws")), LineNumberNode, Module, Any, Any})
precompile(Tuple{Type{Test.Threw}, Any, Any, LineNumberNode})
precompile(Tuple{typeof(Test.do_test_throws), Test.ExecutionResult, Any, Any})
precompile(Tuple{getfield(Main, Symbol("#segments#108")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}})
precompile(Tuple{getfield(Main, Symbol("#segments#108")), Array{Float64, 1}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.:(==)), Array{Base.UnitRange{Int64}, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}, Vararg{AbstractArray{T, 1} where T, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Array{Float64, 1}, Base.UnitRange{Int64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_eltype), Base.UnitRange{Int64}, Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.typed_vcat), Type{Float64}, Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}, Vararg{Union{AbstractArray{T, 1}, AbstractArray{T, 2}} where T, N} where N})
precompile(Tuple{typeof(Base._typed_vcat), Type{Float64}, Tuple{Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}, Base.UnitRange{Int64}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.vect), Base.UnitRange{Int64}, Vararg{Base.UnitRange{Int64}, N} where N})
precompile(Tuple{typeof(Base.vcat), Float64, Int64})
precompile(Tuple{getfield(Main, Symbol("#segments#108")), Array{Float64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Plots.iter_segments), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.findnext), getfield(Base, Symbol("#64#65")){getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Base.UnitRange{Int64}}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.findnext), getfield(Plots, Symbol("#9#10")){Tuple{Array{Float64, 1}, Base.UnitRange{Int64}}}, Base.UnitRange{Int64}, Int64})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Float64}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Tuple{Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Tuple{Tuple{Int64, Float64}, Tuple{Base.Missing, Base.Missing}}})
precompile(Tuple{typeof(Base.vect), Tuple{Int64, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any}, 1}, Tuple{Tuple{Int64, Base.Missing}, Tuple{Base.Missing, String}}})
precompile(Tuple{typeof(Base.vect), Tuple{Base.Missing, Base.Missing, Base.Missing}, Vararg{Any, N} where N})
precompile(Tuple{Type{Array{Tuple{Any, Any, Any}, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any, Any}, 1}, Tuple{Tuple{Base.Missing, Base.Missing, Base.Missing}, Tuple{String, String, String}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64}, 1}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{getfield(GeometryTypes, Symbol("##s20#25")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(GeometryTypes, Symbol("#26#35")), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(GeometryTypes, Symbol("#26#35"))}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{2, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{2, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{String, String}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{String, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{String, String}, 1}, Array{Tuple{String, String}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{String, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{String, String}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{String, String}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{2, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{String, String}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{String, String}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{2, String}, 1}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Int64, String}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{String, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, String}, 1}, Array{Tuple{Int64, String}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, String}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, String}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, String}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{2, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{GeometryTypes.Point{2, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{GeometryTypes.Point{2, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{GeometryTypes.Point{2, Any}, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, String}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, String}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{2, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{GeometryBasics.Point{2, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryBasics.Point{2, Any}, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{GeometryBasics.Point{2, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{GeometryBasics.Point{2, Any}, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64}, 1}, Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{3, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{3, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Int64, Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Int64, Int64, Int64, Int64}, 1}, Array{Tuple{Int64, Int64, Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Int64, Int64, Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{4, Int64}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64, Int64}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Int64, Int64, Int64, Int64}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{4, Int64}, 1}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Tuple{Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#17#19"))}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{Tuple{Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Float64, 1}, Base.Missing, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, Float64}}, 1}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any}, 1}}})
precompile(Tuple{typeof(Base.ntuple), getfield(StaticArrays, Symbol("#3#4")), Base.Val{2}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Type{T} where T, Tuple{Array{Tuple{Any, Any}, 1}}})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.Point{2, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{2, Float64}, 1}, GeometryTypes.Point{2, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{GeometryTypes.Point{2, T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryTypes.Point{2, T} where T, 1}, Array{GeometryTypes.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryTypes.Point{2, Base.Missing}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{2, T} where T, 1}})
precompile(Tuple{getfield(Plots, Symbol("#17#19")), GeometryTypes.Point{2, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{GeometryTypes.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#18#20")), GeometryTypes.Point{2, Float64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Float64}, 1}, Array{Union{Base.Missing, Float64}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, Float64}, Union{Base.Missing, Float64}}, 1}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Float64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any}, 1}}}})
precompile(Tuple{Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryBasics.Point{2, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryBasics.Point{2, Float64}, 1}, GeometryBasics.Point{2, Float64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryBasics.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{GeometryBasics.Point{2, T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryBasics.Point{2, T} where T, 1}, Array{GeometryBasics.Point{2, Float64}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryBasics.Point{2, Base.Missing}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{2, T} where T, 1}})
precompile(Tuple{getfield(Plots, Symbol("#17#19")), GeometryBasics.Point{2, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Float64}, Array{GeometryBasics.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#18#20")), GeometryBasics.Point{2, Float64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Float64}, 1}, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{Tuple{Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Missing, 1}, String, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, Int64}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, Int64}, Union{Base.Missing, String}}, 1}, Array{Tuple{Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{Int64, Base.Missing}, Tuple{Int64, Base.Missing}})
precompile(Tuple{typeof(Base.isequal), Tuple{Base.Missing, String}, Tuple{Base.Missing, String}})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Int64, Base.Missing}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.Point{2, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, GeometryTypes.Point{2, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Missing, String}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryTypes.Point{2, T} where T, 1}, Array{GeometryTypes.Point{2, Union{Base.Missing, Int64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryTypes.Point{2, Union{Base.Missing, String}}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#17#19")), GeometryTypes.Point{2, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{GeometryTypes.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#17#19")), GeometryTypes.Point{2, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#18#20")), GeometryTypes.Point{2, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{GeometryTypes.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#18#20")), GeometryTypes.Point{2, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Int64, Base.Missing}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryBasics.Point{2, Union{Base.Missing, Int64}}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryBasics.Point{2, Union{Base.Missing, Int64}}, 1}, GeometryBasics.Point{2, Union{Base.Missing, Int64}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryBasics.Point{2, Union{Base.Missing, Int64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Missing, String}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryBasics.Point{2, T} where T, 1}, Array{GeometryBasics.Point{2, Union{Base.Missing, Int64}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryBasics.Point{2, Union{Base.Missing, String}}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#17#19")), GeometryBasics.Point{2, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{GeometryBasics.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#17#19")), GeometryBasics.Point{2, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, Int64}, 1}, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#17#19"))}, Int64, Int64})
precompile(Tuple{getfield(Plots, Symbol("#18#20")), GeometryBasics.Point{2, Union{Base.Missing, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{GeometryBasics.Point{2, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#18#20")), GeometryBasics.Point{2, Union{Base.Missing, String}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryBasics.Point{2, T} where T, 1}, getfield(Plots, Symbol("#18#20"))}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Base.Missing, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Base.Missing, 1}, Array{Base.Missing, 1}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Base.Missing, 1}, Array{Base.Missing, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Base.Missing, Base.Missing}, 1}, Array{Tuple{Base.Missing, Base.Missing}, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Base.Missing, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Base.Missing, Base.Missing}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Base.Missing, Base.Missing}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{2, Base.Missing}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Base.Missing, Base.Missing}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Base.Missing, Base.Missing}, 1}}}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{2, Base.Missing}, 1}})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{Tuple{Any, Any, Any}, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{Tuple{Any, Any, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#21#24"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#21#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#22#25"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#22#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#23#26"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{Tuple{Any, Any, Any}, 1}, getfield(RecipesPipeline, Symbol("#23#26"))}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Vararg{Array{Union{Base.Missing, String}, 1}, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Zip{Tuple{Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}, Array{Union{Base.Missing, String}, 1}}}})
precompile(Tuple{typeof(Base.isequal), Array{Tuple{Union{Base.Missing, String}, Union{Base.Missing, String}, Union{Base.Missing, String}}, 1}, Array{Tuple{Any, Any, Any}, 1}})
precompile(Tuple{typeof(Base.isequal), Tuple{String, String, String}, Tuple{String, String, String}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type{T} where T, Array{Tuple{Any, Any, Any}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any, Any}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.combine_eltypes), Type{T} where T, Tuple{Array{Tuple{Any, Any, Any}, 1}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryTypes.Point{3, Base.Missing}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryTypes.Point{3, Base.Missing}, 1}, GeometryTypes.Point{3, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryTypes.Point{3, Base.Missing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryTypes.Point{S, T} where T where S}, Tuple{String, String, String}})
precompile(Tuple{Type{Array{GeometryTypes.Point{3, T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryTypes.Point{3, T} where T, 1}, Array{GeometryTypes.Point{3, Base.Missing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryTypes.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryTypes.Point{3, String}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryTypes.Point{3, T} where T, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{GeometryTypes.Point{3, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#21#24"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#21#24")), GeometryTypes.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#21#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#22#25"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#22#25")), GeometryTypes.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#22#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#23#26"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#23#26")), GeometryTypes.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryTypes.Point{3, T} where T, 1}, getfield(Plots, Symbol("#23#26"))}, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any, Any}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Array{Tuple{Any, Any, Any}, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{GeometryBasics.Point{3, Base.Missing}}})
precompile(Tuple{typeof(Base.setindex!), Array{GeometryBasics.Point{3, Base.Missing}, 1}, GeometryBasics.Point{3, Base.Missing}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{GeometryBasics.Point{3, Base.Missing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{GeometryBasics.Point{S, T} where T where S}, Tuple{String, String, String}})
precompile(Tuple{Type{Array{GeometryBasics.Point{3, T} where T, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{GeometryBasics.Point{3, T} where T, 1}, Array{GeometryBasics.Point{3, Base.Missing}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{GeometryBasics.Point{S, T} where T where S}, Tuple{Base.Broadcast.Extruded{Array{Tuple{Any, Any, Any}, 1}, Tuple{Bool}, Tuple{Int64}}}}, GeometryBasics.Point{3, String}, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(RecipesPipeline.unzip), Array{GeometryBasics.Point{3, T} where T, 1}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Missing}, Array{GeometryBasics.Point{3, T} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryBasics.Point{3, T} where T, 1}, getfield(Plots, Symbol("#21#24"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#21#24")), GeometryBasics.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryBasics.Point{3, T} where T, 1}, getfield(Plots, Symbol("#21#24"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryBasics.Point{3, T} where T, 1}, getfield(Plots, Symbol("#22#25"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#22#25")), GeometryBasics.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryBasics.Point{3, T} where T, 1}, getfield(Plots, Symbol("#22#25"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Missing, 1}, Base.Missing, Base.Generator{Array{GeometryBasics.Point{3, T} where T, 1}, getfield(Plots, Symbol("#23#26"))}, Int64})
precompile(Tuple{getfield(Plots, Symbol("#23#26")), GeometryBasics.Point{3, String}})
precompile(Tuple{typeof(Base.collect_to!), Array{Union{Base.Missing, String}, 1}, Base.Generator{Array{GeometryBasics.Point{3, T} where T, 1}, getfield(Plots, Symbol("#23#26"))}, Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Tuple{Float64, Float64}, Tuple{Int64, Float64}})
precompile(Tuple{getfield(Blosc, Symbol("#1#2"))})
precompile(Tuple{getfield(Gtk.GLib, Symbol("#100#101"))})
